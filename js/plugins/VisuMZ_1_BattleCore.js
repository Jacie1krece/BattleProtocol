//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.88;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.88] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 * 
 * <Under>
 * 
 * - Used for: Animation Name Tags
 * - If this tag is found in an animation's name, the animation will appear
 *   under battlers while in battle.
 * - This effect only applies to battlers in the battle scene.
 * - Under effect is NOT applied to status window portraits.
 * - Under effect is NOT applied to projectile animations.
 * 
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 *   - This is NOT used for filtering out who the player can or cannot select.
 *   - This determines a final result.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 * 
 * <Damage Flinch>
 * 
 * - Used for: Skill, Item Notetags
 * - Normally, MP and TP actions do not cause damage flinching. However,
 *   skills and items with this notetag will cause damage flinching if they
 *   hurt the target's MP or TP.
 * - HP damage will always be affected and cause target to flinch.
 * 
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *     
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Check Formulas?:
 *   - It's usually bad practice to put in battle mechanics within damage
 *     formulas and this will check the damage formulas for skills and items
 *     to see if they contain any of the common battle mechanics that have the
 *     potential to cause problems.
 *   - Checks for illegal mechanics inside of damage formulas?
 *   - (ie. gainHp, loseHp, addBuff, addDebuff, addState, etc)
 *   - Read the following article for an explanation on why battle mechanics in
 *     damage formulas are undesirable and for an alternate solution:
 *     - http://www.yanfly.moe/wiki/Stop_Putting_Mechanics_in_Damage_Formulas
 *   - Turn this off if you do not want to be alerted of which skills/items
 *     have battle mechanics in their damage formulas.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.88: September 18, 2025
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetag added by Olivia:
 * *** <Damage Flinch>
 * **** Normally, MP and TP actions do not cause damage flinching. However,
 *      skills and items with this notetag will cause damage flinching if they
 *      hurt the target's MP or TP.
 * **** HP damage will always be affected and cause target to flinch.
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Damage Settings > Check Formulas?
 * **** It's usually bad practice to put in battle mechanics within damage
 *      formulas and this will check the damage formulas for skills and items
 *      to see if they contain any of the common battle mechanics that have the
 *      potential to cause problems.
 * **** Checks for illegal mechanics inside of damage formulas?
 * **** (ie. gainHp, loseHp, addBuff, addDebuff, addState, etc)
 * **** Read the following article for an explanation on why battle mechanics
 *      in damage formulas are undesirable and for an alternate solution:
 * **** http://www.yanfly.moe/wiki/Stop_Putting_Mechanics_in_Damage_Formulas
 * **** Turn this off if you do not want to be alerted of which skills/items
 *      have battle mechanics in their damage formulas. 
 * 
 * Version 1.87: June 12, 2025
 * * Bug Fixes!
 * ** Fixed a bug where <JS Accuracy> and related notetags did not work.
 *    Fix made by Arisu.
 * ** Fixed a bug where dual wielding weapons with HP/MP bonuses would cause
 *    the max cache values to fluctuate per hit. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added fail safes for plugins that would sometimes add null battlers to
 *    animation queues. This update prevents crashes for potential checks.
 * ** Added better compatibility with Message Core's text language change.
 *    Enemy names did not convert prior to placing state icons and would cause
 *    misalignment.
 * 
 * Version 1.86: January 16, 2025
 * * Bug Fixes!
 * ** Fixed a bug where during Active TPB, actors were not showing damage
 *    motions. Fix made by Olivia.
 * ** Fixed a bug regarding the in-battle status requiring that the Main Menu
 *    Core to be installed when other plugins are also present. Fix by Olivia.
 * ** Fixed a bug where <Exclude From Status Listing> notetag was not working
 *    properly due to a documentation typo of <Exclude From Status List>. Both
 *    notetags should now work. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added clarity for Plugin Parameters > Party Command Window Settings >
 *    Help Window
 * ** Added clarity for Plugin Parameters > Actor Command Window Settings >
 *    Help Window
 * *** The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 *     battle layouts.
 * * New Features!
 * ** New notetag added by Irina:
 * *** <Under>
 * **** If this tag is found in an animation's name, the animation will appear
 *      under battlers while in battle.
 * ***** This effect only applies to battlers in the battle scene.
 * ***** Under effect is NOT applied to status window portraits.
 * ***** Under effect is NOT applied to projectile animations.
 * ** Added new Action Sequence Projectile settings:
 * *** Extra Settings > End Animation ID:
 * **** Plays an animation when projectile reaches target.
 * **** Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param CheckFormulaMechanics:eval
 * @text Check Formulas?
 * @parent DamageStyles
 * @type boolean
 * @on Check
 * @off Disable
 * @desc Checks for illegal mechanics inside of damage formulas?
 * (ie. gainHp, loseHp, addBuff, addDebuff, addState, etc)
 * @default true
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x4376f0=_0x6eaa;(function(_0x4c8617,_0x3c26f1){const _0x387813=_0x6eaa,_0x23eb30=_0x4c8617();while(!![]){try{const _0x3e9506=-parseInt(_0x387813(0x6f9))/0x1+-parseInt(_0x387813(0x68e))/0x2+-parseInt(_0x387813(0x1a0))/0x3+parseInt(_0x387813(0x46b))/0x4*(-parseInt(_0x387813(0x18c))/0x5)+-parseInt(_0x387813(0xc2a))/0x6*(-parseInt(_0x387813(0x9f9))/0x7)+parseInt(_0x387813(0x967))/0x8*(-parseInt(_0x387813(0x72d))/0x9)+parseInt(_0x387813(0x188))/0xa*(parseInt(_0x387813(0x1f0))/0xb);if(_0x3e9506===_0x3c26f1)break;else _0x23eb30['push'](_0x23eb30['shift']());}catch(_0x68c400){_0x23eb30['push'](_0x23eb30['shift']());}}}(_0x373d,0xd54fc));var label=_0x4376f0(0x19c),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x4376f0(0x4bd)](function(_0x509d61){const _0x553cb0=_0x4376f0;return _0x509d61[_0x553cb0(0x383)]&&_0x509d61['description'][_0x553cb0(0x3e9)]('['+label+']');})[0x0];VisuMZ[label][_0x4376f0(0xae8)]=VisuMZ[label][_0x4376f0(0xae8)]||{},VisuMZ['ConvertParams']=function(_0x22facf,_0x5a1796){const _0x4f9d22=_0x4376f0;for(const _0x5dd7af in _0x5a1796){if(_0x5dd7af[_0x4f9d22(0x844)](/(.*):(.*)/i)){const _0x1dccc6=String(RegExp['$1']),_0x1f4002=String(RegExp['$2'])[_0x4f9d22(0x896)]()[_0x4f9d22(0x5cf)]();let _0x3dcb74,_0x1140af,_0x1672d9;switch(_0x1f4002){case _0x4f9d22(0x38d):_0x3dcb74=_0x5a1796[_0x5dd7af]!==''?Number(_0x5a1796[_0x5dd7af]):0x0;break;case _0x4f9d22(0x699):_0x1140af=_0x5a1796[_0x5dd7af]!==''?JSON['parse'](_0x5a1796[_0x5dd7af]):[],_0x3dcb74=_0x1140af[_0x4f9d22(0x424)](_0xcc6940=>Number(_0xcc6940));break;case'EVAL':_0x3dcb74=_0x5a1796[_0x5dd7af]!==''?eval(_0x5a1796[_0x5dd7af]):null;break;case _0x4f9d22(0x129):_0x1140af=_0x5a1796[_0x5dd7af]!==''?JSON['parse'](_0x5a1796[_0x5dd7af]):[],_0x3dcb74=_0x1140af[_0x4f9d22(0x424)](_0xe38fe4=>eval(_0xe38fe4));break;case _0x4f9d22(0x1b9):_0x3dcb74=_0x5a1796[_0x5dd7af]!==''?JSON[_0x4f9d22(0x537)](_0x5a1796[_0x5dd7af]):'';break;case _0x4f9d22(0xb69):_0x1140af=_0x5a1796[_0x5dd7af]!==''?JSON[_0x4f9d22(0x537)](_0x5a1796[_0x5dd7af]):[],_0x3dcb74=_0x1140af['map'](_0x5e90c0=>JSON[_0x4f9d22(0x537)](_0x5e90c0));break;case'FUNC':_0x3dcb74=_0x5a1796[_0x5dd7af]!==''?new Function(JSON[_0x4f9d22(0x537)](_0x5a1796[_0x5dd7af])):new Function(_0x4f9d22(0x1f8));break;case _0x4f9d22(0x6f3):_0x1140af=_0x5a1796[_0x5dd7af]!==''?JSON[_0x4f9d22(0x537)](_0x5a1796[_0x5dd7af]):[],_0x3dcb74=_0x1140af[_0x4f9d22(0x424)](_0x4d4830=>new Function(JSON['parse'](_0x4d4830)));break;case _0x4f9d22(0xaeb):_0x3dcb74=_0x5a1796[_0x5dd7af]!==''?String(_0x5a1796[_0x5dd7af]):'';break;case _0x4f9d22(0x6d2):_0x1140af=_0x5a1796[_0x5dd7af]!==''?JSON[_0x4f9d22(0x537)](_0x5a1796[_0x5dd7af]):[],_0x3dcb74=_0x1140af[_0x4f9d22(0x424)](_0x528bdb=>String(_0x528bdb));break;case'STRUCT':_0x1672d9=_0x5a1796[_0x5dd7af]!==''?JSON['parse'](_0x5a1796[_0x5dd7af]):{},_0x22facf[_0x1dccc6]={},VisuMZ['ConvertParams'](_0x22facf[_0x1dccc6],_0x1672d9);continue;case _0x4f9d22(0xc41):_0x1140af=_0x5a1796[_0x5dd7af]!==''?JSON[_0x4f9d22(0x537)](_0x5a1796[_0x5dd7af]):[],_0x3dcb74=_0x1140af[_0x4f9d22(0x424)](_0x3aaf08=>VisuMZ[_0x4f9d22(0xa93)]({},JSON['parse'](_0x3aaf08)));break;default:continue;}_0x22facf[_0x1dccc6]=_0x3dcb74;}}return _0x22facf;},(_0x38df2d=>{const _0x555f05=_0x4376f0,_0x4616cb=_0x38df2d[_0x555f05(0x7d3)];for(const _0x21ca07 of dependencies){if(!Imported[_0x21ca07]){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x555f05(0xa30)](_0x4616cb,_0x21ca07)),SceneManager[_0x555f05(0x9d4)]();break;}}const _0x582187=_0x38df2d['description'];if(_0x582187[_0x555f05(0x844)](/\[Version[ ](.*?)\]/i)){const _0x3400d7=Number(RegExp['$1']);_0x3400d7!==VisuMZ[label]['version']&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x555f05(0xa30)](_0x4616cb,_0x3400d7)),SceneManager['exit']());}if(_0x582187[_0x555f05(0x844)](/\[Tier[ ](\d+)\]/i)){const _0x7ec60a=Number(RegExp['$1']);_0x7ec60a<tier?(alert(_0x555f05(0x39e)[_0x555f05(0xa30)](_0x4616cb,_0x7ec60a,tier)),SceneManager['exit']()):tier=Math[_0x555f05(0xa63)](_0x7ec60a,tier);}VisuMZ[_0x555f05(0xa93)](VisuMZ[label][_0x555f05(0xae8)],_0x38df2d[_0x555f05(0x3fd)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x339eea){const _0x553837=_0x4376f0;let _0x587cdc=[];for(const _0x211b2b of _0x339eea){_0x587cdc=_0x587cdc[_0x553837(0x4f7)](VisuMZ[_0x553837(0x974)](_0x211b2b));}return _0x587cdc[_0x553837(0x4bd)](_0x54a8b6=>_0x54a8b6);},VisuMZ['ConvertActionSequenceTarget']=function(_0x401a5d){const _0x23fe0f=_0x4376f0,_0x2a159d=BattleManager['allBattleMembers']()[_0x23fe0f(0x4bd)](_0x18c20d=>_0x18c20d&&_0x18c20d[_0x23fe0f(0x41e)]()),_0x103723=BattleManager['_subject'],_0x22e630=BattleManager[_0x23fe0f(0x961)],_0x7f41d7=BattleManager[_0x23fe0f(0x610)]?BattleManager['_allTargets'][_0x23fe0f(0x393)](0x0):_0x2a159d;_0x401a5d=_0x401a5d[_0x23fe0f(0x177)]()[_0x23fe0f(0x5cf)]();if(_0x401a5d==='user')return[_0x103723];else{if(_0x401a5d===_0x23fe0f(0x386))return[_0x22e630];else{if(_0x401a5d===_0x23fe0f(0xbdf)){if(_0x22e630){const _0x5c652d=_0x7f41d7[_0x23fe0f(0x68d)](_0x22e630);return _0x5c652d>=0x0?[_0x7f41d7[_0x5c652d-0x1]||_0x22e630]:[_0x22e630];}}else{if(_0x401a5d===_0x23fe0f(0x66d)){if(_0x22e630){const _0x24c973=_0x7f41d7[_0x23fe0f(0x68d)](_0x22e630);return _0x24c973>=0x0?[_0x7f41d7[_0x24c973+0x1]||_0x22e630]:[_0x22e630];}}else{if(_0x401a5d===_0x23fe0f(0x8bf))return _0x7f41d7;else{if(_0x401a5d==='focus')return[_0x103723][_0x23fe0f(0x4f7)](_0x7f41d7);else{if(_0x401a5d===_0x23fe0f(0x630))return _0x2a159d['filter'](_0x93c541=>_0x93c541!==_0x103723&&!_0x7f41d7['includes'](_0x93c541)&&_0x93c541['notFocusValid']());else{if(_0x401a5d===_0x23fe0f(0x1c4))return[VisuMZ[_0x23fe0f(0x53b)]()];else{if(_0x401a5d[_0x23fe0f(0x844)](/SPECIAL (.*)>/i)){const _0x25f1f5=String(RegExp['$1'])[_0x23fe0f(0x597)](',')['map'](_0x2c8866=>_0x2c8866[_0x23fe0f(0x5cf)]());return[VisuMZ[_0x23fe0f(0x4dd)](_0x25f1f5)];}}}}}}}}}if(_0x103723){if(_0x401a5d===_0x23fe0f(0x353))return _0x103723[_0x23fe0f(0x4b9)]()[_0x23fe0f(0x3a7)]();else{if(_0x401a5d==='alive\x20friends\x20not\x20user')return _0x103723['friendsUnit']()['aliveMembers']()[_0x23fe0f(0x4bd)](_0x38fcc0=>_0x38fcc0!==_0x103723);else{if(_0x401a5d===_0x23fe0f(0x767))return _0x103723[_0x23fe0f(0x4b9)]()['aliveMembers']()[_0x23fe0f(0x4bd)](_0x5a7384=>_0x5a7384!==_0x22e630);else{if(_0x401a5d==='dead\x20friends')return _0x103723[_0x23fe0f(0x4b9)]()[_0x23fe0f(0x16c)]();else{if(_0x401a5d[_0x23fe0f(0x844)](/FRIEND INDEX (\d+)/i)){const _0x31c953=Number(RegExp['$1']);return[_0x103723['friendsUnit']()[_0x23fe0f(0x277)]()[_0x31c953]];}}}}}if(_0x401a5d===_0x23fe0f(0x1c0))return _0x103723['opponentsUnit']()[_0x23fe0f(0x3a7)]();else{if(_0x401a5d===_0x23fe0f(0x682))return _0x103723['opponentsUnit']()[_0x23fe0f(0x3a7)]()[_0x23fe0f(0x4bd)](_0x59d9fe=>_0x59d9fe!==_0x22e630);else{if(_0x401a5d===_0x23fe0f(0x218))return _0x103723['opponentsUnit']()[_0x23fe0f(0x16c)]();else{if(_0x401a5d['match'](/OPPONENT INDEX (\d+)/i)){const _0x161287=Number(RegExp['$1']);return[_0x103723['opponentsUnit']()[_0x23fe0f(0x277)]()[_0x161287]];}}}}}if(_0x401a5d===_0x23fe0f(0x1d7))return $gameParty['aliveMembers']();else{if(_0x401a5d===_0x23fe0f(0xa0e))return $gameParty[_0x23fe0f(0x3a7)]()[_0x23fe0f(0x4bd)](_0x4e7e3c=>_0x4e7e3c!==_0x103723);else{if(_0x401a5d===_0x23fe0f(0x200))return $gameParty[_0x23fe0f(0x3a7)]()['filter'](_0x14e7b9=>_0x14e7b9!==_0x22e630);else{if(_0x401a5d===_0x23fe0f(0x2f3))return $gameParty[_0x23fe0f(0x16c)]();else{if(_0x401a5d[_0x23fe0f(0x844)](/ACTOR INDEX (\d+)/i)){const _0x44428e=Number(RegExp['$1']);return[$gameParty['members']()[_0x44428e]];}else{if(_0x401a5d[_0x23fe0f(0x844)](/ACTOR ID (\d+)/i)){const _0x28abbd=Number(RegExp['$1']);return[$gameActors[_0x23fe0f(0x965)](_0x28abbd)];}}}}}}if(_0x401a5d===_0x23fe0f(0x4d0))return $gameTroop['aliveMembers']();else{if(_0x401a5d===_0x23fe0f(0xc27))return $gameTroop['aliveMembers']()[_0x23fe0f(0x4bd)](_0x488640=>_0x488640!==_0x103723);else{if(_0x401a5d===_0x23fe0f(0x970))return $gameTroop[_0x23fe0f(0x3a7)]()[_0x23fe0f(0x4bd)](_0x2a107d=>_0x2a107d!==_0x22e630);else{if(_0x401a5d===_0x23fe0f(0xba8))return $gameTroop[_0x23fe0f(0x16c)]();else{if(_0x401a5d[_0x23fe0f(0x844)](/ENEMY INDEX (\d+)/i)){const _0x40455b=Number(RegExp['$1']);return[$gameTroop[_0x23fe0f(0x277)]()[_0x40455b]];}else{if(_0x401a5d[_0x23fe0f(0x844)](/ENEMY ID (\d+)/i)){const _0x365a93=Number(RegExp['$1']);return $gameTroop[_0x23fe0f(0x3a7)]()[_0x23fe0f(0x4bd)](_0x5d6a59=>_0x5d6a59[_0x23fe0f(0xaca)]()===_0x365a93);}}}}}}if(_0x401a5d===_0x23fe0f(0x18b))return _0x2a159d[_0x23fe0f(0x4bd)](_0x9c7978=>_0x9c7978[_0x23fe0f(0x5c4)]());else{if(_0x401a5d===_0x23fe0f(0x27c))return _0x2a159d[_0x23fe0f(0x4bd)](_0x112049=>_0x112049[_0x23fe0f(0x5c4)]()&&_0x112049!==_0x103723);else{if(_0x401a5d==='alive\x20battlers\x20not\x20target')return _0x2a159d['filter'](_0x152e61=>_0x152e61[_0x23fe0f(0x5c4)]()&&_0x152e61!==_0x22e630);else{if(_0x401a5d==='dead\x20battlers')return _0x2a159d[_0x23fe0f(0x4bd)](_0x4a4ac5=>_0x4a4ac5[_0x23fe0f(0x57e)]());}}}return[];},VisuMZ[_0x4376f0(0x53b)]=function(){const _0x523cc9=_0x4376f0;return BattleManager[_0x523cc9(0x961)];},VisuMZ[_0x4376f0(0x4dd)]=function(_0x4d82ea){return BattleManager['_target'];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x466)]=function(_0x37e9f2){const _0x451a81=_0x4376f0;if(!VisuMZ[_0x451a81(0x19c)]['Settings']['ActionSequence'][_0x451a81(0x3ff)]&&_0x37e9f2[_0x451a81(0x269)]()){const _0xc0821c=/<CUSTOM ACTION SEQUENCE>/i;if(!_0x37e9f2['item']()[_0x451a81(0x54f)][_0x451a81(0x844)](_0xc0821c)){const _0x1ac191=_0x37e9f2['item']();let _0x535193='⚠⚠⚠\x20Warning!\x20⚠⚠⚠\x0a\x0a';_0x535193+=_0x451a81(0x997),_0x535193+=_0x451a81(0xa96);const _0x4d9d4d=$dataItems[_0x451a81(0x3e9)](_0x1ac191)?_0x451a81(0x312):_0x451a81(0x3a2),_0x54e860=_0x535193['format'](_0x4d9d4d,_0x1ac191['id'],_0x1ac191[_0x451a81(0x7d3)]);return alert(_0x54e860),![];}}},PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x7d1),_0x25e347=>{const _0x5dfb6d=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5dfb6d(0xa93)](_0x25e347,_0x25e347);const _0x28317f=$gameTemp[_0x5dfb6d(0x3c4)](),_0x3801c3=BattleManager['_action'],_0x3752d7=BattleManager[_0x5dfb6d(0x3f8)],_0x381274=BattleManager[_0x5dfb6d(0x610)]?BattleManager[_0x5dfb6d(0x610)][_0x5dfb6d(0x393)](0x0):[],_0x2fa87b=BattleManager[_0x5dfb6d(0x127)];VisuMZ[_0x5dfb6d(0x19c)][_0x5dfb6d(0x466)](_0x3801c3);if(!_0x28317f||!_0x3801c3||!_0x3752d7)return;if(!_0x3801c3[_0x5dfb6d(0x269)]())return;if(_0x25e347[_0x5dfb6d(0x853)])_0x2fa87b['displayAction'](_0x3752d7,_0x3801c3['item']());_0x25e347['ApplyImmortal']&&_0x2fa87b['push'](_0x5dfb6d(0x510),_0x3752d7,_0x381274,!![]);if(_0x25e347['ActionStart'])_0x2fa87b[_0x5dfb6d(0x6b0)](_0x5dfb6d(0x1bf),_0x3752d7,_0x3801c3);if(_0x25e347[_0x5dfb6d(0x5fe)])_0x2fa87b[_0x5dfb6d(0x6b0)]('waitForMovement');if(_0x25e347[_0x5dfb6d(0x7e6)])_0x2fa87b['push'](_0x5dfb6d(0xb2d),_0x3752d7,_0x3801c3);if(_0x25e347[_0x5dfb6d(0xac5)])_0x2fa87b[_0x5dfb6d(0x6b0)](_0x5dfb6d(0x183));_0x28317f[_0x5dfb6d(0x8d7)]('battlelog');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Set_WholeActionSet',_0x343594=>{const _0x2b8a6d=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2b8a6d(0xa93)](_0x343594,_0x343594);const _0xb81417=$gameTemp[_0x2b8a6d(0x3c4)](),_0x100907=BattleManager[_0x2b8a6d(0x93c)],_0x2495b8=BattleManager[_0x2b8a6d(0x3f8)],_0x8f6939=BattleManager[_0x2b8a6d(0x610)]?BattleManager[_0x2b8a6d(0x610)][_0x2b8a6d(0x393)](0x0):[],_0x5de737=BattleManager[_0x2b8a6d(0x127)],_0x1a4946=_0x343594['DualWield']??![];VisuMZ[_0x2b8a6d(0x19c)][_0x2b8a6d(0x466)](_0x100907);if(!_0xb81417||!_0x100907||!_0x2495b8)return;if(!_0x100907[_0x2b8a6d(0x269)]())return;let _0x129e08=_0x1a4946?_0x5de737[_0x2b8a6d(0xc49)](_0x2495b8):0x1;for(let _0x5428f9=0x0;_0x5428f9<_0x129e08;_0x5428f9++){_0x1a4946&&_0x2495b8[_0x2b8a6d(0xb9d)]()&&_0x5de737[_0x2b8a6d(0x6b0)](_0x2b8a6d(0x673),_0x2495b8,_0x5428f9);if(_0x343594['PerformAction'])_0x5de737[_0x2b8a6d(0x6b0)]('performAction',_0x2495b8,_0x100907);if(_0x343594[_0x2b8a6d(0x5b8)]>0x0)_0x5de737[_0x2b8a6d(0x6b0)]('waitCount',_0x343594['WaitCount']);if(_0x343594[_0x2b8a6d(0x848)])_0x5de737[_0x2b8a6d(0x6b0)](_0x2b8a6d(0x9a7),_0x2495b8,_0x8f6939,_0x100907['item']()[_0x2b8a6d(0x8d4)]);if(_0x343594[_0x2b8a6d(0xac5)])_0x5de737[_0x2b8a6d(0x6b0)](_0x2b8a6d(0x183));for(const _0x1fd790 of _0x8f6939){if(!_0x1fd790)continue;if(_0x343594[_0x2b8a6d(0x61f)])_0x5de737[_0x2b8a6d(0x6b0)](_0x2b8a6d(0x8ab),_0x2495b8,_0x1fd790);}}_0x1a4946&&_0x2495b8[_0x2b8a6d(0xb9d)]()&&_0x5de737['push'](_0x2b8a6d(0xc16),_0x2495b8);if(_0x343594[_0x2b8a6d(0x5b4)])_0x5de737[_0x2b8a6d(0x6b0)](_0x2b8a6d(0x510),_0x2495b8,_0x8f6939,![]);_0xb81417[_0x2b8a6d(0x8d7)](_0x2b8a6d(0x209));}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x99d),_0x56c960=>{const _0x4b4718=_0x4376f0;if(!SceneManager[_0x4b4718(0x446)]())return;VisuMZ[_0x4b4718(0xa93)](_0x56c960,_0x56c960);const _0x4a80f5=$gameTemp['getLastPluginCommandInterpreter'](),_0x26a4b8=BattleManager[_0x4b4718(0x93c)],_0x41b013=BattleManager[_0x4b4718(0x3f8)],_0x2b67bb=BattleManager[_0x4b4718(0x610)]?BattleManager['_allTargets'][_0x4b4718(0x393)](0x0):[],_0x5d94c3=BattleManager[_0x4b4718(0x127)],_0x349866=_0x56c960['DualWield']??![];VisuMZ['BattleCore'][_0x4b4718(0x466)](_0x26a4b8);if(!_0x4a80f5||!_0x26a4b8||!_0x41b013)return;if(!_0x26a4b8[_0x4b4718(0x269)]())return;let _0x2acc2c=_0x349866?_0x5d94c3[_0x4b4718(0xc49)](_0x41b013):0x1;for(let _0xe2f510=0x0;_0xe2f510<_0x2acc2c;_0xe2f510++){for(const _0x555240 of _0x2b67bb){if(!_0x555240)continue;_0x349866&&_0x41b013[_0x4b4718(0xb9d)]()&&_0x5d94c3['push'](_0x4b4718(0x673),_0x41b013,_0xe2f510);if(_0x56c960['PerformAction'])_0x5d94c3['push']('performAction',_0x41b013,_0x26a4b8);if(_0x56c960[_0x4b4718(0xb12)]>0x0)_0x5d94c3[_0x4b4718(0x6b0)](_0x4b4718(0x199),_0x56c960[_0x4b4718(0xb12)]);if(_0x56c960[_0x4b4718(0x848)])_0x5d94c3[_0x4b4718(0x6b0)]('showAnimation',_0x41b013,[_0x555240],_0x26a4b8[_0x4b4718(0x269)]()[_0x4b4718(0x8d4)]);if(_0x56c960[_0x4b4718(0x23b)]>0x0)_0x5d94c3[_0x4b4718(0x6b0)]('waitCount',_0x56c960[_0x4b4718(0x23b)]);if(_0x56c960[_0x4b4718(0x61f)])_0x5d94c3[_0x4b4718(0x6b0)](_0x4b4718(0x8ab),_0x41b013,_0x555240);}}_0x349866&&_0x41b013['isActor']()&&_0x5d94c3[_0x4b4718(0x6b0)]('clearActiveWeaponSet',_0x41b013);if(_0x56c960[_0x4b4718(0x5b4)])_0x5d94c3[_0x4b4718(0x6b0)](_0x4b4718(0x510),_0x41b013,_0x2b67bb,![]);_0x4a80f5[_0x4b4718(0x8d7)](_0x4b4718(0x209));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x29e),_0x4627cc=>{const _0x19b726=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x19b726(0xa93)](_0x4627cc,_0x4627cc);const _0x53104c=$gameTemp[_0x19b726(0x3c4)](),_0x3b032c=BattleManager[_0x19b726(0x93c)],_0x404439=BattleManager[_0x19b726(0x3f8)],_0x2a5f78=BattleManager[_0x19b726(0x610)]?BattleManager[_0x19b726(0x610)]['slice'](0x0):[],_0x22be4f=BattleManager[_0x19b726(0x127)];VisuMZ[_0x19b726(0x19c)][_0x19b726(0x466)](_0x3b032c);if(!_0x53104c||!_0x3b032c||!_0x404439)return;if(!_0x3b032c[_0x19b726(0x269)]())return;if(_0x4627cc[_0x19b726(0x5b4)])_0x22be4f[_0x19b726(0x6b0)](_0x19b726(0x510),_0x404439,_0x2a5f78,![]);if(_0x4627cc[_0x19b726(0x189)])_0x22be4f[_0x19b726(0x6b0)](_0x19b726(0x9d0));if(_0x4627cc[_0x19b726(0xa47)])_0x22be4f[_0x19b726(0x6b0)](_0x19b726(0x2ee));if(_0x4627cc[_0x19b726(0x89e)])_0x22be4f[_0x19b726(0x6b0)]('clear');if(_0x4627cc[_0x19b726(0xa7d)])_0x22be4f[_0x19b726(0x6b0)](_0x19b726(0x95c),_0x404439);if(_0x4627cc[_0x19b726(0x5fe)])_0x22be4f[_0x19b726(0x6b0)](_0x19b726(0x417));_0x53104c[_0x19b726(0x8d7)](_0x19b726(0x209));}),PluginManager[_0x4376f0(0x315)](pluginData['name'],'ActSeq_ChangeAngle',_0xc2ec43=>{const _0x2e38c5=_0x4376f0;if(!SceneManager[_0x2e38c5(0x446)]())return;if(!Imported[_0x2e38c5(0xae3)])return;VisuMZ[_0x2e38c5(0xa93)](_0xc2ec43,_0xc2ec43);const _0x329583=$gameTemp['getLastPluginCommandInterpreter'](),_0x57f528=_0xc2ec43[_0x2e38c5(0x2bf)];if(!_0x329583)return;$gameScreen[_0x2e38c5(0x3e1)](_0xc2ec43['Angle'],_0xc2ec43[_0x2e38c5(0x178)],_0xc2ec43[_0x2e38c5(0x6b1)]);if(_0x57f528)_0x329583[_0x2e38c5(0x8d7)](_0x2e38c5(0x153));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],'ActSeq_Angle_Reset',_0x1eb3f5=>{const _0x3c634b=_0x4376f0;if(!SceneManager[_0x3c634b(0x446)]())return;if(!Imported[_0x3c634b(0xae3)])return;VisuMZ[_0x3c634b(0xa93)](_0x1eb3f5,_0x1eb3f5);const _0x3ce82d=$gameTemp[_0x3c634b(0x3c4)](),_0x876bdf=_0x1eb3f5[_0x3c634b(0x2bf)];if(!_0x3ce82d)return;$gameScreen['setBattleAngle'](0x0,_0x1eb3f5[_0x3c634b(0x178)],_0x1eb3f5['EasingType']);if(_0x876bdf)_0x3ce82d[_0x3c634b(0x8d7)]('battleAngle');}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xb96),_0x464d9b=>{const _0x5db213=_0x4376f0;if(!SceneManager[_0x5db213(0x446)]())return;if(!Imported[_0x5db213(0xae3)])return;const _0x21d083=$gameTemp[_0x5db213(0x3c4)]();if(!_0x21d083)return;_0x21d083[_0x5db213(0x8d7)](_0x5db213(0x153));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x30c),_0x435171=>{const _0xc71101=_0x4376f0;if(!SceneManager[_0xc71101(0x446)]())return;VisuMZ['ConvertParams'](_0x435171,_0x435171);const _0x3760bb=$gameTemp['getLastPluginCommandInterpreter'](),_0x4b2c16=BattleManager[_0xc71101(0x93c)],_0x1e77c8=BattleManager[_0xc71101(0x3f8)],_0x5dc6c4=VisuMZ[_0xc71101(0xa0d)](_0x435171[_0xc71101(0x88c)]),_0x35fc80=_0x435171[_0xc71101(0x63d)],_0x46cd19=BattleManager['_logWindow'];if(!_0x3760bb||!_0x4b2c16||!_0x1e77c8)return;if(!_0x4b2c16[_0xc71101(0x269)]())return;let _0x5631a2=_0x4b2c16[_0xc71101(0x269)]()['animationId'];if(_0x5631a2<0x0)_0x5631a2=_0x1e77c8[_0xc71101(0x403)]();$gameTemp[_0xc71101(0x9f8)](_0x5dc6c4,_0x5631a2,_0x35fc80),_0x435171[_0xc71101(0xac5)]&&_0x3760bb[_0xc71101(0x8d7)](_0xc71101(0x358));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Animation_AttackAnimation',_0x264299=>{const _0x5d04c9=_0x4376f0;if(!SceneManager[_0x5d04c9(0x446)]())return;VisuMZ[_0x5d04c9(0xa93)](_0x264299,_0x264299);const _0x40d1c7=$gameTemp['getLastPluginCommandInterpreter'](),_0x1b5e3a=BattleManager[_0x5d04c9(0x3f8)],_0x2fae41=VisuMZ[_0x5d04c9(0xa0d)](_0x264299['Targets']),_0x486788=_0x264299[_0x5d04c9(0x63d)],_0x1a34d3=BattleManager[_0x5d04c9(0x127)];if(!_0x40d1c7||!_0x1b5e3a)return;const _0x12ec59=_0x1b5e3a[_0x5d04c9(0x403)]();$gameTemp[_0x5d04c9(0x9f8)](_0x2fae41,_0x12ec59,_0x486788),_0x264299['WaitForAnimation']&&_0x40d1c7[_0x5d04c9(0x8d7)](_0x5d04c9(0x358));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x7c9),_0x1e0677=>{const _0x43334d=_0x4376f0;if(!SceneManager[_0x43334d(0x446)]())return;VisuMZ[_0x43334d(0xa93)](_0x1e0677,_0x1e0677);const _0x1c663c=_0x38199e[_0x43334d(0x31a)](_0x1e0677[_0x43334d(0xa13)]);if(_0x1c663c<=0x0)return;const _0x504beb=$gameTemp[_0x43334d(0x3c4)](),_0x38199e=BattleManager[_0x43334d(0x3f8)],_0x47b90b=VisuMZ['CreateActionSequenceTargets'](_0x1e0677[_0x43334d(0x88c)]),_0x3150e6=_0x1e0677['Mirror'],_0x42c43d=BattleManager[_0x43334d(0x127)];if(!_0x504beb||!_0x38199e)return;$gameTemp[_0x43334d(0x9f8)](_0x47b90b,_0x1c663c,_0x3150e6),_0x1e0677[_0x43334d(0xac5)]&&_0x504beb['setWaitMode'](_0x43334d(0x358));}),PluginManager['registerCommand'](pluginData['name'],_0x4376f0(0xb23),_0x252001=>{const _0x3f25c8=_0x4376f0;if(!SceneManager[_0x3f25c8(0x446)]())return;VisuMZ[_0x3f25c8(0xa93)](_0x252001,_0x252001);const _0x3cbd02=$gameTemp[_0x3f25c8(0x3c4)](),_0x4138d1=VisuMZ[_0x3f25c8(0xa0d)](_0x252001[_0x3f25c8(0x88c)]),_0x1150a2=_0x252001[_0x3f25c8(0x233)];let _0x509d34=0x0;switch(_0x1150a2[_0x3f25c8(0x896)]()[_0x3f25c8(0x5cf)]()){case'!':case'EXCLAMATION':_0x509d34=0x1;break;case'?':case _0x3f25c8(0x962):_0x509d34=0x2;break;case _0x3f25c8(0xad1):case _0x3f25c8(0x52f):case _0x3f25c8(0x180):case _0x3f25c8(0xc0a):case _0x3f25c8(0xbd6):_0x509d34=0x3;break;case _0x3f25c8(0x828):case'LOVE':_0x509d34=0x4;break;case _0x3f25c8(0x3b2):case _0x3f25c8(0x658):_0x509d34=0x5;break;case'SWEAT':_0x509d34=0x6;break;case'COBWEB':case _0x3f25c8(0x9f7):case _0x3f25c8(0xb76):_0x509d34=0x7;break;case _0x3f25c8(0x17f):case _0x3f25c8(0xa0c):_0x509d34=0x8;break;case'LIGHT':case _0x3f25c8(0x3b9):case'LIGHT\x20BULB':case _0x3f25c8(0x2cc):case _0x3f25c8(0xbcf):_0x509d34=0x9;break;case'Z':case'ZZ':case'ZZZ':case _0x3f25c8(0x6a1):_0x509d34=0xa;break;case _0x3f25c8(0x8fc):_0x509d34=0xb;break;case _0x3f25c8(0x8d1):_0x509d34=0xc;break;case'USER-DEFINED\x203':_0x509d34=0xd;break;case _0x3f25c8(0x14e):_0x509d34=0xe;break;case'USER-DEFINED\x205':_0x509d34=0xf;break;}for(const _0x3b8342 of _0x4138d1){if(!_0x3b8342)continue;$gameTemp[_0x3f25c8(0x1fc)](_0x3b8342,_0x509d34);}_0x252001['WaitComplete']&&_0x3cbd02&&(_0x3cbd02[_0x3f25c8(0xc3e)](0x1),_0x3cbd02['setWaitMode']('battleBalloon'));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x7be),_0x226426=>{const _0xffd3d6=_0x4376f0;if(!SceneManager[_0xffd3d6(0x446)]())return;if(!Imported[_0xffd3d6(0xbc1)])return;VisuMZ['ConvertParams'](_0x226426,_0x226426);const _0xe0a768=$gameTemp[_0xffd3d6(0x3c4)](),_0x1df4fa=VisuMZ[_0xffd3d6(0xa0d)](_0x226426[_0xffd3d6(0x88c)]),_0x2ac30b=_0x226426[_0xffd3d6(0x3b1)];for(const _0x5e00a4 of _0x1df4fa){if(!_0x5e00a4)continue;$gameTemp['requestBattleBalloon'](_0x5e00a4,[_0x2ac30b]);}_0x226426['WaitComplete']&&_0xe0a768&&(_0xe0a768[_0xffd3d6(0xc3e)](0x1),_0xe0a768[_0xffd3d6(0x8d7)]('battleBalloon'));}),PluginManager['registerCommand'](pluginData['name'],_0x4376f0(0x825),_0x11ba09=>{const _0x389c53=_0x4376f0;if(!SceneManager[_0x389c53(0x446)]())return;if(!Imported[_0x389c53(0xbc1)])return;VisuMZ[_0x389c53(0xa93)](_0x11ba09,_0x11ba09);const _0xd29c2e=$gameTemp[_0x389c53(0x3c4)](),_0x1131df=VisuMZ[_0x389c53(0xa0d)](_0x11ba09['Targets']),_0x440ba7=Math['min'](Number(_0x11ba09['startIcon']||0x0),Number(_0x11ba09[_0x389c53(0x34f)]||0x0)),_0x4f4ae5=Math[_0x389c53(0xa63)](Number(_0x11ba09[_0x389c53(0x82a)]||0x0),Number(_0x11ba09['endIcon']||0x0)),_0x3c2026=[];for(let _0x43a54c=_0x440ba7;_0x43a54c<=_0x4f4ae5;_0x43a54c++){_0x3c2026[_0x389c53(0x6b0)](_0x43a54c);}for(const _0x583483 of _0x1131df){if(!_0x583483)continue;$gameTemp['requestBattleBalloon'](_0x583483,_0x3c2026);}_0x11ba09[_0x389c53(0x61d)]&&_0xd29c2e&&(_0xd29c2e[_0x389c53(0xc3e)](0x1),_0xd29c2e['setWaitMode'](_0x389c53(0x3f2)));}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x602),_0x58bfce=>{const _0x33b496=_0x4376f0;if(!SceneManager[_0x33b496(0x446)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x33b496(0xa93)](_0x58bfce,_0x58bfce);const _0x3da40b=$gameTemp[_0x33b496(0x3c4)](),_0x525675=VisuMZ['CreateActionSequenceTargets'](_0x58bfce['Targets']),_0x455b4d=_0x58bfce[_0x33b496(0x3a5)];for(const _0x156a4b of _0x525675){if(!_0x156a4b)continue;$gameTemp[_0x33b496(0x1fc)](_0x156a4b,_0x455b4d);}_0x58bfce[_0x33b496(0x61d)]&&_0x3da40b&&(_0x3da40b[_0x33b496(0xc3e)](0x1),_0x3da40b[_0x33b496(0x8d7)](_0x33b496(0x3f2)));}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x4a6),_0x12338c=>{const _0x5b937b=_0x4376f0;if(!SceneManager[_0x5b937b(0x446)]())return;VisuMZ['ConvertParams'](_0x12338c,_0x12338c);const _0x10445f=$gameTemp['getLastPluginCommandInterpreter'](),_0x1e108b=BattleManager[_0x5b937b(0x93c)],_0x18782d=_0x12338c[_0x5b937b(0x63d)],_0x3ba0fe=VisuMZ[_0x5b937b(0xa0d)](_0x12338c[_0x5b937b(0x88c)]);if(!_0x10445f||!_0x1e108b)return;if(!_0x1e108b[_0x5b937b(0x269)]())return;for(const _0x4500eb of _0x3ba0fe){if(!_0x4500eb)continue;_0x4500eb[_0x5b937b(0xb2d)](_0x1e108b,_0x18782d);}if(_0x12338c['WaitForAnimation'])_0x10445f['setWaitMode'](_0x5b937b(0x358));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x913),_0x770f6b=>{const _0x56ac3d=_0x4376f0;VisuMZ['ConvertParams'](_0x770f6b,_0x770f6b);const _0x47df16=$gameTemp['getLastPluginCommandInterpreter'](),_0x2b8d5f=VisuMZ[_0x56ac3d(0xa0d)](_0x770f6b[_0x56ac3d(0x88c)]),_0x3b7a01=_0x770f6b['Filename'];if(!_0x3b7a01)return;for(const _0x3663b4 of _0x2b8d5f){if(!_0x3663b4)continue;if(!_0x3663b4['isActor']())continue;_0x3663b4[_0x56ac3d(0x9cc)](_0x3b7a01);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Animation_ChangeBattlePortrait_JS',_0x1ffb43=>{const _0xd811bf=_0x4376f0;VisuMZ[_0xd811bf(0xa93)](_0x1ffb43,_0x1ffb43);const _0x181f54=_0x1ffb43[_0xd811bf(0xa7f)](),_0x415758=$gameActors[_0xd811bf(0x965)](_0x181f54)||null;if(!_0x415758){console['log'](_0xd811bf(0x7b9));return;}const _0x356f5d=_0x1ffb43['FilenameJS']();_0x415758[_0xd811bf(0x9cc)](_0x356f5d);}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0xa3f),_0x3aed77=>{const _0x485778=_0x4376f0;if(!SceneManager[_0x485778(0x446)]())return;VisuMZ[_0x485778(0xa93)](_0x3aed77,_0x3aed77);const _0x195369=$gameTemp[_0x485778(0x3c4)](),_0x12dac9=BattleManager[_0x485778(0x3f8)],_0x4d60cf=VisuMZ[_0x485778(0xa0d)](_0x3aed77[_0x485778(0x88c)]),_0x35015d=_0x3aed77[_0x485778(0x63d)];if(!_0x195369||!_0x12dac9)return;const _0x3e527f=$dataSkilles[_0x12dac9[_0x485778(0x3c8)]()],_0x384ac0=_0x3e527f[_0x485778(0x8d4)];$gameTemp[_0x485778(0x9f8)](_0x4d60cf,_0x384ac0,_0x35015d),_0x3aed77[_0x485778(0xac5)]&&_0x195369[_0x485778(0x8d7)](_0x485778(0x358));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x26a),_0x5f0604=>{const _0x932135=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x932135(0xa93)](_0x5f0604,_0x5f0604);const _0x50ecb8=$gameTemp[_0x932135(0x3c4)](),_0x114e5f=VisuMZ[_0x932135(0xa0d)](_0x5f0604[_0x932135(0x88c)]),_0x3f560=Number(_0x5f0604[_0x932135(0xb86)]||0x1),_0xec55e8=$dataItems[_0x3f560],_0x53d929=_0x5f0604[_0x932135(0x63d)];if(!_0x50ecb8)return;if(!_0xec55e8)return;let _0x7aa7cd=_0xec55e8[_0x932135(0x8d4)];$gameTemp[_0x932135(0x9f8)](_0x114e5f,_0x7aa7cd,_0x53d929),_0x5f0604[_0x932135(0xac5)]&&_0x50ecb8[_0x932135(0x8d7)](_0x932135(0x358));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],'ActSeq_Animation_PlayAtCoordinate',_0x1c5314=>{const _0x1dfada=_0x4376f0;if(!SceneManager[_0x1dfada(0x982)])return;if(!SceneManager['_scene'][_0x1dfada(0x86d)])return;if(!Imported[_0x1dfada(0x7ba)])return;VisuMZ[_0x1dfada(0xa93)](_0x1c5314,_0x1c5314);const _0x98bcbe=$gameTemp['getLastPluginCommandInterpreter'](),_0x54029d=Math[_0x1dfada(0x1c6)](_0x1c5314[_0x1dfada(0x267)]),_0x244779=Math['round'](_0x1c5314[_0x1dfada(0xaf2)]);$gameTemp[_0x1dfada(0x9a9)](_0x54029d,_0x244779,_0x1c5314[_0x1dfada(0x9c6)],_0x1c5314[_0x1dfada(0x63d)],_0x1c5314[_0x1dfada(0x3c1)]),_0x1c5314[_0x1dfada(0x61d)]&&_0x98bcbe&&(SceneManager['_scene'][_0x1dfada(0x86d)][_0x1dfada(0x862)](),_0x98bcbe['setWaitMode']('battleAnimation'));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xa8d),_0x57ee70=>{const _0x35b74a=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x35b74a(0xa93)](_0x57ee70,_0x57ee70);const _0xdc04c8=$gameTemp[_0x35b74a(0x3c4)](),_0x2f6aa0=VisuMZ['CreateActionSequenceTargets'](_0x57ee70[_0x35b74a(0x88c)]),_0x69bcc1=_0x57ee70[_0x35b74a(0x9c6)],_0x1b8ca3=_0x57ee70[_0x35b74a(0x63d)];if(!_0xdc04c8)return;$gameTemp['requestAnimation'](_0x2f6aa0,_0x69bcc1,_0x1b8ca3);if(_0x57ee70[_0x35b74a(0xac5)])_0xdc04c8[_0x35b74a(0x8d7)]('battleAnimation');}),PluginManager[_0x4376f0(0x315)](pluginData['name'],'ActSeq_Animation_ShowAnimationJS',_0x3a637a=>{const _0x2fd575=_0x4376f0;if(!SceneManager[_0x2fd575(0x446)]())return;VisuMZ[_0x2fd575(0xa93)](_0x3a637a,_0x3a637a);const _0x1c5949=$gameTemp[_0x2fd575(0x3c4)](),_0x5eb43a=VisuMZ[_0x2fd575(0xa0d)](_0x3a637a[_0x2fd575(0x88c)]),_0x1f7bc1=Number(_0x3a637a[_0x2fd575(0x9c6)])||0x1,_0x4cee10=_0x3a637a[_0x2fd575(0x63d)];if(!_0x1c5949)return;$gameTemp['requestAnimation'](_0x5eb43a,_0x1f7bc1,_0x4cee10);if(_0x3a637a[_0x2fd575(0xac5)])_0x1c5949[_0x2fd575(0x8d7)]('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x4d1),_0x327ded=>{const _0x4edc9b=_0x4376f0;if(!SceneManager[_0x4edc9b(0x446)]())return;VisuMZ['ConvertParams'](_0x327ded,_0x327ded);const _0x5bdd15=$gameTemp['getLastPluginCommandInterpreter'](),_0x4fc3e3=VisuMZ['CreateActionSequenceTargets'](_0x327ded[_0x4edc9b(0x88c)]),_0x1621d4=Number(_0x327ded[_0x4edc9b(0xbaf)]||0x1),_0x4fb44a=$dataSkills[_0x1621d4],_0x50c558=_0x327ded[_0x4edc9b(0x63d)];if(!_0x5bdd15)return;if(!_0x4fb44a)return;let _0x18fb51=_0x4fb44a[_0x4edc9b(0x8d4)];$gameTemp[_0x4edc9b(0x9f8)](_0x4fc3e3,_0x18fb51,_0x50c558),_0x327ded[_0x4edc9b(0xac5)]&&_0x5bdd15['setWaitMode'](_0x4edc9b(0x358));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x9b7),_0x472a4d=>{const _0x570e26=_0x4376f0;if(!SceneManager[_0x570e26(0x446)]())return;const _0x29ba9e=$gameTemp[_0x570e26(0x3c4)]();if(!_0x29ba9e)return;_0x29ba9e['setWaitMode'](_0x570e26(0x358));}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x9fe),_0x3b03fb=>{const _0x15ad94=_0x4376f0;if(!SceneManager[_0x15ad94(0x446)]())return;VisuMZ['ConvertParams'](_0x3b03fb,_0x3b03fb);const _0x211d63=BattleManager[_0x15ad94(0x127)],_0x28366f=_0x3b03fb[_0x15ad94(0x74a)]&&Imported[_0x15ad94(0x714)];_0x211d63[_0x15ad94(0x6e3)](_0x3b03fb['Text']),_0x28366f&&Imported['VisuMZ_4_CombatLog']&&$gameSystem[_0x15ad94(0x57c)](_0x3b03fb['Text']||'',_0x3b03fb['CombatLogIcon']||0x0);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_BattleLog_Clear',_0x1fee5e=>{const _0x2c75a7=_0x4376f0;if(!SceneManager[_0x2c75a7(0x446)]())return;const _0x54cb37=BattleManager[_0x2c75a7(0x127)];_0x54cb37[_0x2c75a7(0x976)]();}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xa71),_0x3b9033=>{const _0xaaebc0=_0x4376f0;if(!SceneManager['isSceneBattle']())return;const _0x4b03d2=$gameTemp[_0xaaebc0(0x3c4)](),_0x2ec60f=BattleManager[_0xaaebc0(0x93c)],_0x432f83=BattleManager[_0xaaebc0(0x3f8)],_0x3e7cec=BattleManager['_logWindow'];if(!_0x4b03d2||!_0x2ec60f||!_0x432f83)return;if(!_0x2ec60f[_0xaaebc0(0x269)]())return;_0x3e7cec[_0xaaebc0(0x377)](_0x432f83,_0x2ec60f['item']()),_0x4b03d2[_0xaaebc0(0x8d7)](_0xaaebc0(0x209));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x6d1),_0x5b3441=>{const _0x4d968f=_0x4376f0;if(!SceneManager['isSceneBattle']())return;const _0x2a79bd=BattleManager['_logWindow'];_0x2a79bd[_0x4d968f(0x998)]();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_BattleLog_PushBaseLine',_0x5e7373=>{const _0x21b839=_0x4376f0;if(!SceneManager[_0x21b839(0x446)]())return;const _0x1532ac=BattleManager[_0x21b839(0x127)];_0x1532ac[_0x21b839(0x91e)]();}),PluginManager['registerCommand'](pluginData['name'],_0x4376f0(0x297),_0x371dd7=>{const _0x22e5fd=_0x4376f0;if(!SceneManager[_0x22e5fd(0x446)]())return;const _0x1ace20=BattleManager[_0x22e5fd(0x127)];_0x1ace20[_0x22e5fd(0x31b)]();}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x266),_0x44464a=>{const _0x515cfd=_0x4376f0;if(!SceneManager[_0x515cfd(0x446)]())return;VisuMZ[_0x515cfd(0xa93)](_0x44464a,_0x44464a),SceneManager['_scene'][_0x515cfd(0x5cd)](_0x44464a[_0x515cfd(0x5e9)]);}),PluginManager['registerCommand'](pluginData['name'],_0x4376f0(0x9d1),_0xf48568=>{const _0x1d3a9c=_0x4376f0;if(!SceneManager['isSceneBattle']())return;const _0x301795=$gameTemp[_0x1d3a9c(0x3c4)]();_0x301795[_0x1d3a9c(0x8d7)](_0x1d3a9c(0x209));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x97c),_0x1c8d55=>{const _0x4a0636=_0x4376f0;if(!SceneManager['isSceneBattle']())return;const _0x38c32f=$gameTemp[_0x4a0636(0x3c4)](),_0x4d245c=BattleManager[_0x4a0636(0x127)];_0x4d245c[_0x4a0636(0x9d0)](),_0x38c32f[_0x4a0636(0x8d7)]('battlelog');}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Camera_Clamp',_0x2cf922=>{const _0x3df287=_0x4376f0;if(!SceneManager[_0x3df287(0x446)]())return;if(!Imported[_0x3df287(0xae3)])return;VisuMZ[_0x3df287(0xa93)](_0x2cf922,_0x2cf922);const _0x18c2d7=$gameScreen[_0x3df287(0x696)]();_0x18c2d7['cameraClamp']=_0x2cf922[_0x3df287(0x8fd)];}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x607),_0x11ca60=>{const _0x914443=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x914443(0xae3)])return;VisuMZ[_0x914443(0xa93)](_0x11ca60,_0x11ca60);const _0x2655e3=$gameTemp[_0x914443(0x3c4)](),_0x4a0320=_0x11ca60[_0x914443(0x473)];$gameScreen[_0x914443(0x638)](_0x11ca60[_0x914443(0x2ce)],_0x11ca60[_0x914443(0x5f5)],_0x11ca60[_0x914443(0x178)],_0x11ca60['EasingType']);if(_0x4a0320)_0x2655e3[_0x914443(0x8d7)](_0x914443(0x5a6));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x8d5),_0x3e76c3=>{const _0x1af749=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x3e76c3,_0x3e76c3);const _0x30ca90=$gameTemp['getLastPluginCommandInterpreter'](),_0x3fb254=VisuMZ[_0x1af749(0xa0d)](_0x3e76c3[_0x1af749(0x88c)]),_0x10e20f=_0x3e76c3[_0x1af749(0x473)];$gameScreen[_0x1af749(0x768)](_0x3fb254,_0x3e76c3[_0x1af749(0x178)],_0x3e76c3[_0x1af749(0x6b1)]);if(_0x10e20f)_0x30ca90[_0x1af749(0x8d7)]('battleCamera');}),PluginManager[_0x4376f0(0x315)](pluginData['name'],'ActSeq_Camera_Offset',_0x7940e0=>{const _0x25b782=_0x4376f0;if(!SceneManager[_0x25b782(0x446)]())return;if(!Imported[_0x25b782(0xae3)])return;VisuMZ[_0x25b782(0xa93)](_0x7940e0,_0x7940e0);const _0x644dd5=$gameTemp['getLastPluginCommandInterpreter'](),_0x1cf39d=_0x7940e0[_0x25b782(0x473)];$gameScreen['setBattleCameraOffset'](_0x7940e0['OffsetX'],_0x7940e0[_0x25b782(0x692)],_0x7940e0[_0x25b782(0x178)],_0x7940e0[_0x25b782(0x6b1)]);if(_0x1cf39d)_0x644dd5[_0x25b782(0x8d7)](_0x25b782(0x5a6));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Camera_Reset',_0x5eec31=>{const _0x90dc90=_0x4376f0;if(!SceneManager[_0x90dc90(0x446)]())return;if(!Imported[_0x90dc90(0xae3)])return;VisuMZ['ConvertParams'](_0x5eec31,_0x5eec31);const _0x796fd1=$gameTemp[_0x90dc90(0x3c4)](),_0x503bec=_0x5eec31['ResetFocus'],_0x3e8062=_0x5eec31[_0x90dc90(0x810)],_0x696071=_0x5eec31[_0x90dc90(0x473)];if(_0x503bec){const _0x4435b8=Math[_0x90dc90(0x1c6)](Graphics['width']/0x2),_0x17bb4f=Math[_0x90dc90(0x1c6)](Graphics[_0x90dc90(0x399)]/0x2);$gameScreen[_0x90dc90(0x638)](_0x4435b8,_0x17bb4f,_0x5eec31[_0x90dc90(0x178)],_0x5eec31[_0x90dc90(0x6b1)]);}_0x3e8062&&$gameScreen[_0x90dc90(0xbca)](0x0,0x0,_0x5eec31[_0x90dc90(0x178)],_0x5eec31['EasingType']);if(_0x696071)_0x796fd1[_0x90dc90(0x8d7)](_0x90dc90(0x5a6));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x88d),_0x7c4a03=>{const _0x754978=_0x4376f0;if(!SceneManager[_0x754978(0x446)]())return;if(!Imported[_0x754978(0xae3)])return;const _0x5b6fb1=$gameTemp[_0x754978(0x3c4)]();if(!_0x5b6fb1)return;_0x5b6fb1[_0x754978(0x8d7)](_0x754978(0x5a6));}),VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa9d)]=function(_0x58a241){const _0x3ea082=_0x4376f0;_0x58a241['portraitFilename']='';const _0x90dafb=VisuMZ[_0x3ea082(0x690)][_0x3ea082(0xa9d)](_0x58a241),_0x28857a=VisuMZ['CreateActionSequenceTargets'](_0x58a241[_0x3ea082(0x88c)])[0x0]||null;return _0x28857a&&(_0x90dafb[_0x3ea082(0xa56)]=_0x28857a['visualCutinPortraitFilename'](),_0x90dafb[_0x3ea082(0x122)]=_0x28857a[_0x3ea082(0x31c)](),_0x90dafb[_0x3ea082(0xaff)]=_0x28857a[_0x3ea082(0x60d)](),_0x90dafb['portraitType']=_0x28857a[_0x3ea082(0x704)](),_0x28857a[_0x3ea082(0x7b4)]()&&(_0x28857a[_0x3ea082(0x2dd)]()&&(_0x90dafb[_0x3ea082(0x92b)]=!_0x90dafb[_0x3ea082(0x92b)]),_0x28857a['flipVisualCutinVert']()&&(_0x90dafb['portraitFlipVert']=!_0x90dafb[_0x3ea082(0x303)]),_0x90dafb['portraitType']===_0x3ea082(0x260)&&(_0x90dafb[_0x3ea082(0x92b)]=!_0x90dafb[_0x3ea082(0x92b)]),_0x58a241[_0x3ea082(0x24b)][_0x3ea082(0xbb9)]&&(_0x90dafb[_0x3ea082(0x796)]*=-0x1),_0x58a241[_0x3ea082(0x24b)]['parallaxScrollYinvertEnemy']&&(_0x90dafb['parallaxScrollY']*=-0x1),_0x90dafb[_0x3ea082(0x92a)]+=_0x58a241[_0x3ea082(0x24b)][_0x3ea082(0x42b)]??0x0)),_0x90dafb;},PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x231),_0x31463b=>{const _0x5e765d=_0x4376f0;if(!SceneManager[_0x5e765d(0x446)]())return;if(!Imported[_0x5e765d(0xc13)])return;VisuMZ[_0x5e765d(0xa93)](_0x31463b,_0x31463b);const _0x446200=VisuMZ[_0x5e765d(0x19c)]['CreateCutinSettings'](_0x31463b);SceneManager[_0x5e765d(0x982)][_0x5e765d(0x497)](_0x446200);const _0x324e5c=$gameTemp['getLastPluginCommandInterpreter']();_0x324e5c&&_0x31463b['WaitForEntrance']&&_0x324e5c[_0x5e765d(0x8d7)]('cutinEnter');}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Cutin_EndVisualCutinEffectAll',_0x3f86c0=>{const _0x35a0c4=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x35a0c4(0xa93)](_0x3f86c0,_0x3f86c0),SceneManager[_0x35a0c4(0x982)][_0x35a0c4(0x73b)]();const _0x33daf4=$gameTemp[_0x35a0c4(0x3c4)]();_0x33daf4&&_0x3f86c0[_0x35a0c4(0xaa9)]&&_0x33daf4[_0x35a0c4(0x8d7)](_0x35a0c4(0xb1b));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xa22),_0x2e57d0=>{const _0x16ed22=_0x4376f0;if(!SceneManager[_0x16ed22(0x446)]())return;if(!Imported[_0x16ed22(0xc13)])return;VisuMZ['ConvertParams'](_0x2e57d0,_0x2e57d0);const _0x16e9c3=_0x2e57d0[_0x16ed22(0x2a6)][_0x16ed22(0x177)]()['trim']();SceneManager[_0x16ed22(0x982)][_0x16ed22(0x416)](_0x16e9c3);const _0x36c27a=$gameTemp[_0x16ed22(0x3c4)]();_0x36c27a&&_0x2e57d0[_0x16ed22(0xaa9)]&&_0x36c27a['setWaitMode'](_0x16ed22(0xb1b));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x37b),_0x1c7a9a=>{const _0xc3b16b=_0x4376f0;if(!SceneManager[_0xc3b16b(0x446)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x174a92=$gameTemp[_0xc3b16b(0x3c4)]();_0x174a92[_0xc3b16b(0x8d7)]('cutinEnter');}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x1f7),_0x264664=>{const _0xc12bfc=_0x4376f0;if(!SceneManager[_0xc12bfc(0x446)]())return;if(!Imported[_0xc12bfc(0xc13)])return;const _0x56a3b7=$gameTemp[_0xc12bfc(0x3c4)]();_0x56a3b7[_0xc12bfc(0x8d7)](_0xc12bfc(0xb1b));}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x62d),_0x123524=>{const _0x2e063d=_0x4376f0;if(!SceneManager[_0x2e063d(0x446)]())return;if(!Imported[_0x2e063d(0x9ba)])return;VisuMZ[_0x2e063d(0xa93)](_0x123524,_0x123524);const _0x24de93=VisuMZ[_0x2e063d(0xa0d)](_0x123524[_0x2e063d(0x88c)]),_0x44beef=_0x123524[_0x2e063d(0x4f1)][_0x2e063d(0x177)]()[_0x2e063d(0x5cf)]();for(const _0x56af3e of _0x24de93){if(!_0x56af3e)continue;_0x56af3e['requestDragonbonesAnimation'](_0x44beef);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_DB_DragonbonesTimeScale',_0x3de720=>{const _0x59ce27=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x59ce27(0x9ba)])return;VisuMZ[_0x59ce27(0xa93)](_0x3de720,_0x3de720);const _0x2ce6ae=VisuMZ['CreateActionSequenceTargets'](_0x3de720[_0x59ce27(0x88c)]),_0x265bce=_0x3de720[_0x59ce27(0x871)];for(const _0x472a02 of _0x2ce6ae){if(!_0x472a02)continue;_0x472a02[_0x59ce27(0x18a)]()[_0x59ce27(0x2ed)]=_0x265bce;}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x72c),_0x4a215d=>{const _0xeb7408=_0x4376f0;if(!SceneManager[_0xeb7408(0x446)]())return;if(!Imported[_0xeb7408(0x811)])return;VisuMZ[_0xeb7408(0xa93)](_0x4a215d,_0x4a215d);const _0x21fcbd=BattleManager[_0xeb7408(0x93c)],_0x10036e=_0x4a215d[_0xeb7408(0x3d9)];if(!_0x21fcbd)return;_0x21fcbd[_0xeb7408(0x7ca)]=_0x10036e;}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x88e),_0x4caaea=>{const _0x33b6b0=_0x4376f0;if(!SceneManager[_0x33b6b0(0x446)]())return;if(!Imported[_0x33b6b0(0x811)])return;const _0x25bcf2=BattleManager[_0x33b6b0(0x93c)];if(!_0x25bcf2)return;_0x25bcf2[_0x33b6b0(0x391)]();}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x435),_0x1f841d=>{const _0x2d536a=_0x4376f0;if(!SceneManager[_0x2d536a(0x446)]())return;if(!Imported[_0x2d536a(0x811)])return;VisuMZ[_0x2d536a(0xa93)](_0x1f841d,_0x1f841d);const _0xbbd015=BattleManager[_0x2d536a(0x93c)],_0x222a68=_0x1f841d[_0x2d536a(0x3d9)];if(!_0xbbd015)return;_0xbbd015[_0x2d536a(0x2dc)]=_0x222a68;}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x8de),_0x1a5f16=>{const _0x4fc997=_0x4376f0;if(!SceneManager[_0x4fc997(0x446)]())return;if(!Imported[_0x4fc997(0x811)])return;const _0x5afe03=BattleManager[_0x4fc997(0x93c)];if(!_0x5afe03)return;_0x5afe03[_0x4fc997(0xae0)]=!![];}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x840),_0x66209f=>{const _0x1d79a7=_0x4376f0;VisuMZ[_0x1d79a7(0x76b)][_0x1d79a7(0x840)](_0x66209f);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Grid_AddPassiveStatesToNode',_0x24b1d6=>{const _0x45d1aa=_0x4376f0;VisuMZ[_0x45d1aa(0x76b)][_0x45d1aa(0x648)](_0x24b1d6);}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],'ActSeq_Grid_AddTriggerToNode',_0x2884ea=>{const _0x5dfdb1=_0x4376f0;VisuMZ[_0x5dfdb1(0x76b)][_0x5dfdb1(0x24a)](_0x2884ea);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x455),_0x330971=>{const _0x32c72d=_0x4376f0;VisuMZ[_0x32c72d(0x76b)][_0x32c72d(0x24a)](_0x330971);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Grid_AnimationIDAtNode',_0x2b0313=>{const _0xce599b=_0x4376f0;VisuMZ[_0xce599b(0x76b)][_0xce599b(0x2b8)](_0x2b0313);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Grid_AnimationJsAtNode',_0x26d990=>{const _0x533b96=_0x4376f0;VisuMZ['BattleGridSystem'][_0x533b96(0x717)](_0x26d990);}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x16f),_0x431601=>{const _0x4baa6c=_0x4376f0;VisuMZ[_0x4baa6c(0x76b)][_0x4baa6c(0x16f)](_0x431601);}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x7d7),_0x2d6084=>{const _0x2e374f=_0x4376f0;VisuMZ['BattleGridSystem'][_0x2e374f(0x7d7)](_0x2d6084);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Grid_MoveTargetsInDirection',_0x319262=>{const _0x713c13=_0x4376f0;VisuMZ['BattleGridSystem'][_0x713c13(0x314)](_0x319262);}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x67c),_0x14358b=>{const _0x49d533=_0x4376f0;VisuMZ[_0x49d533(0x76b)][_0x49d533(0x67c)](_0x14358b);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x2fe),_0x257beb=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_PushFromTargetNode'](_0x257beb);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xb40),_0x14ccd5=>{const _0x1e4b04=_0x4376f0;VisuMZ['BattleGridSystem'][_0x1e4b04(0xb40)](_0x14ccd5);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x5d7),_0x8d3259=>{const _0x21c210=_0x4376f0;VisuMZ['BattleGridSystem'][_0x21c210(0x5d7)](_0x8d3259);}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x6c9),_0x446c97=>{const _0x521d8b=_0x4376f0;VisuMZ[_0x521d8b(0x76b)][_0x521d8b(0x6c9)](_0x446c97);}),PluginManager[_0x4376f0(0x315)](pluginData['name'],'ActSeq_Grid_TraverseToNode',_0x1f3093=>{const _0x1261db=_0x4376f0;VisuMZ['BattleGridSystem'][_0x1261db(0x724)](_0x1f3093);}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x886),_0x376957=>{const _0x52c264=_0x4376f0;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x52c264(0xa93)](_0x376957,_0x376957);const _0xc1ffb9=VisuMZ[_0x52c264(0xa0d)](_0x376957[_0x52c264(0x88c)]);for(const _0x29e1eb of _0xc1ffb9){if(!_0x29e1eb)continue;_0x29e1eb[_0x52c264(0x437)](_0x52c264(0xa1e)),_0x29e1eb[_0x52c264(0x437)](_0x52c264(0x239)),_0x29e1eb[_0x52c264(0x437)]('tv'),_0x29e1eb[_0x52c264(0x5c9)]();}$gamePlayer[_0x52c264(0x31b)]();}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x934),_0x3bd030=>{const _0x4e8632=_0x4376f0;if(!Imported[_0x4e8632(0xb3b)])return;if(!SceneManager[_0x4e8632(0x446)]())return;VisuMZ[_0x4e8632(0xa93)](_0x3bd030,_0x3bd030);const _0x3ea87d=VisuMZ[_0x4e8632(0xa0d)](_0x3bd030[_0x4e8632(0x88c)]),_0x1dd0b2='glitch';_0x3bd030[_0x4e8632(0x3ae)]=Math['ceil'](_0x3bd030[_0x4e8632(0xbe0)]/0x2),_0x3bd030[_0x4e8632(0x506)]=_0x3bd030[_0x4e8632(0xbe0)],_0x3bd030[_0x4e8632(0x323)]=!![];for(const _0xba7645 of _0x3ea87d){if(!_0xba7645)continue;_0xba7645[_0x4e8632(0x26f)](_0x1dd0b2,_0x3bd030);}$gamePlayer[_0x4e8632(0x31b)]();}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x203),_0x2e489b=>{const _0x3b3c7e=_0x4376f0;if(!Imported[_0x3b3c7e(0xb3b)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3b3c7e(0xa93)](_0x2e489b,_0x2e489b);const _0x107f42=VisuMZ[_0x3b3c7e(0xa0d)](_0x2e489b[_0x3b3c7e(0x88c)]);for(const _0x41b9c9 of _0x107f42){if(!_0x41b9c9)continue;_0x41b9c9[_0x3b3c7e(0x437)](_0x3b3c7e(0x239));}$gamePlayer[_0x3b3c7e(0x31b)]();}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x157),_0x5e7b23=>{const _0x113a7b=_0x4376f0;if(!Imported[_0x113a7b(0xb3b)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x113a7b(0xa93)](_0x5e7b23,_0x5e7b23);const _0x32e6b2=VisuMZ[_0x113a7b(0xa0d)](_0x5e7b23['Targets']),_0x29b415=_0x113a7b(0xa1e);for(const _0x3304a7 of _0x32e6b2){if(!_0x3304a7)continue;_0x3304a7[_0x113a7b(0x26f)](_0x29b415,_0x5e7b23);}$gamePlayer[_0x113a7b(0x31b)]();}),PluginManager['registerCommand'](pluginData['name'],_0x4376f0(0xb95),_0x363e32=>{const _0x5d5acb=_0x4376f0;if(!Imported[_0x5d5acb(0xb3b)])return;if(!SceneManager[_0x5d5acb(0x446)]())return;VisuMZ[_0x5d5acb(0xa93)](_0x363e32,_0x363e32);const _0x171722=VisuMZ[_0x5d5acb(0xa0d)](_0x363e32[_0x5d5acb(0x88c)]);for(const _0x24951e of _0x171722){if(!_0x24951e)continue;_0x24951e['removeHorrorEffect'](_0x5d5acb(0xa1e));}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData['name'],_0x4376f0(0x68a),_0x2928a8=>{const _0x21b8dd=_0x4376f0;if(!Imported[_0x21b8dd(0xb3b)])return;if(!SceneManager[_0x21b8dd(0x446)]())return;VisuMZ[_0x21b8dd(0xa93)](_0x2928a8,_0x2928a8);const _0x4a9c20=VisuMZ[_0x21b8dd(0xa0d)](_0x2928a8[_0x21b8dd(0x88c)]),_0x1a4ed1='tv';for(const _0x12b702 of _0x4a9c20){if(!_0x12b702)continue;_0x12b702[_0x21b8dd(0x26f)](_0x1a4ed1,_0x2928a8);}$gamePlayer['refresh']();}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Horror_TVRemove',_0x1e9374=>{const _0x15ef2b=_0x4376f0;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x15ef2b(0x446)]())return;VisuMZ[_0x15ef2b(0xa93)](_0x1e9374,_0x1e9374);const _0x4ef8d8=VisuMZ[_0x15ef2b(0xa0d)](_0x1e9374[_0x15ef2b(0x88c)]);for(const _0x56a054 of _0x4ef8d8){if(!_0x56a054)continue;_0x56a054[_0x15ef2b(0x437)]('tv');}$gamePlayer[_0x15ef2b(0x31b)]();}),PluginManager[_0x4376f0(0x315)](pluginData['name'],'ActSeq_Impact_BlueRedInvert',_0x3e8331=>{const _0x2d97e4=_0x4376f0;if(!Imported[_0x2d97e4(0xa73)])return;const _0x5f1b4f=SceneManager[_0x2d97e4(0x982)]['_spriteset'];if(!_0x5f1b4f)return;if(VisuMZ[_0x2d97e4(0x9e4)][_0x2d97e4(0x351)]<=1.04){alert(_0x2d97e4(0x4fc)),SceneManager[_0x2d97e4(0x9d4)]();return;}VisuMZ[_0x2d97e4(0xa93)](_0x3e8331,_0x3e8331);const _0x39a556=_0x3e8331['Enable'];_0x5f1b4f[_0x2d97e4(0x977)](_0x39a556);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xa7e),_0x3788ba=>{const _0x72efc5=_0x4376f0;if(!SceneManager[_0x72efc5(0x446)]())return;if(!Imported[_0x72efc5(0xa73)])return;const _0x497ac2=SceneManager['_scene'][_0x72efc5(0x86d)];if(!_0x497ac2)return;VisuMZ['ConvertParams'](_0x3788ba,_0x3788ba);const _0x7ab3bd=_0x3788ba[_0x72efc5(0x5dc)]||0x1,_0xfbff7d=_0x3788ba[_0x72efc5(0x178)]||0x1,_0x11235b=_0x3788ba[_0x72efc5(0x6b1)]||'Linear';_0x497ac2['setupRgbSplitImpactFilter'](_0x7ab3bd,_0xfbff7d,_0x11235b);}),PluginManager['registerCommand'](pluginData['name'],_0x4376f0(0xb4b),_0x3fd96e=>{const _0x56cf19=_0x4376f0;if(!Imported[_0x56cf19(0xa73)])return;const _0xd499c3=SceneManager[_0x56cf19(0x982)][_0x56cf19(0x86d)];if(!_0xd499c3)return;if(VisuMZ['ActSeqImpact'][_0x56cf19(0x351)]<=1.04){alert(_0x56cf19(0x4fc)),SceneManager[_0x56cf19(0x9d4)]();return;}VisuMZ['ConvertParams'](_0x3fd96e,_0x3fd96e);const _0x5a3ad6=_0x3fd96e[_0x56cf19(0x480)];_0xd499c3[_0x56cf19(0x29b)](_0x5a3ad6);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Impact_MotionBlurScreen',_0xd9947=>{const _0x48c08d=_0x4376f0;if(!SceneManager[_0x48c08d(0x446)]())return;if(!Imported[_0x48c08d(0xa73)])return;const _0x3a842c=SceneManager[_0x48c08d(0x982)]['_spriteset'];if(!_0x3a842c)return;VisuMZ[_0x48c08d(0xa93)](_0xd9947,_0xd9947);const _0x51c7bc=Number(_0xd9947[_0x48c08d(0x120)])||0x0,_0x3c5edc=Number(_0xd9947[_0x48c08d(0x465)]),_0x458a16=_0xd9947[_0x48c08d(0x178)]||0x1,_0xbc5e0d=_0xd9947[_0x48c08d(0x6b1)]||_0x48c08d(0x544);_0x3a842c[_0x48c08d(0xac9)](_0x51c7bc,_0x3c5edc,_0x458a16,_0xbc5e0d);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x4e2),_0x292f54=>{const _0x2b07e0=_0x4376f0;if(!SceneManager[_0x2b07e0(0x446)]())return;if(!Imported[_0x2b07e0(0xa73)])return;const _0x28d8b4=SceneManager[_0x2b07e0(0x982)][_0x2b07e0(0x86d)];if(!_0x28d8b4)return;VisuMZ['ConvertParams'](_0x292f54,_0x292f54);const _0xdc4934=Number(_0x292f54['Angle'])||0x0,_0x2af4b8=Number(_0x292f54[_0x2b07e0(0x465)]),_0x3016a3=_0x292f54['Duration']||0x1,_0x14d509=_0x292f54['EasingType']||'Linear',_0x191990=VisuMZ[_0x2b07e0(0xa0d)](_0x292f54['Targets']);for(const _0x2bf039 of _0x191990){if(!_0x2bf039)continue;if(!_0x2bf039[_0x2b07e0(0x3f1)]())continue;_0x2bf039[_0x2b07e0(0x3f1)]()[_0x2b07e0(0xac9)](_0xdc4934,_0x2af4b8,_0x3016a3,_0x14d509);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Impact_MotionTrailCreate',_0xa1b8c5=>{const _0x1e52b2=_0x4376f0;if(!SceneManager[_0x1e52b2(0x446)]())return;if(!Imported[_0x1e52b2(0xa73)])return;VisuMZ['ConvertParams'](_0xa1b8c5,_0xa1b8c5);const _0x17c713={'delay':_0xa1b8c5[_0x1e52b2(0x362)],'duration':_0xa1b8c5[_0x1e52b2(0x2d1)],'hue':_0xa1b8c5[_0x1e52b2(0x141)],'opacityStart':_0xa1b8c5[_0x1e52b2(0xb17)],'tone':_0xa1b8c5[_0x1e52b2(0x531)],'visible':!![]},_0x162b9c=VisuMZ['CreateActionSequenceTargets'](_0xa1b8c5[_0x1e52b2(0x88c)]);for(const _0x87320b of _0x162b9c){if(!_0x87320b)continue;_0x87320b[_0x1e52b2(0x920)](_0x17c713);}}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x332),_0x51b3d3=>{const _0x2fc28a=_0x4376f0;if(!SceneManager[_0x2fc28a(0x446)]())return;if(!Imported[_0x2fc28a(0xa73)])return;VisuMZ['ConvertParams'](_0x51b3d3,_0x51b3d3);const _0x3013c1=VisuMZ[_0x2fc28a(0xa0d)](_0x51b3d3[_0x2fc28a(0x88c)]);for(const _0x516811 of _0x3013c1){if(!_0x516811)continue;_0x516811['clearBattlerMotionTrailData']();}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x6e7),_0x5d7117=>{const _0x5d64f5=_0x4376f0;if(!Imported[_0x5d64f5(0xa73)])return;const _0x41b5c6=SceneManager[_0x5d64f5(0x982)]['_spriteset'];if(!_0x41b5c6)return;if(VisuMZ[_0x5d64f5(0x9e4)][_0x5d64f5(0x351)]<=1.04){alert(_0x5d64f5(0x4fc)),SceneManager[_0x5d64f5(0x9d4)]();return;}VisuMZ[_0x5d64f5(0xa93)](_0x5d7117,_0x5d7117);const _0x55311f=_0x5d7117['Enable'];_0x41b5c6[_0x5d64f5(0x1bc)](_0x55311f);}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x93d),_0x44382b=>{const _0x180940=_0x4376f0;if(!Imported[_0x180940(0xa73)])return;const _0x38507c=SceneManager['_scene'][_0x180940(0x86d)];if(!_0x38507c)return;if(VisuMZ['ActSeqImpact'][_0x180940(0x351)]<=1.04){alert(_0x180940(0x4fc)),SceneManager[_0x180940(0x9d4)]();return;}VisuMZ[_0x180940(0xa93)](_0x44382b,_0x44382b);const _0x347f4f=_0x44382b['Enable'];_0x38507c['setupOversaturateImpactFilter'](_0x347f4f);}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xac3),_0xf1036=>{const _0x51a06e=_0x4376f0;if(!Imported[_0x51a06e(0xa73)])return;const _0x366d74=SceneManager['_scene'][_0x51a06e(0x86d)];if(!_0x366d74)return;VisuMZ['ConvertParams'](_0xf1036,_0xf1036);const _0x206473=_0xf1036['X']||0x0,_0x8dd773=_0xf1036['Y']||0x0,_0x97866d=_0xf1036['Amp']||0x0,_0x222445=_0xf1036[_0x51a06e(0x54c)]||0x0,_0xd022c9=_0xf1036[_0x51a06e(0x178)]||0x1;_0x366d74[_0x51a06e(0x587)](_0x206473,_0x8dd773,_0x97866d,_0x222445,_0xd022c9);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Impact_ShockwaveEachTargets',_0x2006f5=>{const _0x18779d=_0x4376f0;if(!SceneManager[_0x18779d(0x446)]())return;if(!Imported[_0x18779d(0xa73)])return;const _0x6b602b=SceneManager[_0x18779d(0x982)][_0x18779d(0x86d)];if(!_0x6b602b)return;VisuMZ[_0x18779d(0xa93)](_0x2006f5,_0x2006f5);const _0x1acb1f=VisuMZ[_0x18779d(0xa0d)](_0x2006f5['Targets']),_0x1d60dd=_0x2006f5['TargetLocation'],_0x21f941=_0x2006f5[_0x18779d(0x1d2)]||0x0,_0x2d65c6=_0x2006f5[_0x18779d(0x692)]||0x0,_0x1180e6=_0x2006f5[_0x18779d(0x7d5)]||0x0,_0x331c9a=_0x2006f5[_0x18779d(0x54c)]||0x0,_0x3d3a82=_0x2006f5['Duration']||0x1;for(const _0x16925f of _0x1acb1f){if(!_0x16925f)continue;if(!_0x16925f[_0x18779d(0x3f1)]())continue;const _0xe6103d=_0x16925f[_0x18779d(0x3f1)]();let _0x178e0b=_0xe6103d['_baseX'],_0x1f765a=_0xe6103d['_baseY'];_0x178e0b+=(Graphics[_0x18779d(0x895)]-Graphics[_0x18779d(0x375)])/0x2,_0x1f765a+=(Graphics[_0x18779d(0x399)]-Graphics[_0x18779d(0x21b)])/0x2;if(_0x1d60dd[_0x18779d(0x844)](/front/i))_0x178e0b+=(_0x16925f[_0x18779d(0x7b4)]()?0x1:-0x1)*_0xe6103d[_0x18779d(0x126)]()/0x2;else _0x1d60dd[_0x18779d(0x844)](/back/i)&&(_0x178e0b+=(_0x16925f[_0x18779d(0x7b4)]()?-0x1:0x1)*_0xe6103d[_0x18779d(0x126)]()/0x2);if(_0x1d60dd[_0x18779d(0x844)](/head/i))_0x1f765a-=_0xe6103d[_0x18779d(0x832)]();else _0x1d60dd[_0x18779d(0x844)](/center/i)&&(_0x1f765a-=_0xe6103d[_0x18779d(0x832)]()/0x2);_0x178e0b+=_0x21f941,_0x1f765a+=_0x2d65c6,_0x6b602b[_0x18779d(0x587)](_0x178e0b,_0x1f765a,_0x1180e6,_0x331c9a,_0x3d3a82);}}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xb09),_0x2f50c6=>{const _0x3ec0a5=_0x4376f0;if(!SceneManager[_0x3ec0a5(0x446)]())return;if(!Imported[_0x3ec0a5(0xa73)])return;const _0x27ee0f=SceneManager[_0x3ec0a5(0x982)][_0x3ec0a5(0x86d)];if(!_0x27ee0f)return;VisuMZ[_0x3ec0a5(0xa93)](_0x2f50c6,_0x2f50c6);const _0x3cbebb=VisuMZ['CreateActionSequenceTargets'](_0x2f50c6['Targets']),_0x468dc8=_0x2f50c6[_0x3ec0a5(0x4ad)],_0x28f3dc=_0x2f50c6[_0x3ec0a5(0x1d2)]||0x0,_0x2bd85a=_0x2f50c6['OffsetY']||0x0,_0x2bb8c2=_0x2f50c6[_0x3ec0a5(0x7d5)]||0x0,_0x2ee7c2=_0x2f50c6['Wave']||0x0,_0x10099c=_0x2f50c6[_0x3ec0a5(0x178)]||0x1,_0x183f3b=Math[_0x3ec0a5(0x136)](..._0x3cbebb['map'](_0x5150ec=>_0x5150ec[_0x3ec0a5(0x3f1)]()['_baseX']-_0x5150ec['battler']()['mainSpriteWidth']()/0x2)),_0x5bf8e3=Math[_0x3ec0a5(0xa63)](..._0x3cbebb[_0x3ec0a5(0x424)](_0x1b6016=>_0x1b6016[_0x3ec0a5(0x3f1)]()['_baseX']+_0x1b6016[_0x3ec0a5(0x3f1)]()[_0x3ec0a5(0x126)]()/0x2)),_0x257fef=Math['min'](..._0x3cbebb[_0x3ec0a5(0x424)](_0x4e5263=>_0x4e5263[_0x3ec0a5(0x3f1)]()['_baseY']-_0x4e5263[_0x3ec0a5(0x3f1)]()['mainSpriteHeight']())),_0x51e31e=Math[_0x3ec0a5(0xa63)](..._0x3cbebb['map'](_0x11d20c=>_0x11d20c[_0x3ec0a5(0x3f1)]()[_0x3ec0a5(0x90f)])),_0x2bea36=_0x3cbebb[_0x3ec0a5(0x4bd)](_0x245f5a=>_0x245f5a[_0x3ec0a5(0xb9d)]())[_0x3ec0a5(0xa3a)],_0xd4e8ce=_0x3cbebb['filter'](_0x2a22b2=>_0x2a22b2['isEnemy']())['length'];let _0x5843a9=0x0,_0x217eb2=0x0;if(_0x468dc8[_0x3ec0a5(0x844)](/front/i))_0x5843a9=_0x2bea36>=_0xd4e8ce?_0x183f3b:_0x5bf8e3;else{if(_0x468dc8[_0x3ec0a5(0x844)](/middle/i))_0x5843a9=(_0x183f3b+_0x5bf8e3)/0x2,melee=-0x1;else _0x468dc8[_0x3ec0a5(0x844)](/back/i)&&(_0x5843a9=_0x2bea36>=_0xd4e8ce?_0x5bf8e3:_0x183f3b);}if(_0x468dc8[_0x3ec0a5(0x844)](/head/i))_0x217eb2=_0x257fef;else{if(_0x468dc8['match'](/center/i))_0x217eb2=(_0x257fef+_0x51e31e)/0x2;else _0x468dc8[_0x3ec0a5(0x844)](/base/i)&&(_0x217eb2=_0x51e31e);}_0x5843a9+=(Graphics['width']-Graphics[_0x3ec0a5(0x375)])/0x2,_0x217eb2+=(Graphics[_0x3ec0a5(0x399)]-Graphics[_0x3ec0a5(0x21b)])/0x2,_0x5843a9+=_0x28f3dc,_0x217eb2+=_0x2bd85a,_0x27ee0f[_0x3ec0a5(0x587)](_0x5843a9,_0x217eb2,_0x2bb8c2,_0x2ee7c2,_0x10099c);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x98e),_0x2395d9=>{const _0x4e00b6=_0x4376f0;if(!Imported[_0x4e00b6(0xa73)])return;const _0x3e0454=SceneManager[_0x4e00b6(0x982)][_0x4e00b6(0x86d)];if(!_0x3e0454)return;if(VisuMZ['ActSeqImpact'][_0x4e00b6(0x351)]<=1.04){alert(_0x4e00b6(0x4fc)),SceneManager[_0x4e00b6(0x9d4)]();return;}VisuMZ[_0x4e00b6(0xa93)](_0x2395d9,_0x2395d9);const _0x42713e=$gameTemp[_0x4e00b6(0x3c4)](),_0x3312cd=Math[_0x4e00b6(0xa63)](0.01,_0x2395d9[_0x4e00b6(0x7d9)]);$gameTemp[_0x4e00b6(0x986)](_0x3312cd,_0x42713e);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xa60),_0x44247c=>{const _0x542ee3=_0x4376f0;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x549c29=SceneManager[_0x542ee3(0x982)]['_spriteset'];if(!_0x549c29)return;if(VisuMZ[_0x542ee3(0x9e4)][_0x542ee3(0x351)]<=1.04){alert(_0x542ee3(0x4fc)),SceneManager[_0x542ee3(0x9d4)]();return;}VisuMZ['ConvertParams'](_0x44247c,_0x44247c);const _0x5e4f81=$gameTemp[_0x542ee3(0x3c4)](),_0x1bca23=_0x44247c['ms']||0x1;VisuMZ[_0x542ee3(0x9e4)][_0x542ee3(0x3de)](_0x1bca23,_0x5e4f81);}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x8f9),_0x522dec=>{const _0x235e87=_0x4376f0;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x37a161=SceneManager[_0x235e87(0x982)][_0x235e87(0x86d)];if(!_0x37a161)return;VisuMZ[_0x235e87(0xa93)](_0x522dec,_0x522dec);const _0x1dd7b0=_0x522dec['X']||0x0,_0x59ffa0=_0x522dec['Y']||0x0,_0x36ca9f=_0x522dec[_0x235e87(0x206)]||0x0,_0x26c09d=_0x522dec[_0x235e87(0x7b2)]||0x0,_0x33ba52=_0x522dec['Duration']||0x1,_0x553037=_0x522dec[_0x235e87(0x6b1)]||_0x235e87(0x544);_0x37a161[_0x235e87(0xc12)](_0x36ca9f,_0x1dd7b0,_0x59ffa0,_0x26c09d,_0x33ba52,_0x553037);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x519),_0x36d245=>{const _0x5b28f7=_0x4376f0;if(!Imported[_0x5b28f7(0xa73)])return;const _0x593da5=SceneManager['_scene'][_0x5b28f7(0x86d)];if(!_0x593da5)return;VisuMZ['ConvertParams'](_0x36d245,_0x36d245);const _0x29d408=VisuMZ['CreateActionSequenceTargets'](_0x36d245[_0x5b28f7(0x88c)]),_0x42b236=_0x36d245[_0x5b28f7(0x4ad)],_0x543afe=_0x36d245[_0x5b28f7(0x1d2)]||0x0,_0x4702ca=_0x36d245[_0x5b28f7(0x692)]||0x0,_0x46093d=_0x36d245[_0x5b28f7(0x206)]||0x0,_0x1c5215=_0x36d245['Radius']||0x0,_0x4370f7=_0x36d245[_0x5b28f7(0x178)]||0x1,_0x3a0af2=_0x36d245['EasingType']||'Linear',_0x399c09=Math[_0x5b28f7(0x136)](..._0x29d408[_0x5b28f7(0x424)](_0x201f52=>_0x201f52[_0x5b28f7(0x3f1)]()[_0x5b28f7(0x4f3)]-_0x201f52[_0x5b28f7(0x3f1)]()[_0x5b28f7(0x126)]()/0x2)),_0x3b530d=Math['max'](..._0x29d408[_0x5b28f7(0x424)](_0x449016=>_0x449016[_0x5b28f7(0x3f1)]()[_0x5b28f7(0x4f3)]+_0x449016[_0x5b28f7(0x3f1)]()[_0x5b28f7(0x126)]()/0x2)),_0xc9808e=Math['min'](..._0x29d408[_0x5b28f7(0x424)](_0x243f16=>_0x243f16['battler']()[_0x5b28f7(0x90f)]-_0x243f16['battler']()[_0x5b28f7(0x832)]())),_0x6d0c5d=Math[_0x5b28f7(0xa63)](..._0x29d408[_0x5b28f7(0x424)](_0x13752e=>_0x13752e['battler']()[_0x5b28f7(0x90f)])),_0x437e42=_0x29d408[_0x5b28f7(0x4bd)](_0x55d304=>_0x55d304[_0x5b28f7(0xb9d)]())[_0x5b28f7(0xa3a)],_0x22b77a=_0x29d408[_0x5b28f7(0x4bd)](_0x25d210=>_0x25d210[_0x5b28f7(0x7b4)]())[_0x5b28f7(0xa3a)];let _0x3842bf=0x0,_0x40c973=0x0;if(_0x42b236[_0x5b28f7(0x844)](/front/i))_0x3842bf=_0x437e42>=_0x22b77a?_0x399c09:_0x3b530d;else{if(_0x42b236[_0x5b28f7(0x844)](/middle/i))_0x3842bf=(_0x399c09+_0x3b530d)/0x2,melee=-0x1;else _0x42b236[_0x5b28f7(0x844)](/back/i)&&(_0x3842bf=_0x437e42>=_0x22b77a?_0x3b530d:_0x399c09);}if(_0x42b236[_0x5b28f7(0x844)](/head/i))_0x40c973=_0xc9808e;else{if(_0x42b236[_0x5b28f7(0x844)](/center/i))_0x40c973=(_0xc9808e+_0x6d0c5d)/0x2;else _0x42b236[_0x5b28f7(0x844)](/base/i)&&(_0x40c973=_0x6d0c5d);}_0x3842bf+=(Graphics[_0x5b28f7(0x895)]-Graphics[_0x5b28f7(0x375)])/0x2,_0x40c973+=(Graphics['height']-Graphics['boxHeight'])/0x2,_0x3842bf+=_0x543afe,_0x40c973+=_0x4702ca,_0x593da5[_0x5b28f7(0xc12)](_0x46093d,_0x3842bf,_0x40c973,_0x1c5215,_0x4370f7,_0x3a0af2);}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x6e6),_0x65c0d0=>{const _0x5178c2=_0x4376f0;if(!Imported[_0x5178c2(0xa73)])return;const _0xd57c14=SceneManager[_0x5178c2(0x982)][_0x5178c2(0x86d)];if(!_0xd57c14)return;if(VisuMZ[_0x5178c2(0x9e4)][_0x5178c2(0x351)]<=1.05){alert(_0x5178c2(0x4fc)),SceneManager[_0x5178c2(0x9d4)]();return;}VisuMZ[_0x5178c2(0xa93)](_0x65c0d0,_0x65c0d0);const _0x36b57c=VisuMZ[_0x5178c2(0xa0d)](_0x65c0d0[_0x5178c2(0x88c)]),_0x4fe754={'filename':_0x65c0d0['Filename'],'horzCells':_0x65c0d0['horzCells']||0x1,'vertCells':_0x65c0d0[_0x5178c2(0x219)]||0x1,'frameDelay':_0x65c0d0[_0x5178c2(0x8bb)]||0x1,'smooth':_0x65c0d0['smooth']||![],'anchorX':_0x65c0d0['anchorX']||0x0,'anchorY':_0x65c0d0[_0x5178c2(0x742)]||0x0,'offsetX':_0x65c0d0[_0x5178c2(0xb66)]||0x0,'offsetY':_0x65c0d0[_0x5178c2(0xad2)]||0x0};for(const _0x450db3 of _0x36b57c){if(!_0x450db3)continue;if(!_0x450db3[_0x5178c2(0x3f1)]())continue;_0x450db3[_0x5178c2(0x3f1)]()[_0x5178c2(0x9bb)](_0x4fe754);}const _0x45b339=$gameTemp['getLastPluginCommandInterpreter']();_0x45b339&&_0x45b339['setWaitMode'](_0x5178c2(0x644));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x155),_0x5aa8df=>{const _0x2d38a8=_0x4376f0;if(!Imported[_0x2d38a8(0xa73)])return;const _0x5d5073=SceneManager[_0x2d38a8(0x982)][_0x2d38a8(0x86d)];if(!_0x5d5073)return;if(VisuMZ[_0x2d38a8(0x9e4)][_0x2d38a8(0x351)]<=1.05){alert(_0x2d38a8(0x4fc)),SceneManager[_0x2d38a8(0x9d4)]();return;}VisuMZ[_0x2d38a8(0xa93)](_0x5aa8df,_0x5aa8df);const _0x421b12=VisuMZ[_0x2d38a8(0xa0d)](_0x5aa8df[_0x2d38a8(0x88c)]);for(const _0x2d1ccb of _0x421b12){if(!_0x2d1ccb)continue;if(!_0x2d1ccb[_0x2d38a8(0x3f1)]())continue;_0x2d1ccb[_0x2d38a8(0x3f1)]()[_0x2d38a8(0x69c)]();}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x1e2),_0x13cbf8=>{const _0x513cf0=_0x4376f0;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x104356=SceneManager['_scene'][_0x513cf0(0x86d)];if(!_0x104356)return;if(VisuMZ[_0x513cf0(0x9e4)][_0x513cf0(0x351)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x513cf0(0xa93)](_0x13cbf8,_0x13cbf8);const _0x403080=VisuMZ[_0x513cf0(0xa0d)](_0x13cbf8[_0x513cf0(0x88c)]),_0x56ca03=_0x13cbf8[_0x513cf0(0x74c)];for(const _0x3590c0 of _0x403080){if(!_0x3590c0)continue;if(!_0x3590c0[_0x513cf0(0x3f1)]())continue;_0x3590c0['battler']()[_0x513cf0(0x892)](_0x56ca03);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x5b6),_0xbbc318=>{const _0x2d440f=_0x4376f0;if(!SceneManager[_0x2d440f(0x446)]())return;const _0x44ffcf=$gameTemp[_0x2d440f(0x3c4)]();if(!_0x44ffcf)return;_0x44ffcf[_0x2d440f(0x8d7)](_0x2d440f(0x661));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],'ActSeq_Mechanics_ActionEffect',_0x2a92ac=>{const _0x51b2ce=_0x4376f0;if(!SceneManager[_0x51b2ce(0x446)]())return;VisuMZ[_0x51b2ce(0xa93)](_0x2a92ac,_0x2a92ac);const _0x4f693c=$gameTemp[_0x51b2ce(0x3c4)](),_0x13d501=BattleManager[_0x51b2ce(0x93c)],_0x269ba0=BattleManager['_subject'],_0x14f0d8=BattleManager[_0x51b2ce(0x127)];if(!_0x4f693c||!_0x13d501||!_0x269ba0)return;if(!_0x13d501[_0x51b2ce(0x269)]())return;const _0x249f4e=VisuMZ['CreateActionSequenceTargets'](_0x2a92ac[_0x51b2ce(0x88c)]);for(const _0x498ab7 of _0x249f4e){if(!_0x498ab7)continue;_0x14f0d8[_0x51b2ce(0x6b0)](_0x51b2ce(0x8ab),_0x269ba0,_0x498ab7);}_0x4f693c[_0x51b2ce(0x8d7)](_0x51b2ce(0x209));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xa8c),_0x1b10d7=>{const _0xc89e29=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActiveChainSkills'])return;$gameTemp[_0xc89e29(0x289)]=!![];}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Mechanics_AddBuffDebuff',_0x326420=>{const _0x44e9ed=_0x4376f0;if(!SceneManager[_0x44e9ed(0x446)]())return;VisuMZ[_0x44e9ed(0xa93)](_0x326420,_0x326420);const _0x1a9ce4=[_0x44e9ed(0x52c),_0x44e9ed(0x58a),_0x44e9ed(0x162),_0x44e9ed(0x168),_0x44e9ed(0x1f5),_0x44e9ed(0x538),_0x44e9ed(0xacc),_0x44e9ed(0xafb)],_0x376829=_0x326420[_0x44e9ed(0x2c3)],_0x30bb3a=_0x326420[_0x44e9ed(0x382)],_0x324429=_0x326420[_0x44e9ed(0x955)],_0x4e475c=VisuMZ[_0x44e9ed(0xa0d)](_0x326420[_0x44e9ed(0x88c)]);for(const _0x406906 of _0x4e475c){if(!_0x406906)continue;for(const _0x2732b9 of _0x376829){const _0x3737a6=_0x1a9ce4['indexOf'](_0x2732b9[_0x44e9ed(0x896)]()['trim']());_0x3737a6>=0x0&&_0x3737a6<=0x7&&_0x406906[_0x44e9ed(0x35d)](_0x3737a6,_0x324429);}for(const _0x25a6d4 of _0x30bb3a){const _0x1ce509=_0x1a9ce4['indexOf'](_0x25a6d4[_0x44e9ed(0x896)]()['trim']());_0x1ce509>=0x0&&_0x1ce509<=0x7&&_0x406906[_0x44e9ed(0x830)](_0x1ce509,_0x324429);}}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x960),_0x30d459=>{const _0x4f33c0=_0x4376f0;if(!SceneManager[_0x4f33c0(0x446)]())return;VisuMZ[_0x4f33c0(0xa93)](_0x30d459,_0x30d459);const _0x300676=_0x30d459[_0x4f33c0(0x948)],_0x454e61=VisuMZ['CreateActionSequenceTargets'](_0x30d459[_0x4f33c0(0x88c)]);for(const _0x2eeb6e of _0x454e61){if(!_0x2eeb6e)continue;for(const _0x521dd3 of _0x300676){_0x2eeb6e['addState'](_0x521dd3);}}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x9d6),_0x38a778=>{const _0xcb1f96=_0x4376f0;if(!SceneManager[_0xcb1f96(0x446)]())return;VisuMZ[_0xcb1f96(0xa93)](_0x38a778,_0x38a778);const _0x53cd12=BattleManager[_0xcb1f96(0x93c)],_0x1a57e7={'arPenRate':_0x38a778['ArPenRate'],'arPenFlat':_0x38a778[_0xcb1f96(0x971)],'arRedRate':_0x38a778['ArRedRate'],'arRedFlat':_0x38a778['ArRedFlat']};_0x53cd12[_0xcb1f96(0xadb)]=_0x1a57e7;}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x5c6),_0x2e40e7=>{const _0x64d0f1=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x64d0f1(0x6bc)])return;VisuMZ[_0x64d0f1(0xa93)](_0x2e40e7,_0x2e40e7);const _0x521d4e=VisuMZ['CreateActionSequenceTargets'](_0x2e40e7[_0x64d0f1(0x88c)]),_0x4988b3=_0x2e40e7['Reveal']||0x1;for(const _0x4d62f8 of _0x521d4e){if(!_0x4d62f8)continue;if(!_0x4d62f8['isEnemy']())continue;_0x4d62f8[_0x64d0f1(0x9fc)](_0x4988b3);}}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x8a8),_0x4bcead=>{const _0x47b1fa=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;if(!BattleManager[_0x47b1fa(0x9bd)]())return;VisuMZ[_0x47b1fa(0xa93)](_0x4bcead,_0x4bcead);const _0x501fde=VisuMZ[_0x47b1fa(0xa0d)](_0x4bcead[_0x47b1fa(0x88c)]),_0x210b5c=_0x4bcead[_0x47b1fa(0x444)],_0x50bba8=_0x4bcead[_0x47b1fa(0x444)],_0x494ddb=_0x4bcead[_0x47b1fa(0x2a7)];for(const _0x4bed7c of _0x501fde){if(!_0x4bed7c)continue;if(_0x4bed7c['isAtbChargingState']())_0x4bed7c['changeAtbChargeTime'](_0x210b5c);else{if(_0x4bed7c[_0x47b1fa(0x3af)]()){_0x4bed7c[_0x47b1fa(0xc3f)](_0x50bba8);if(_0x494ddb)_0x4bed7c[_0x47b1fa(0xc44)]();}}}}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x916),_0x1c1109=>{const _0x1bd771=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1bd771(0x201)])return;VisuMZ['ConvertParams'](_0x1c1109,_0x1c1109);const _0x268752=VisuMZ[_0x1bd771(0xa0d)](_0x1c1109[_0x1bd771(0x88c)]),_0x48c1b2=_0x1c1109[_0x1bd771(0x28d)];for(const _0x5ae29e of _0x268752){if(!_0x5ae29e)continue;_0x5ae29e['gainStoredBoostPoints'](_0x48c1b2);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x1fb),_0x352a1f=>{const _0x3543ff=_0x4376f0;if(!SceneManager[_0x3543ff(0x446)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager['_subject'])return;VisuMZ[_0x3543ff(0xa93)](_0x352a1f,_0x352a1f);const _0x28cdbf=_0x352a1f[_0x3543ff(0x975)];$gameVariables[_0x3543ff(0xc28)](_0x28cdbf,BattleManager[_0x3543ff(0x3f8)][_0x3543ff(0x96b)]());}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Mechanics_BreakShieldChange',_0x5c6a04=>{const _0x1bbade=_0x4376f0;if(!SceneManager[_0x1bbade(0x446)]())return;if(!Imported[_0x1bbade(0xad8)])return;VisuMZ[_0x1bbade(0xa93)](_0x5c6a04,_0x5c6a04);const _0x2cfa83=VisuMZ[_0x1bbade(0xa0d)](_0x5c6a04[_0x1bbade(0x88c)]),_0x42f1b3=_0x5c6a04['BreakShields'];for(const _0x5f0859 of _0x2cfa83){if(!_0x5f0859)continue;if(_0x5f0859[_0x1bbade(0x504)]())continue;if(!_0x5f0859['isAffectedByBreakShield']())continue;_0x5f0859['alterBreakShield'](_0x42f1b3);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Mechanics_BreakShieldReset',_0x5d7571=>{const _0x40d1e8=_0x4376f0;if(!SceneManager[_0x40d1e8(0x446)]())return;if(!Imported[_0x40d1e8(0xad8)])return;VisuMZ[_0x40d1e8(0xa93)](_0x5d7571,_0x5d7571);const _0x1b200a=VisuMZ[_0x40d1e8(0xa0d)](_0x5d7571[_0x40d1e8(0x88c)]);for(const _0x1753b5 of _0x1b200a){if(!_0x1753b5)continue;if(_0x1753b5[_0x40d1e8(0x504)]())continue;if(!_0x1753b5[_0x40d1e8(0x325)]())continue;_0x1753b5[_0x40d1e8(0x48f)]();}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_BtbGain',_0x4d4fcb=>{const _0x176f01=_0x4376f0;if(!SceneManager[_0x176f01(0x446)]())return;if(!Imported[_0x176f01(0x616)])return;if(!BattleManager[_0x176f01(0x5b0)]())return;VisuMZ[_0x176f01(0xa93)](_0x4d4fcb,_0x4d4fcb);const _0x5b8616=VisuMZ['CreateActionSequenceTargets'](_0x4d4fcb[_0x176f01(0x88c)]),_0x367222=_0x4d4fcb['BravePoints'];for(const _0x919194 of _0x5b8616){if(!_0x919194)continue;_0x919194[_0x176f01(0x38c)](_0x367222);}}),PluginManager[_0x4376f0(0x315)](pluginData['name'],'ActSeq_Mechanics_Collapse',_0x20768e=>{const _0x14801d=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x14801d(0xa93)](_0x20768e,_0x20768e);const _0x278fa8=$gameTemp['getLastPluginCommandInterpreter'](),_0x1f1f66=BattleManager[_0x14801d(0x93c)],_0x532f4b=BattleManager[_0x14801d(0x3f8)];if(!_0x278fa8||!_0x1f1f66||!_0x532f4b)return;if(!_0x1f1f66['item']())return;const _0x4e920b=VisuMZ['CreateActionSequenceTargets'](_0x20768e['Targets']);for(const _0x364c41 of _0x4e920b){if(!_0x364c41)continue;_0x20768e[_0x14801d(0x813)]&&(_0x364c41[_0x14801d(0x809)](),_0x364c41[_0x14801d(0x758)](_0x364c41[_0x14801d(0x706)]())),_0x364c41[_0x14801d(0x1cb)]()&&_0x364c41[_0x14801d(0x5a8)]();}_0x278fa8[_0x14801d(0x8d7)](_0x14801d(0xb4e));}),PluginManager[_0x4376f0(0x315)](pluginData['name'],'ActSeq_Mechanics_CtbOrder',_0xcc7564=>{const _0x569b1c=_0x4376f0;if(!SceneManager[_0x569b1c(0x446)]())return;if(!Imported[_0x569b1c(0x659)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x569b1c(0xa93)](_0xcc7564,_0xcc7564);const _0xe0114a=VisuMZ[_0x569b1c(0xa0d)](_0xcc7564[_0x569b1c(0x88c)]),_0x288a3a=_0xcc7564[_0x569b1c(0x2e8)];for(const _0x319775 of _0xe0114a){if(!_0x319775)continue;_0x319775['changeTurnOrderByCTB'](_0x288a3a);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xa19),_0x493e83=>{const _0x387524=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x387524(0x3a4)]())return;VisuMZ[_0x387524(0xa93)](_0x493e83,_0x493e83);const _0x2f9d13=VisuMZ['CreateActionSequenceTargets'](_0x493e83[_0x387524(0x88c)]),_0x59f773=_0x493e83[_0x387524(0x444)],_0x4cdf92=_0x493e83['ChargeRate'];for(const _0x457128 of _0x2f9d13){if(!_0x457128)continue;if(_0x457128['_tpbState']===_0x387524(0x3ab))_0x457128['changeCtbChargeTime'](_0x59f773);else _0x457128[_0x387524(0x279)]===_0x387524(0x677)&&_0x457128[_0x387524(0xa67)](_0x4cdf92);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x521),_0x278683=>{const _0x455003=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x455003(0xa93)](_0x278683,_0x278683);const _0x4860ba=BattleManager[_0x455003(0x93c)];if(!_0x4860ba)return;let _0x12b14a=_0x278683['Formula'];_0x4860ba[_0x455003(0x2f5)](_0x12b14a);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Mechanics_DamagePopup',_0x5b9294=>{const _0x26191d=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x26191d(0xa93)](_0x5b9294,_0x5b9294);const _0x17796c=VisuMZ[_0x26191d(0xa0d)](_0x5b9294[_0x26191d(0x88c)]);for(const _0x9c0737 of _0x17796c){if(!_0x9c0737)continue;if(_0x9c0737['shouldPopupDamage']())_0x9c0737[_0x26191d(0x5a7)]();}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xb15),_0x17e935=>{const _0x2f73fa=_0x4376f0;if(!SceneManager[_0x2f73fa(0x446)]())return;VisuMZ['ConvertParams'](_0x17e935,_0x17e935);const _0x1ce732=$gameTemp['getLastPluginCommandInterpreter'](),_0x203b70=BattleManager[_0x2f73fa(0x3f8)],_0x2046fd=_0x17e935['JumpToLabel'];if(!_0x1ce732)return;if(!_0x203b70)return;_0x203b70&&_0x203b70[_0x2f73fa(0x57e)]()&&_0x2046fd[_0x2f73fa(0x896)]()[_0x2f73fa(0x5cf)]()!==_0x2f73fa(0x48c)&&_0x1ce732['command119']([_0x2046fd]);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x436),_0x23c353=>{const _0x52a089=_0x4376f0;if(!SceneManager[_0x52a089(0x446)]())return;VisuMZ[_0x52a089(0xa93)](_0x23c353,_0x23c353);const _0x2f8c74=$gameTemp[_0x52a089(0x3c4)](),_0x3318ee=BattleManager[_0x52a089(0x127)];if(!_0x2f8c74)return;const _0x81d936=VisuMZ[_0x52a089(0xa0d)](_0x23c353[_0x52a089(0xa7b)]),_0x2830c3=VisuMZ['CreateActionSequenceTargets'](_0x23c353[_0x52a089(0x88c)]);for(const _0x1e67a4 of _0x81d936){for(const _0x54d2fa of _0x2830c3){if(!_0x54d2fa)continue;const _0x179ae2=$dataSkills[_0x1e67a4[_0x52a089(0x815)]()];_0x3318ee[_0x52a089(0x6b0)](_0x52a089(0x7e9),_0x1e67a4,_0x54d2fa,_0x179ae2);}}_0x2f8c74[_0x52a089(0x8d7)](_0x52a089(0x209));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Mechanics_EmulateGuardEffect',_0x541e7=>{const _0x3d2a62=_0x4376f0;if(!SceneManager[_0x3d2a62(0x446)]())return;VisuMZ['ConvertParams'](_0x541e7,_0x541e7);const _0x56ca12=$gameTemp[_0x3d2a62(0x3c4)](),_0x2b66e7=BattleManager[_0x3d2a62(0x127)];if(!_0x56ca12)return;const _0x53fecb=VisuMZ[_0x3d2a62(0xa0d)](_0x541e7[_0x3d2a62(0xa7b)]),_0x29f340=VisuMZ['CreateActionSequenceTargets'](_0x541e7['Targets']);for(const _0x2f9a15 of _0x53fecb){for(const _0x2f7cb4 of _0x29f340){if(!_0x2f7cb4)continue;const _0x150514=$dataSkills[_0x2f9a15['guardSkillId']()];_0x2b66e7[_0x3d2a62(0x6b0)]('emulateActionEffect',_0x2f9a15,_0x2f7cb4,_0x150514);}}_0x56ca12[_0x3d2a62(0x8d7)](_0x3d2a62(0x209));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Mechanics_EmulateItemEffect',_0x4906bc=>{const _0x24697c=_0x4376f0;if(!SceneManager[_0x24697c(0x446)]())return;VisuMZ['ConvertParams'](_0x4906bc,_0x4906bc);const _0x4891f2=$gameTemp[_0x24697c(0x3c4)](),_0x25a1d9=BattleManager[_0x24697c(0x127)],_0x2b955a=Number(_0x4906bc['ItemID']||0x1),_0x3badbf=$dataItems[_0x2b955a];if(!_0x4891f2)return;if(!_0x3badbf)return;const _0x2faa87=VisuMZ[_0x24697c(0xa0d)](_0x4906bc[_0x24697c(0xa7b)]),_0x1a9989=VisuMZ[_0x24697c(0xa0d)](_0x4906bc[_0x24697c(0x88c)]);for(const _0x2ec07a of _0x2faa87){for(const _0x328067 of _0x1a9989){if(!_0x328067)continue;_0x25a1d9['push'](_0x24697c(0x7e9),_0x2ec07a,_0x328067,_0x3badbf);}}_0x4891f2[_0x24697c(0x8d7)](_0x24697c(0x209));}),PluginManager['registerCommand'](pluginData['name'],_0x4376f0(0x396),_0x1c48d6=>{const _0x5dadd9=_0x4376f0;if(!SceneManager[_0x5dadd9(0x446)]())return;VisuMZ['ConvertParams'](_0x1c48d6,_0x1c48d6);let _0x59eb80=Number(_0x1c48d6[_0x5dadd9(0xbaf)]||0x0);if(_0x59eb80<=0x0){const _0x2017ca=BattleManager[_0x5dadd9(0x93c)];if(_0x2017ca&&_0x2017ca[_0x5dadd9(0x842)]())_0x59eb80=_0x2017ca[_0x5dadd9(0x269)]()['id'];else return;}const _0x49efe6=$dataSkills[_0x59eb80];if(!_0x49efe6)return;const _0x51fcaf=VisuMZ['CreateActionSequenceTargets'](_0x1c48d6['Users']);for(const _0x529873 of _0x51fcaf){_0x529873[_0x5dadd9(0x571)](_0x49efe6);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x6ca),_0x391732=>{const _0x3b7e55=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3b7e55(0xa93)](_0x391732,_0x391732);const _0x400530=$gameTemp['getLastPluginCommandInterpreter'](),_0x35c288=BattleManager[_0x3b7e55(0x127)],_0x545243=Number(_0x391732[_0x3b7e55(0xbaf)]||0x1),_0x456195=$dataSkills[_0x545243];if(!_0x400530)return;if(!_0x456195)return;const _0x2ab397=VisuMZ[_0x3b7e55(0xa0d)](_0x391732[_0x3b7e55(0xa7b)]),_0x52c38d=VisuMZ[_0x3b7e55(0xa0d)](_0x391732[_0x3b7e55(0x88c)]);for(const _0x4c24f3 of _0x2ab397){for(const _0x2f2f48 of _0x52c38d){if(!_0x2f2f48)continue;_0x35c288[_0x3b7e55(0x6b0)](_0x3b7e55(0x7e9),_0x4c24f3,_0x2f2f48,_0x456195);}}_0x400530[_0x3b7e55(0x8d7)](_0x3b7e55(0x209));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x3d4),_0x451224=>{const _0x4f2275=_0x4376f0;if(!SceneManager[_0x4f2275(0x446)]())return;VisuMZ[_0x4f2275(0xa93)](_0x451224,_0x451224);const _0x889259=VisuMZ[_0x4f2275(0xa0d)](_0x451224[_0x4f2275(0x88c)]);for(const _0x4aed01 of _0x889259){if(!_0x4aed01)continue;if(!_0x4aed01[_0x4f2275(0x7b4)]())continue;_0x4aed01[_0x4f2275(0x4ca)]();}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x5da),_0x529f16=>{const _0x536e05=_0x4376f0;if(!SceneManager[_0x536e05(0x446)]())return;if(!Imported[_0x536e05(0x27f)])return;if(!BattleManager[_0x536e05(0xb57)]())return;VisuMZ[_0x536e05(0xa93)](_0x529f16,_0x529f16);const _0x3885d6=_0x529f16[_0x536e05(0x968)];BattleManager[_0x536e05(0x3f8)]&&BattleManager[_0x536e05(0x3f8)][_0x536e05(0x4b9)]()[_0x536e05(0x17b)](_0x3885d6);}),PluginManager[_0x4376f0(0x315)](pluginData['name'],'ActSeq_Mechanics_FtbAction',_0xaa9c7b=>{const _0x46d558=_0x4376f0;if(!SceneManager[_0x46d558(0x446)]())return;if(!Imported[_0x46d558(0x6ab)])return;if(!BattleManager[_0x46d558(0x595)]())return;VisuMZ[_0x46d558(0xa93)](_0xaa9c7b,_0xaa9c7b);const _0x17436c=_0xaa9c7b[_0x46d558(0x968)];BattleManager[_0x46d558(0x3f8)]&&BattleManager[_0x46d558(0x3f8)][_0x46d558(0x4b9)]()[_0x46d558(0x663)](_0x17436c);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x5a3),_0x33f327=>{const _0x4ebcfb=_0x4376f0;if(!SceneManager[_0x4ebcfb(0x446)]())return;VisuMZ['ConvertParams'](_0x33f327,_0x33f327);const _0x7d3a16=VisuMZ[_0x4ebcfb(0xa0d)](_0x33f327[_0x4ebcfb(0x88c)]),_0x1224a5=_0x33f327['HP_Rate'],_0x436daa=_0x33f327[_0x4ebcfb(0x723)],_0x2728c1=_0x33f327[_0x4ebcfb(0x490)],_0x39eeda=_0x33f327[_0x4ebcfb(0xbfe)],_0x43f015=_0x33f327[_0x4ebcfb(0x37c)],_0x3c210e=_0x33f327['TP_Flat'],_0x167c5b=_0x33f327[_0x4ebcfb(0x29d)];for(const _0x3a36dc of _0x7d3a16){if(!_0x3a36dc)continue;const _0x4ecd02=_0x3a36dc[_0x4ebcfb(0x5c4)](),_0x22539e=Math[_0x4ebcfb(0x1c6)](_0x1224a5*_0x3a36dc[_0x4ebcfb(0x4a2)]+_0x436daa),_0x9025c7=Math[_0x4ebcfb(0x1c6)](_0x2728c1*_0x3a36dc[_0x4ebcfb(0x2b7)]+_0x39eeda),_0x169203=Math['round'](_0x43f015*_0x3a36dc[_0x4ebcfb(0x74d)]()+_0x3c210e);if(_0x22539e!==0x0)_0x3a36dc[_0x4ebcfb(0x140)](_0x22539e);if(_0x9025c7!==0x0)_0x3a36dc[_0x4ebcfb(0x1a2)](_0x9025c7);if(_0x169203!==0x0)_0x3a36dc[_0x4ebcfb(0xb8e)](_0x169203);if(_0x167c5b)_0x3a36dc[_0x4ebcfb(0x5a7)]();_0x4ecd02&&_0x3a36dc['isDead']()&&_0x3a36dc[_0x4ebcfb(0x5a8)]();}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Mechanics_Immortal',_0x36520f=>{const _0x3bd75e=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x36520f,_0x36520f);const _0x238c53=VisuMZ[_0x3bd75e(0xa0d)](_0x36520f['Targets']);for(const _0xe40204 of _0x238c53){if(!_0xe40204)continue;_0xe40204[_0x3bd75e(0x67f)](_0x36520f[_0x3bd75e(0x1a4)]);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x48b),_0x20bb43=>{const _0x356d4c=_0x4376f0;if(!SceneManager[_0x356d4c(0x446)]())return;VisuMZ['ConvertParams'](_0x20bb43,_0x20bb43);const _0x5bc036=BattleManager[_0x356d4c(0x93c)],_0x41f290={'criticalHitRate':_0x20bb43[_0x356d4c(0x20f)],'criticalHitFlat':_0x20bb43['CriticalHitFlat'],'criticalDmgRate':_0x20bb43[_0x356d4c(0x319)],'criticalDmgFlat':_0x20bb43[_0x356d4c(0x28a)],'damageRate':_0x20bb43[_0x356d4c(0x985)],'damageFlat':_0x20bb43[_0x356d4c(0x4c9)],'hitRate':_0x20bb43[_0x356d4c(0xaae)],'hitFlat':_0x20bb43[_0x356d4c(0x2f4)]};_0x5bc036['_multipliers']=_0x41f290;}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x3eb),_0x4b6d65=>{const _0x1a732b=_0x4376f0;if(!SceneManager[_0x1a732b(0x446)]())return;VisuMZ['ConvertParams'](_0x4b6d65,_0x4b6d65);const _0xc18924=_0x4b6d65['CommonEventID'];SceneManager[_0x1a732b(0x982)][_0x1a732b(0xbb4)](_0xc18924);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x337),_0x267368=>{const _0x38056b=_0x4376f0;if(!SceneManager[_0x38056b(0x446)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0x38056b(0x618)]())return;VisuMZ[_0x38056b(0xa93)](_0x267368,_0x267368);const _0x10f788=VisuMZ['CreateActionSequenceTargets'](_0x267368[_0x38056b(0x88c)]);for(const _0x5d0b6d of _0x10f788){if(!_0x5d0b6d)continue;let _0x1f075a=_0x267368[_0x38056b(0x719)],_0x37c1c7=_0x267368[_0x38056b(0x357)],_0x240eb2=_0x267368[_0x38056b(0x6c3)];BattleManager[_0x38056b(0x875)][_0x38056b(0x3e9)](_0x5d0b6d)?_0x1f075a+=_0x240eb2:_0x37c1c7+=_0x240eb2,BattleManager[_0x38056b(0xaec)](_0x5d0b6d,-_0x1f075a,![]),BattleManager[_0x38056b(0xaec)](_0x5d0b6d,-_0x37c1c7,!![]);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x654),_0x234046=>{const _0x4f2742=_0x4376f0;if(!SceneManager[_0x4f2742(0x446)]())return;if(!Imported[_0x4f2742(0xb6a)])return;if(!BattleManager[_0x4f2742(0x46e)]())return;VisuMZ[_0x4f2742(0xa93)](_0x234046,_0x234046);const _0x75d65f=BattleManager['_subject'][_0x4f2742(0x4b9)](),_0x42e288=_0x234046['Override'],_0x49f0af=_0x234046[_0x4f2742(0xbef)]||_0x4f2742(0xbd8),_0x3ec8c0=_0x234046[_0x4f2742(0x5fb)]||_0x4f2742(0xbd8),_0x384e0e=_0x234046[_0x4f2742(0x9e5)]||0x0,_0x5644bb=_0x234046[_0x4f2742(0x951)]||0x0;(_0x75d65f[_0x4f2742(0x739)]()||_0x42e288)&&(_0x42e288&&(_0x75d65f['_ptbActionCost']=_0x75d65f['_ptbActionCost']||{},_0x75d65f[_0x4f2742(0x143)][_0x4f2742(0x984)]=0x0),_0x75d65f[_0x4f2742(0xa3d)](_0x49f0af,_0x3ec8c0,_0x384e0e,_0x5644bb));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x433),_0x4d2269=>{const _0x215027=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x215027(0xb6a)])return;if(!BattleManager[_0x215027(0x46e)]())return;VisuMZ[_0x215027(0xa93)](_0x4d2269,_0x4d2269);const _0x292253=BattleManager[_0x215027(0x3f8)][_0x215027(0x4b9)]();let _0x2d236f=Math[_0x215027(0xa63)](_0x4d2269[_0x215027(0x8fe)],0x0),_0x1816f5=_0x292253[_0x215027(0x6a5)](),_0xdbd299=_0x292253[_0x215027(0x1d6)]();while(_0x2d236f--){if(_0x1816f5<=0x0&&_0xdbd299<=0x0)break;else _0x1816f5>0x0?(_0x1816f5--,_0xdbd299++):_0xdbd299--;}_0x292253[_0x215027(0x98d)](_0x1816f5),_0x292253[_0x215027(0xa5e)](_0xdbd299);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Mechanics_PtbFullHalfAction',_0x2eace8=>{const _0x230fe5=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x230fe5(0x46e)]())return;VisuMZ[_0x230fe5(0xa93)](_0x2eace8,_0x2eace8);const _0x2d8b5e=BattleManager['_subject'][_0x230fe5(0x4b9)]();let _0x5c39a1=_0x2eace8[_0x230fe5(0x9dc)],_0x16bf7b=_0x2eace8['HalfActions'];_0x2d8b5e['gainFullActionsPTB'](_0x5c39a1),_0x2d8b5e[_0x230fe5(0x275)](_0x16bf7b);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x298072=>{const _0x5cc44b=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5cc44b(0xa93)](_0x298072,_0x298072);const _0x29aec0=[_0x5cc44b(0x52c),_0x5cc44b(0x58a),_0x5cc44b(0x162),_0x5cc44b(0x168),'MAT',_0x5cc44b(0x538),'AGI',_0x5cc44b(0xafb)],_0x512ea6=_0x298072[_0x5cc44b(0x2c3)],_0x4253c0=_0x298072[_0x5cc44b(0x382)],_0xe6cae4=VisuMZ[_0x5cc44b(0xa0d)](_0x298072[_0x5cc44b(0x88c)]);for(const _0x3d647c of _0xe6cae4){if(!_0x3d647c)continue;for(const _0x22fa9c of _0x512ea6){const _0x294063=_0x29aec0[_0x5cc44b(0x68d)](_0x22fa9c['toUpperCase']()[_0x5cc44b(0x5cf)]());_0x294063>=0x0&&_0x294063<=0x7&&_0x3d647c[_0x5cc44b(0x428)](_0x294063)&&_0x3d647c[_0x5cc44b(0x150)](_0x294063);}for(const _0x4d9cec of _0x4253c0){const _0x37a678=_0x29aec0[_0x5cc44b(0x68d)](_0x4d9cec[_0x5cc44b(0x896)]()[_0x5cc44b(0x5cf)]());_0x37a678>=0x0&&_0x37a678<=0x7&&_0x3d647c[_0x5cc44b(0x6a0)](_0x37a678)&&_0x3d647c['removeBuff'](_0x37a678);}}}),PluginManager['registerCommand'](pluginData['name'],_0x4376f0(0x505),_0x7d27bc=>{const _0xa06bf3=_0x4376f0;if(!SceneManager[_0xa06bf3(0x446)]())return;VisuMZ['ConvertParams'](_0x7d27bc,_0x7d27bc);const _0x52176e=_0x7d27bc['States'],_0x8a6fc=VisuMZ[_0xa06bf3(0xa0d)](_0x7d27bc['Targets']);for(const _0x4722a0 of _0x8a6fc){if(!_0x4722a0)continue;for(const _0x49243f of _0x52176e){_0x4722a0[_0xa06bf3(0x535)](_0x49243f);}}}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xae7),_0x5dbd98=>{const _0x1f4ca9=_0x4376f0;if(!SceneManager[_0x1f4ca9(0x446)]())return;if(!Imported[_0x1f4ca9(0x601)])return;VisuMZ[_0x1f4ca9(0xa93)](_0x5dbd98,_0x5dbd98);const _0x50095d=VisuMZ[_0x1f4ca9(0xa0d)](_0x5dbd98[_0x1f4ca9(0x88c)]),_0x16af75=Number(_0x5dbd98['StateID']),_0x3d00b4=Number(_0x5dbd98[_0x1f4ca9(0x955)]),_0x24963f=_0x5dbd98[_0x1f4ca9(0x964)];for(const _0x4adb79 of _0x50095d){if(!_0x4adb79)continue;_0x24963f&&!_0x4adb79[_0x1f4ca9(0x3cb)](_0x16af75)?(_0x4adb79[_0x1f4ca9(0x758)](_0x16af75),_0x4adb79[_0x1f4ca9(0x5ae)](_0x16af75,_0x3d00b4)):_0x4adb79[_0x1f4ca9(0x4f5)](_0x16af75,_0x3d00b4);}}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x210),_0x5c4eb1=>{const _0x3fb2da=_0x4376f0;if(!SceneManager[_0x3fb2da(0x446)]())return;if(!Imported[_0x3fb2da(0x601)])return;VisuMZ[_0x3fb2da(0xa93)](_0x5c4eb1,_0x5c4eb1);const _0x6c1852=VisuMZ['CreateActionSequenceTargets'](_0x5c4eb1[_0x3fb2da(0x88c)]),_0x5cdf85=Number(_0x5c4eb1[_0x3fb2da(0x850)]),_0x5c4378=Math['max'](Number(_0x5c4eb1[_0x3fb2da(0x955)]),0x0),_0x551986=_0x5c4eb1[_0x3fb2da(0x964)];for(const _0x210455 of _0x6c1852){if(!_0x210455)continue;_0x551986&&!_0x210455[_0x3fb2da(0x3cb)](_0x5cdf85)&&_0x210455[_0x3fb2da(0x758)](_0x5cdf85),_0x210455['setStateTurns'](_0x5cdf85,_0x5c4378);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x5b5),_0x5a550e=>{const _0x40d91f=_0x4376f0;if(!SceneManager[_0x40d91f(0x446)]())return;if(!Imported[_0x40d91f(0x47a)])return;if(!BattleManager[_0x40d91f(0x9c3)]())return;VisuMZ['ConvertParams'](_0x5a550e,_0x5a550e);const _0x21ee49=_0x5a550e[_0x40d91f(0x672)],_0x322f95=VisuMZ['CreateActionSequenceTargets'](_0x5a550e[_0x40d91f(0x88c)]),_0x18e719=_0x5a550e[_0x40d91f(0x408)],_0x177467=_0x5a550e['Exploiter'],_0x44337d=_0x5a550e[_0x40d91f(0xb26)],_0x21025c=BattleManager[_0x40d91f(0x93c)];if(_0x21ee49)for(const _0x48af1f of _0x322f95){if(!_0x48af1f)continue;if(_0x48af1f===BattleManager[_0x40d91f(0x3f8)])continue;if(_0x18e719)_0x48af1f[_0x40d91f(0xa07)](![]);_0x48af1f[_0x40d91f(0x9f4)](BattleManager[_0x40d91f(0x3f8)],_0x21025c);}if(_0x177467&&BattleManager['_subject']){if(_0x44337d)BattleManager[_0x40d91f(0x3f8)][_0x40d91f(0xa07)](![]);const _0x449f25=_0x322f95[0x0];BattleManager[_0x40d91f(0x3f8)][_0x40d91f(0xa51)](_0x449f25,_0x21025c);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x7f2),_0x1a9ca5=>{const _0x525104=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x525104(0x47a)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x525104(0xa93)](_0x1a9ca5,_0x1a9ca5);const _0xb1818a=_0x1a9ca5[_0x525104(0x73d)];BattleManager[_0x525104(0x3f8)]&&BattleManager[_0x525104(0x3f8)][_0x525104(0xa35)](_0xb1818a);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x215),_0x33a4cc=>{const _0x5fcb68=_0x4376f0;if(!SceneManager[_0x5fcb68(0x446)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x5fcb68(0x9c3)]())return;VisuMZ[_0x5fcb68(0xa93)](_0x33a4cc,_0x33a4cc);let _0x4466d7=_0x33a4cc[_0x5fcb68(0x73d)];if(BattleManager['_subject']){BattleManager[_0x5fcb68(0x3f8)][_0x5fcb68(0x33f)]=BattleManager[_0x5fcb68(0x3f8)][_0x5fcb68(0x33f)]||[];while(_0x4466d7--){if(BattleManager[_0x5fcb68(0x3f8)][_0x5fcb68(0x33f)]['length']<=0x0)break;BattleManager['_subject'][_0x5fcb68(0x33f)][_0x5fcb68(0xaf0)]();}}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Mechanics_SwapWeapon',_0x17bb5d=>{const _0x1e99a0=_0x4376f0;if(!SceneManager[_0x1e99a0(0x446)]())return;if(!Imported[_0x1e99a0(0x8c7)])return;VisuMZ['ConvertParams'](_0x17bb5d,_0x17bb5d);const _0x5a3331=VisuMZ['CreateActionSequenceTargets'](_0x17bb5d[_0x1e99a0(0x88c)]),_0x2d9529=_0x17bb5d['WeaponTypeID'];for(const _0x5ba4a9 of _0x5a3331){if(!_0x5ba4a9)continue;if(!_0x5ba4a9[_0x1e99a0(0xb9d)]())continue;_0x5ba4a9[_0x1e99a0(0xb37)](_0x2d9529);}}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x2bd),_0x209ec1=>{const _0x56ccc2=_0x4376f0;if(!SceneManager[_0x56ccc2(0x446)]())return;VisuMZ['ConvertParams'](_0x209ec1,_0x209ec1);const _0x5b49fc=VisuMZ[_0x56ccc2(0xa0d)](_0x209ec1['Targets']),_0x283022=_0x209ec1[_0x56ccc2(0x82f)],_0x5cb0ff={'textColor':ColorManager[_0x56ccc2(0xbdb)](_0x209ec1[_0x56ccc2(0x1db)]),'flashColor':_0x209ec1[_0x56ccc2(0x479)],'flashDuration':_0x209ec1[_0x56ccc2(0xa43)]};for(const _0x37b68b of _0x5b49fc){if(!_0x37b68b)continue;_0x37b68b[_0x56ccc2(0x301)](_0x283022,_0x5cb0ff);}}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0xaf7),_0x550980=>{const _0xdb2c6e=_0x4376f0;if(!SceneManager[_0xdb2c6e(0x446)]())return;VisuMZ[_0xdb2c6e(0xa93)](_0x550980,_0x550980);const _0x140999=VisuMZ[_0xdb2c6e(0xa0d)](_0x550980[_0xdb2c6e(0x88c)]);let _0x4012c6=$gameVariables['value'](_0x550980['Variable']);Imported[_0xdb2c6e(0x7ba)]&&_0x550980['DigitGrouping']&&(_0x4012c6=VisuMZ['GroupDigits'](_0x4012c6));const _0x61cac=String(_0x4012c6),_0x311ceb={'textColor':ColorManager[_0xdb2c6e(0xbdb)](_0x550980['TextColor']),'flashColor':_0x550980[_0xdb2c6e(0x479)],'flashDuration':_0x550980['FlashDuration']};for(const _0x338a4c of _0x140999){if(!_0x338a4c)continue;_0x338a4c['setupTextPopup'](_0x61cac,_0x311ceb);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x1b5),_0x1e6615=>{const _0x5b1c0f=_0x4376f0;if(!SceneManager[_0x5b1c0f(0x446)]())return;const _0x49c270=$gameTemp[_0x5b1c0f(0x3c4)]();if(!_0x49c270)return;_0x49c270[_0x5b1c0f(0x8d7)]('battleEffect');}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x1c5),_0x2865a3=>{const _0x510ea2=_0x4376f0;if(!SceneManager[_0x510ea2(0x446)]())return;VisuMZ[_0x510ea2(0xa93)](_0x2865a3,_0x2865a3);const _0x48b6cc=VisuMZ[_0x510ea2(0xa0d)](_0x2865a3[_0x510ea2(0x88c)]);for(const _0x1f6f7c of _0x48b6cc){if(!_0x1f6f7c)continue;_0x1f6f7c[_0x510ea2(0x918)]();}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Motion_FreezeMotionFrame',_0x42d7ed=>{const _0x433b72=_0x4376f0;if(!SceneManager[_0x433b72(0x446)]())return;VisuMZ['ConvertParams'](_0x42d7ed,_0x42d7ed);const _0x4bffcd=VisuMZ[_0x433b72(0xa0d)](_0x42d7ed['Targets']),_0x4bd411=_0x42d7ed[_0x433b72(0x174)][_0x433b72(0x177)]()['trim']();let _0xacecb2=_0x42d7ed[_0x433b72(0x99e)];const _0x33add5=_0x42d7ed[_0x433b72(0x56f)];![_0x433b72(0x31d),_0x433b72(0x483),_0x433b72(0x87a),_0x433b72(0x2c8)][_0x433b72(0x3e9)](_0x4bd411)&&(_0xacecb2=![]);for(const _0x13181d of _0x4bffcd){if(!_0x13181d)continue;_0x13181d[_0x433b72(0x443)](_0x4bd411,_0xacecb2,_0x33add5);}}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x647),_0x4d3eef=>{const _0x550037=_0x4376f0;if(!SceneManager[_0x550037(0x446)]())return;VisuMZ[_0x550037(0xa93)](_0x4d3eef,_0x4d3eef);const _0x57eb84=VisuMZ[_0x550037(0xa0d)](_0x4d3eef['Targets']),_0x48afa0=_0x4d3eef[_0x550037(0x174)][_0x550037(0x177)]()[_0x550037(0x5cf)](),_0x8f912f=_0x4d3eef[_0x550037(0x99e)];for(const _0x1a4d88 of _0x57eb84){if(!_0x1a4d88)continue;_0x1a4d88[_0x550037(0x236)]=_0x8f912f;if(_0x48afa0[_0x550037(0x844)](/ATTACK[ ](\d+)/i))_0x1a4d88[_0x550037(0x68c)](Number(RegExp['$1']));else _0x48afa0===_0x550037(0x31d)?_0x1a4d88['performAttack']():_0x1a4d88['requestMotion'](_0x48afa0);if(!_0x8f912f)_0x1a4d88[_0x550037(0x8e0)](0x0);else{if(_0x8f912f&&['thrust','swing',_0x550037(0x708)][_0x550037(0x3e9)](_0x48afa0)){}}_0x1a4d88[_0x550037(0x236)]=undefined;}}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x46d),_0x4d55ce=>{const _0x16dc5b=_0x4376f0;if(!SceneManager[_0x16dc5b(0x446)]())return;VisuMZ[_0x16dc5b(0xa93)](_0x4d55ce,_0x4d55ce);const _0x5e6b99=BattleManager['_action'];if(!_0x5e6b99)return;if(!_0x5e6b99[_0x16dc5b(0x269)]())return;const _0x915fe2=VisuMZ[_0x16dc5b(0xa0d)](_0x4d55ce[_0x16dc5b(0x88c)]);for(const _0x169891 of _0x915fe2){if(!_0x169891)continue;_0x169891[_0x16dc5b(0x5ff)](_0x5e6b99);}}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x19b),_0xe80c53=>{const _0x212bb0=_0x4376f0;if(!SceneManager[_0x212bb0(0x446)]())return;VisuMZ[_0x212bb0(0xa93)](_0xe80c53,_0xe80c53);const _0x38ddd2=VisuMZ[_0x212bb0(0xa0d)](_0xe80c53['Targets']);for(const _0x2ba9e1 of _0x38ddd2){if(!_0x2ba9e1)continue;if(!_0x2ba9e1[_0x212bb0(0x3f1)]())continue;_0x2ba9e1[_0x212bb0(0x3f1)]()[_0x212bb0(0x80a)]();}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Motion_WaitMotionFrame',_0x1bd25d=>{const _0x23eddd=_0x4376f0;if(!SceneManager[_0x23eddd(0x446)]())return;VisuMZ[_0x23eddd(0xa93)](_0x1bd25d,_0x1bd25d);const _0x2fc820=$gameTemp[_0x23eddd(0x3c4)](),_0x48405a=_0x1bd25d['MotionFrameWait']*Sprite_Battler[_0x23eddd(0x8c1)];_0x2fc820[_0x23eddd(0xc3e)](_0x48405a);}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x78a),_0x293ccf=>{const _0x18e966=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x293ccf,_0x293ccf);const _0x4e0e9e=$gameTemp[_0x18e966(0x3c4)](),_0x573dd9=BattleManager['_action'];if(!_0x4e0e9e||!_0x573dd9)return;if(!_0x573dd9[_0x18e966(0x269)]())return;const _0x12ef6c=VisuMZ[_0x18e966(0xa0d)](_0x293ccf[_0x18e966(0x88c)]);for(const _0x129952 of _0x12ef6c){if(!_0x129952)continue;_0x129952[_0x18e966(0x1bf)](_0x573dd9);}if(_0x293ccf[_0x18e966(0x5fe)])_0x4e0e9e[_0x18e966(0x8d7)](_0x18e966(0xa83));}),PluginManager['registerCommand'](pluginData['name'],_0x4376f0(0x882),_0x16bda6=>{const _0xec669d=_0x4376f0;if(!SceneManager[_0xec669d(0x446)]())return;if(!$gameSystem[_0xec669d(0x245)]())return;VisuMZ[_0xec669d(0xa93)](_0x16bda6,_0x16bda6);const _0x3c01c6=$gameTemp['getLastPluginCommandInterpreter'](),_0x152c50=VisuMZ['CreateActionSequenceTargets'](_0x16bda6[_0xec669d(0x88c)]),_0x94de45=_0x16bda6[_0xec669d(0x5db)],_0x3b1de8=_0x16bda6[_0xec669d(0x741)],_0x581d14=_0x16bda6[_0xec669d(0x1cc)],_0x341e52=_0x16bda6[_0xec669d(0x178)],_0x5b6e66=_0x16bda6[_0xec669d(0x5a2)],_0x2604d4=_0x16bda6[_0xec669d(0x6b1)],_0x138418=_0x16bda6['MotionType'],_0x104070=_0x16bda6[_0xec669d(0x5fe)];if(!_0x3c01c6)return;for(const _0x562471 of _0x152c50){if(!_0x562471)continue;let _0xd1f7f8=_0x3b1de8,_0x50f1f2=_0x581d14;if(_0x94de45[_0xec669d(0x844)](/horz/i))_0xd1f7f8*=_0x562471[_0xec669d(0xb9d)]()?-0x1:0x1;if(_0x94de45[_0xec669d(0x844)](/vert/i))_0x50f1f2*=_0x562471[_0xec669d(0xb9d)]()?-0x1:0x1;_0x562471[_0xec669d(0x146)](_0xd1f7f8,_0x50f1f2,_0x341e52,_0x5b6e66,_0x2604d4),_0x562471['requestMotion'](_0x138418);}if(_0x104070)_0x3c01c6[_0xec669d(0x8d7)](_0xec669d(0xa83));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x95e),_0x4c49fd=>{const _0x45c398=_0x4376f0;if(!SceneManager[_0x45c398(0x446)]())return;if(!$gameSystem[_0x45c398(0x245)]())return;VisuMZ[_0x45c398(0xa93)](_0x4c49fd,_0x4c49fd);const _0x474eb0=$gameTemp[_0x45c398(0x3c4)](),_0x1d8953=VisuMZ[_0x45c398(0xa0d)](_0x4c49fd[_0x45c398(0x88c)]),_0xd8ae2e=_0x4c49fd[_0x45c398(0xb8f)],_0x343a8a=_0x4c49fd['OffsetX'],_0xb075b6=_0x4c49fd['OffsetY'],_0x5854ea=_0x4c49fd[_0x45c398(0x178)],_0x48016c=_0x4c49fd[_0x45c398(0x5a2)],_0x3d4318=_0x4c49fd[_0x45c398(0x6b1)],_0x986a1d=_0x4c49fd[_0x45c398(0x174)],_0x1900ea=_0x4c49fd['WaitForMovement'];if(!_0x474eb0)return;for(const _0x535625 of _0x1d8953){if(!_0x535625)continue;const _0x1ad558=_0x4c49fd[_0x45c398(0x222)](_0x535625)||{'x':0x0,'y':0x0};let _0x3f5f0b=_0x1ad558['x'],_0x5af83a=_0x1ad558['y'];if(_0xd8ae2e[_0x45c398(0x844)](/none/i))_0x3f5f0b+=_0x343a8a,_0x5af83a+=_0xb075b6;else{if(_0xd8ae2e['match'](/horz/i)&&_0xd8ae2e[_0x45c398(0x844)](/vert/i))_0x3f5f0b+=_0x535625['isActor']()?-_0x343a8a:_0x343a8a,_0x5af83a+=_0x535625[_0x45c398(0xb9d)]()?-_0xb075b6:_0xb075b6;else{if(_0xd8ae2e['match'](/horz/i))_0x3f5f0b+=_0x535625[_0x45c398(0xb9d)]()?-_0x343a8a:_0x343a8a,_0x5af83a+=_0xb075b6;else _0xd8ae2e[_0x45c398(0x844)](/vert/i)&&(_0x3f5f0b+=_0x343a8a,_0x5af83a+=_0x535625[_0x45c398(0xb9d)]()?-_0xb075b6:_0xb075b6);}}_0x535625['moveBattlerHomeToPoint'](_0x3f5f0b,_0x5af83a,_0x5854ea,_0x48016c,_0x3d4318,-0x1),_0x535625[_0x45c398(0x6cf)](_0x986a1d);}if(_0x1900ea)_0x474eb0['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x8bd),_0x717a84=>{const _0x8e2b48=_0x4376f0;if(!SceneManager[_0x8e2b48(0x446)]())return;if(!$gameSystem[_0x8e2b48(0x245)]())return;VisuMZ[_0x8e2b48(0xa93)](_0x717a84,_0x717a84);const _0x528a67=$gameTemp[_0x8e2b48(0x3c4)](),_0x24b478=VisuMZ[_0x8e2b48(0xa0d)](_0x717a84[_0x8e2b48(0x88c)]),_0x4aa8a0=_0x717a84['Destination'],_0x4fca65=_0x717a84[_0x8e2b48(0xb8f)],_0x39d22d=_0x717a84['OffsetX'],_0x3fa39b=_0x717a84[_0x8e2b48(0x692)],_0xd83776=_0x717a84[_0x8e2b48(0x178)],_0x411857=_0x717a84[_0x8e2b48(0x5a2)],_0x1266cc=_0x717a84[_0x8e2b48(0x6b1)],_0x143ad8=_0x717a84[_0x8e2b48(0x174)],_0x245ca7=_0x717a84['WaitForMovement'];if(!_0x528a67)return;for(const _0xedf96c of _0x24b478){if(!_0xedf96c)continue;let _0x5c5ab4=_0xedf96c[_0x8e2b48(0x3f1)]()[_0x8e2b48(0x4f3)],_0x2c17fb=_0xedf96c[_0x8e2b48(0x3f1)]()[_0x8e2b48(0x90f)];if(_0x4aa8a0['match'](/home/i))_0x5c5ab4=_0xedf96c['battler']()[_0x8e2b48(0x6e9)],_0x2c17fb=_0xedf96c[_0x8e2b48(0x3f1)]()[_0x8e2b48(0x62b)];else{if(_0x4aa8a0[_0x8e2b48(0x844)](/center/i))_0x5c5ab4=Graphics[_0x8e2b48(0x375)]/0x2,_0x2c17fb=Graphics[_0x8e2b48(0x21b)]/0x2;else _0x4aa8a0[_0x8e2b48(0x844)](/point (\d+), (\d+)/i)&&(_0x5c5ab4=Number(RegExp['$1']),_0x2c17fb=Number(RegExp['$2']));}if(_0x4fca65[_0x8e2b48(0x844)](/none/i))_0x5c5ab4+=_0x39d22d,_0x2c17fb+=_0x3fa39b;else{if(_0x4fca65[_0x8e2b48(0x844)](/horz/i)&&_0x4fca65[_0x8e2b48(0x844)](/vert/i))_0x5c5ab4+=_0xedf96c[_0x8e2b48(0xb9d)]()?-_0x39d22d:_0x39d22d,_0x2c17fb+=_0xedf96c[_0x8e2b48(0xb9d)]()?-_0x3fa39b:_0x3fa39b;else{if(_0x4fca65['match'](/horz/i))_0x5c5ab4+=_0xedf96c[_0x8e2b48(0xb9d)]()?-_0x39d22d:_0x39d22d,_0x2c17fb+=_0x3fa39b;else _0x4fca65[_0x8e2b48(0x844)](/vert/i)&&(_0x5c5ab4+=_0x39d22d,_0x2c17fb+=_0xedf96c[_0x8e2b48(0xb9d)]()?-_0x3fa39b:_0x3fa39b);}}_0xedf96c[_0x8e2b48(0x541)](_0x5c5ab4,_0x2c17fb,_0xd83776,_0x411857,_0x1266cc,-0x1),_0xedf96c[_0x8e2b48(0x6cf)](_0x143ad8);}if(_0x245ca7)_0x528a67['setWaitMode'](_0x8e2b48(0xa83));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],'ActSeq_Movement_HomeMoveToTarget',_0x3e1b7b=>{const _0x31804e=_0x4376f0;if(!SceneManager[_0x31804e(0x446)]())return;if(!$gameSystem[_0x31804e(0x245)]())return;VisuMZ[_0x31804e(0xa93)](_0x3e1b7b,_0x3e1b7b);const _0x1a43ae=$gameTemp[_0x31804e(0x3c4)](),_0x25f4fb=VisuMZ['CreateActionSequenceTargets'](_0x3e1b7b[_0x31804e(0x776)]),_0x470f3c=VisuMZ[_0x31804e(0xa0d)](_0x3e1b7b[_0x31804e(0xb72)]),_0x3b1064=_0x3e1b7b[_0x31804e(0x4ad)];let _0x375020=_0x3e1b7b[_0x31804e(0x6f2)];const _0x25c3f2=_0x3e1b7b[_0x31804e(0xb8f)],_0x3970a0=_0x3e1b7b['OffsetX'],_0x203bdb=_0x3e1b7b[_0x31804e(0x692)],_0x47046f=_0x3e1b7b[_0x31804e(0x178)],_0x5ee252=_0x3e1b7b[_0x31804e(0x5a2)],_0x5dfaf9=_0x3e1b7b[_0x31804e(0x6b1)],_0x20408f=_0x3e1b7b['MotionType'],_0x11c02d=_0x3e1b7b[_0x31804e(0x5fe)],_0x456307=Math[_0x31804e(0x136)](..._0x470f3c[_0x31804e(0x424)](_0x26bce1=>_0x26bce1[_0x31804e(0x3f1)]()['_baseX']-_0x26bce1['battler']()[_0x31804e(0x126)]()/0x2)),_0x385567=Math[_0x31804e(0xa63)](..._0x470f3c[_0x31804e(0x424)](_0x638a28=>_0x638a28[_0x31804e(0x3f1)]()[_0x31804e(0x4f3)]+_0x638a28[_0x31804e(0x3f1)]()[_0x31804e(0x126)]()/0x2)),_0x399c29=Math['min'](..._0x470f3c[_0x31804e(0x424)](_0x3a6013=>_0x3a6013[_0x31804e(0x3f1)]()['_baseY']-_0x3a6013['battler']()[_0x31804e(0x832)]())),_0x1f9e42=Math[_0x31804e(0xa63)](..._0x470f3c[_0x31804e(0x424)](_0x578057=>_0x578057[_0x31804e(0x3f1)]()[_0x31804e(0x90f)])),_0xcdb30d=_0x470f3c[_0x31804e(0x4bd)](_0x58f2a7=>_0x58f2a7[_0x31804e(0xb9d)]())['length'],_0x4f4c55=_0x470f3c[_0x31804e(0x4bd)](_0x2c58c8=>_0x2c58c8[_0x31804e(0x7b4)]())[_0x31804e(0xa3a)];let _0x4de5ea=0x0,_0x10af54=0x0;if(_0x3b1064['match'](/front/i))_0x4de5ea=_0xcdb30d>=_0x4f4c55?_0x456307:_0x385567;else{if(_0x3b1064[_0x31804e(0x844)](/middle/i))_0x4de5ea=(_0x456307+_0x385567)/0x2,_0x375020=-0x1;else _0x3b1064[_0x31804e(0x844)](/back/i)&&(_0x4de5ea=_0xcdb30d>=_0x4f4c55?_0x385567:_0x456307);}if(_0x3b1064[_0x31804e(0x844)](/head/i))_0x10af54=_0x399c29;else{if(_0x3b1064[_0x31804e(0x844)](/center/i))_0x10af54=(_0x399c29+_0x1f9e42)/0x2;else _0x3b1064[_0x31804e(0x844)](/base/i)&&(_0x10af54=_0x1f9e42);}if(!_0x1a43ae)return;for(const _0x51b665 of _0x25f4fb){if(!_0x51b665)continue;let _0x52762d=_0x4de5ea,_0x170c1f=_0x10af54;if(_0x25c3f2['match'](/none/i))_0x52762d+=_0x3970a0,_0x170c1f+=_0x203bdb;else{if(_0x25c3f2[_0x31804e(0x844)](/horz/i)&&_0x25c3f2['match'](/vert/i))_0x52762d+=_0x51b665[_0x31804e(0xb9d)]()?-_0x3970a0:_0x3970a0,_0x170c1f+=_0x51b665[_0x31804e(0xb9d)]()?-_0x203bdb:_0x203bdb;else{if(_0x25c3f2['match'](/horz/i))_0x52762d+=_0x51b665[_0x31804e(0xb9d)]()?-_0x3970a0:_0x3970a0,_0x170c1f+=_0x203bdb;else _0x25c3f2['match'](/vert/i)&&(_0x52762d+=_0x3970a0,_0x170c1f+=_0x51b665['isActor']()?-_0x203bdb:_0x203bdb);}}_0x51b665['moveBattlerHomeToPoint'](_0x52762d,_0x170c1f,_0x47046f,_0x5ee252,_0x5dfaf9,_0x375020),_0x51b665[_0x31804e(0x6cf)](_0x20408f);}if(_0x11c02d)_0x1a43ae[_0x31804e(0x8d7)](_0x31804e(0xa83));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x959),_0x1cac85=>{const _0x2d627e=_0x4376f0;if(!SceneManager[_0x2d627e(0x446)]())return;if(!$gameSystem[_0x2d627e(0x245)]())return;VisuMZ['ConvertParams'](_0x1cac85,_0x1cac85);const _0x8a735a=VisuMZ[_0x2d627e(0xa0d)](_0x1cac85[_0x2d627e(0x88c)]);let _0x2d57eb=_0x1cac85[_0x2d627e(0xa85)][_0x2d627e(0x844)](/back/i);for(const _0x24ff21 of _0x8a735a){if(!_0x24ff21)continue;if(_0x1cac85['Direction'][_0x2d627e(0x844)](/rand/i))_0x2d57eb=Math[_0x2d627e(0x96e)](0x2);_0x24ff21[_0x2d627e(0x85b)](!!_0x2d57eb);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Movement_FaceJsPoint',_0x2283e1=>{const _0x36b080=_0x4376f0;if(!SceneManager[_0x36b080(0x446)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x36b080(0xa93)](_0x2283e1,_0x2283e1);const _0x543f1f=VisuMZ[_0x36b080(0xa0d)](_0x2283e1['Targets']),_0x581e99=_0x2283e1[_0x36b080(0x409)];for(const _0x3b268b of _0x543f1f){if(!_0x3b268b)continue;const _0x35291d=_0x2283e1['PointJS'](_0x3b268b)||{'x':0x0,'y':0x0};let _0x324cb4=_0x35291d['x'],_0xcad578=_0x35291d['y'];_0x3b268b[_0x36b080(0x1ec)](Math['round'](_0x324cb4),Math['round'](_0xcad578),!!_0x581e99);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xa80),_0x17eb53=>{const _0x558e51=_0x4376f0;if(!SceneManager[_0x558e51(0x446)]())return;if(!$gameSystem[_0x558e51(0x245)]())return;VisuMZ[_0x558e51(0xa93)](_0x17eb53,_0x17eb53);const _0x27870e=VisuMZ[_0x558e51(0xa0d)](_0x17eb53[_0x558e51(0x88c)]);let _0x53a694=_0x17eb53['Point'];const _0x16559b=_0x17eb53[_0x558e51(0x409)];for(const _0x2d476e of _0x27870e){if(!_0x2d476e)continue;let _0x41b9cb=_0x2d476e[_0x558e51(0x3f1)]()['_baseX'],_0x1513af=_0x2d476e[_0x558e51(0x3f1)]()[_0x558e51(0x90f)];if(_0x53a694[_0x558e51(0x844)](/home/i))_0x41b9cb=_0x2d476e[_0x558e51(0x3f1)]()['_homeX'],_0x1513af=_0x2d476e['battler']()[_0x558e51(0x62b)];else{if(_0x53a694[_0x558e51(0x844)](/center/i))_0x41b9cb=Graphics['boxWidth']/0x2,_0x1513af=Graphics[_0x558e51(0x21b)]/0x2;else _0x53a694['match'](/point (\d+), (\d+)/i)&&(_0x41b9cb=Number(RegExp['$1']),_0x1513af=Number(RegExp['$2']));}_0x2d476e[_0x558e51(0x1ec)](Math[_0x558e51(0x1c6)](_0x41b9cb),Math[_0x558e51(0x1c6)](_0x1513af),!!_0x16559b);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Movement_FaceTarget',_0x28a0e3=>{const _0x76b5a9=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x76b5a9(0xa93)](_0x28a0e3,_0x28a0e3);const _0x1ef927=VisuMZ['CreateActionSequenceTargets'](_0x28a0e3[_0x76b5a9(0x776)]),_0x5d2f46=VisuMZ[_0x76b5a9(0xa0d)](_0x28a0e3['Targets2']),_0x1881d1=_0x5d2f46[_0x76b5a9(0x424)](_0x25c69c=>_0x25c69c&&_0x25c69c[_0x76b5a9(0x3f1)]()?_0x25c69c[_0x76b5a9(0x3f1)]()['_baseX']:0x0)/(_0x5d2f46['length']||0x1),_0xe7903d=_0x5d2f46[_0x76b5a9(0x424)](_0x1ef194=>_0x1ef194&&_0x1ef194['battler']()?_0x1ef194[_0x76b5a9(0x3f1)]()[_0x76b5a9(0x90f)]:0x0)/(_0x5d2f46[_0x76b5a9(0xa3a)]||0x1),_0x36519d=_0x28a0e3['FaceAway'];for(const _0x1d3d95 of _0x1ef927){if(!_0x1d3d95)continue;_0x1d3d95['setBattlerFacePoint'](Math[_0x76b5a9(0x1c6)](_0x1881d1),Math[_0x76b5a9(0x1c6)](_0xe7903d),!!_0x36519d);}}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x468),_0x4b7a18=>{const _0x1e2fda=_0x4376f0;if(!SceneManager[_0x1e2fda(0x446)]())return;VisuMZ[_0x1e2fda(0xa93)](_0x4b7a18,_0x4b7a18);const _0x4c0b2e=$gameTemp[_0x1e2fda(0x3c4)](),_0xab8ab8=VisuMZ[_0x1e2fda(0xa0d)](_0x4b7a18[_0x1e2fda(0x88c)]),_0x419fb2=_0x4b7a18['Height'],_0x4a552d=_0x4b7a18[_0x1e2fda(0x178)],_0x963890=_0x4b7a18[_0x1e2fda(0x6b1)],_0x11664b=_0x4b7a18[_0x1e2fda(0xc30)];if(!_0x4c0b2e)return;for(const _0x15808d of _0xab8ab8){if(!_0x15808d)continue;_0x15808d[_0x1e2fda(0x633)](_0x419fb2,_0x4a552d,_0x963890);}if(_0x11664b)_0x4c0b2e['setWaitMode'](_0x1e2fda(0x290));}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x5a1),_0x5899b8=>{const _0x33243c=_0x4376f0;if(!SceneManager[_0x33243c(0x446)]())return;VisuMZ[_0x33243c(0xa93)](_0x5899b8,_0x5899b8);const _0xa7a25b=$gameTemp[_0x33243c(0x3c4)]();if(!_0xa7a25b)return;const _0x3b345d=VisuMZ[_0x33243c(0xa0d)](_0x5899b8[_0x33243c(0x88c)]);for(const _0x2050d5 of _0x3b345d){if(!_0x2050d5)continue;_0x2050d5[_0x33243c(0x7e8)]();}BattleManager[_0x33243c(0x3f8)]&&BattleManager[_0x33243c(0x3f8)][_0x33243c(0x95c)]();if(_0x5899b8['WaitForMovement'])_0xa7a25b['setWaitMode'](_0x33243c(0xa83));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xa92),_0x18831d=>{const _0x31fbae=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x31fbae(0xa93)](_0x18831d,_0x18831d);const _0x2302b8=$gameTemp['getLastPluginCommandInterpreter'](),_0x5d750c=VisuMZ['CreateActionSequenceTargets'](_0x18831d[_0x31fbae(0x88c)]),_0xf90728=_0x18831d['Height'],_0xdfea09=_0x18831d[_0x31fbae(0x178)],_0x8a1e15=_0x18831d[_0x31fbae(0x972)];if(!_0x2302b8)return;for(const _0xd5459 of _0x5d750c){if(!_0xd5459)continue;_0xd5459[_0x31fbae(0x9b3)](_0xf90728,_0xdfea09);}if(_0x8a1e15)_0x2302b8['setWaitMode']('battleJump');}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xbeb),_0x2e6e35=>{const _0x43fc56=_0x4376f0;if(!SceneManager[_0x43fc56(0x446)]())return;if(!$gameSystem[_0x43fc56(0x245)]())return;VisuMZ[_0x43fc56(0xa93)](_0x2e6e35,_0x2e6e35);const _0xec60c1=$gameTemp['getLastPluginCommandInterpreter'](),_0x5da58b=VisuMZ['CreateActionSequenceTargets'](_0x2e6e35['Targets']),_0x2c9e9b=_0x2e6e35[_0x43fc56(0x5db)],_0x44b163=_0x2e6e35[_0x43fc56(0x741)],_0x555a67=_0x2e6e35['DistanceY'],_0x4e5da1=_0x2e6e35[_0x43fc56(0x178)],_0x921519=_0x2e6e35['FaceDirection'],_0x3a56b3=_0x2e6e35['EasingType'],_0x232f2d=_0x2e6e35[_0x43fc56(0x174)],_0x20e1a0=_0x2e6e35[_0x43fc56(0x5fe)];if(!_0xec60c1)return;for(const _0x2b8b50 of _0x5da58b){if(!_0x2b8b50)continue;let _0x1d8d3e=_0x44b163,_0x44bb07=_0x555a67;if(_0x2c9e9b[_0x43fc56(0x844)](/horz/i))_0x1d8d3e*=_0x2b8b50[_0x43fc56(0xb9d)]()?-0x1:0x1;if(_0x2c9e9b[_0x43fc56(0x844)](/vert/i))_0x44bb07*=_0x2b8b50[_0x43fc56(0xb9d)]()?-0x1:0x1;_0x2b8b50['moveBattlerDistance'](_0x1d8d3e,_0x44bb07,_0x4e5da1,_0x921519,_0x3a56b3),_0x2b8b50[_0x43fc56(0x6cf)](_0x232f2d);}if(_0x20e1a0)_0xec60c1['setWaitMode'](_0x43fc56(0xa83));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],'ActSeq_Movement_MoveToJsPoint',_0x196464=>{const _0x23727b=_0x4376f0;if(!SceneManager[_0x23727b(0x446)]())return;if(!$gameSystem[_0x23727b(0x245)]())return;VisuMZ[_0x23727b(0xa93)](_0x196464,_0x196464);const _0xb7d273=$gameTemp[_0x23727b(0x3c4)](),_0x21fac5=VisuMZ[_0x23727b(0xa0d)](_0x196464[_0x23727b(0x88c)]),_0x25beed=_0x196464['OffsetAdjust'],_0x3c4e27=_0x196464[_0x23727b(0x1d2)],_0x39642f=_0x196464[_0x23727b(0x692)],_0x2fc294=_0x196464[_0x23727b(0x178)],_0x3ad105=_0x196464[_0x23727b(0x5a2)],_0x401080=_0x196464['EasingType'],_0x5a78ef=_0x196464['MotionType'],_0x4df170=_0x196464[_0x23727b(0x5fe)];if(!_0xb7d273)return;for(const _0x48542b of _0x21fac5){if(!_0x48542b)continue;const _0x36a3b8=_0x196464[_0x23727b(0x222)](_0x48542b)||{'x':0x0,'y':0x0};let _0x5f408c=_0x36a3b8['x'],_0x46b57a=_0x36a3b8['y'];if(_0x25beed[_0x23727b(0x844)](/none/i))_0x5f408c+=_0x3c4e27,_0x46b57a+=_0x39642f;else{if(_0x25beed[_0x23727b(0x844)](/horz/i)&&_0x25beed[_0x23727b(0x844)](/vert/i))_0x5f408c+=_0x48542b[_0x23727b(0xb9d)]()?-_0x3c4e27:_0x3c4e27,_0x46b57a+=_0x48542b[_0x23727b(0xb9d)]()?-_0x39642f:_0x39642f;else{if(_0x25beed['match'](/horz/i))_0x5f408c+=_0x48542b[_0x23727b(0xb9d)]()?-_0x3c4e27:_0x3c4e27,_0x46b57a+=_0x39642f;else _0x25beed['match'](/vert/i)&&(_0x5f408c+=_0x3c4e27,_0x46b57a+=_0x48542b['isActor']()?-_0x39642f:_0x39642f);}}_0x48542b[_0x23727b(0x77d)](_0x5f408c,_0x46b57a,_0x2fc294,_0x3ad105,_0x401080,-0x1),_0x48542b[_0x23727b(0x6cf)](_0x5a78ef);}if(_0x4df170)_0xb7d273[_0x23727b(0x8d7)](_0x23727b(0xa83));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Movement_MoveToPoint',_0x50309a=>{const _0x2387fe=_0x4376f0;if(!SceneManager[_0x2387fe(0x446)]())return;if(!$gameSystem[_0x2387fe(0x245)]())return;VisuMZ['ConvertParams'](_0x50309a,_0x50309a);const _0xf26c92=$gameTemp['getLastPluginCommandInterpreter'](),_0xc5a67b=VisuMZ['CreateActionSequenceTargets'](_0x50309a['Targets']),_0x4e82eb=_0x50309a['Destination'],_0x3bd4f8=_0x50309a[_0x2387fe(0xb8f)],_0x17395b=_0x50309a[_0x2387fe(0x1d2)],_0x239baa=_0x50309a[_0x2387fe(0x692)],_0x20b8e8=_0x50309a[_0x2387fe(0x178)],_0x5b81e3=_0x50309a[_0x2387fe(0x5a2)],_0x1f695a=_0x50309a['EasingType'],_0x1c1964=_0x50309a['MotionType'],_0x57cf21=_0x50309a[_0x2387fe(0x5fe)];if(!_0xf26c92)return;for(const _0x45ba0e of _0xc5a67b){if(!_0x45ba0e)continue;let _0xe44597=_0x45ba0e[_0x2387fe(0x3f1)]()[_0x2387fe(0x4f3)],_0x3f5eff=_0x45ba0e[_0x2387fe(0x3f1)]()['_baseY'];if(_0x4e82eb[_0x2387fe(0x844)](/home/i))_0xe44597=_0x45ba0e[_0x2387fe(0x3f1)]()[_0x2387fe(0x6e9)],_0x3f5eff=_0x45ba0e['battler']()[_0x2387fe(0x62b)];else{if(_0x4e82eb[_0x2387fe(0x844)](/center/i))_0xe44597=Graphics[_0x2387fe(0x375)]/0x2,_0x3f5eff=Graphics[_0x2387fe(0x21b)]/0x2;else _0x4e82eb[_0x2387fe(0x844)](/point (\d+), (\d+)/i)&&(_0xe44597=Number(RegExp['$1']),_0x3f5eff=Number(RegExp['$2']));}if(_0x3bd4f8['match'](/none/i))_0xe44597+=_0x17395b,_0x3f5eff+=_0x239baa;else{if(_0x3bd4f8[_0x2387fe(0x844)](/horz/i)&&_0x3bd4f8['match'](/vert/i))_0xe44597+=_0x45ba0e[_0x2387fe(0xb9d)]()?-_0x17395b:_0x17395b,_0x3f5eff+=_0x45ba0e['isActor']()?-_0x239baa:_0x239baa;else{if(_0x3bd4f8['match'](/horz/i))_0xe44597+=_0x45ba0e['isActor']()?-_0x17395b:_0x17395b,_0x3f5eff+=_0x239baa;else _0x3bd4f8[_0x2387fe(0x844)](/vert/i)&&(_0xe44597+=_0x17395b,_0x3f5eff+=_0x45ba0e[_0x2387fe(0xb9d)]()?-_0x239baa:_0x239baa);}}_0x45ba0e[_0x2387fe(0x77d)](_0xe44597,_0x3f5eff,_0x20b8e8,_0x5b81e3,_0x1f695a,-0x1),_0x45ba0e[_0x2387fe(0x6cf)](_0x1c1964);}if(_0x57cf21)_0xf26c92[_0x2387fe(0x8d7)](_0x2387fe(0xa83));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0xbc4),_0x2d0708=>{const _0x21836e=_0x4376f0;if(!SceneManager[_0x21836e(0x446)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x21836e(0xa93)](_0x2d0708,_0x2d0708);const _0x10fe3b=$gameTemp[_0x21836e(0x3c4)](),_0x4503a4=VisuMZ[_0x21836e(0xa0d)](_0x2d0708['Targets1']),_0x111d44=VisuMZ[_0x21836e(0xa0d)](_0x2d0708[_0x21836e(0xb72)]),_0x8e1603=_0x2d0708[_0x21836e(0x4ad)];let _0x173a67=_0x2d0708[_0x21836e(0x6f2)];const _0x544715=_0x2d0708[_0x21836e(0xb8f)],_0x55dd80=_0x2d0708[_0x21836e(0x1d2)],_0x3e6a09=_0x2d0708[_0x21836e(0x692)],_0x53659f=_0x2d0708[_0x21836e(0x178)],_0x1f26f3=_0x2d0708[_0x21836e(0x5a2)],_0x83eda4=_0x2d0708[_0x21836e(0x6b1)],_0x3a8078=_0x2d0708[_0x21836e(0x174)],_0x50ebde=_0x2d0708[_0x21836e(0x5fe)],_0x165268=Math[_0x21836e(0x136)](..._0x111d44[_0x21836e(0x424)](_0x386da3=>_0x386da3[_0x21836e(0x3f1)]()['_baseX']-_0x386da3[_0x21836e(0x3f1)]()[_0x21836e(0x126)]()/0x2)),_0x136b69=Math[_0x21836e(0xa63)](..._0x111d44[_0x21836e(0x424)](_0x1cc02b=>_0x1cc02b[_0x21836e(0x3f1)]()[_0x21836e(0x4f3)]+_0x1cc02b[_0x21836e(0x3f1)]()[_0x21836e(0x126)]()/0x2)),_0x2ddff4=Math[_0x21836e(0x136)](..._0x111d44[_0x21836e(0x424)](_0xa570ab=>_0xa570ab[_0x21836e(0x3f1)]()['_baseY']-_0xa570ab[_0x21836e(0x3f1)]()[_0x21836e(0x832)]())),_0x11a588=Math[_0x21836e(0xa63)](..._0x111d44[_0x21836e(0x424)](_0x44f77f=>_0x44f77f[_0x21836e(0x3f1)]()[_0x21836e(0x90f)])),_0x12c1c2=_0x111d44['filter'](_0x2c46ce=>_0x2c46ce['isActor']())[_0x21836e(0xa3a)],_0x17e5bd=_0x111d44[_0x21836e(0x4bd)](_0x28c213=>_0x28c213[_0x21836e(0x7b4)]())['length'];let _0x465d66=0x0,_0x4eeb12=0x0;if(_0x8e1603[_0x21836e(0x844)](/front/i))_0x465d66=_0x12c1c2>=_0x17e5bd?_0x165268:_0x136b69;else{if(_0x8e1603[_0x21836e(0x844)](/middle/i))_0x465d66=(_0x165268+_0x136b69)/0x2,_0x173a67=-0x1;else _0x8e1603['match'](/back/i)&&(_0x465d66=_0x12c1c2>=_0x17e5bd?_0x136b69:_0x165268);}if(_0x8e1603[_0x21836e(0x844)](/head/i))_0x4eeb12=_0x2ddff4;else{if(_0x8e1603[_0x21836e(0x844)](/center/i))_0x4eeb12=(_0x2ddff4+_0x11a588)/0x2;else _0x8e1603[_0x21836e(0x844)](/base/i)&&(_0x4eeb12=_0x11a588);}if(!_0x10fe3b)return;for(const _0x3c394b of _0x4503a4){if(!_0x3c394b)continue;let _0x556dfd=_0x465d66,_0x289e4e=_0x4eeb12;if(_0x544715[_0x21836e(0x844)](/none/i))_0x556dfd+=_0x55dd80,_0x289e4e+=_0x3e6a09;else{if(_0x544715[_0x21836e(0x844)](/horz/i)&&_0x544715['match'](/vert/i))_0x556dfd+=_0x3c394b[_0x21836e(0xb9d)]()?-_0x55dd80:_0x55dd80,_0x289e4e+=_0x3c394b[_0x21836e(0xb9d)]()?-_0x3e6a09:_0x3e6a09;else{if(_0x544715[_0x21836e(0x844)](/horz/i))_0x556dfd+=_0x3c394b['isActor']()?-_0x55dd80:_0x55dd80,_0x289e4e+=_0x3e6a09;else _0x544715[_0x21836e(0x844)](/vert/i)&&(_0x556dfd+=_0x55dd80,_0x289e4e+=_0x3c394b['isActor']()?-_0x3e6a09:_0x3e6a09);}}_0x3c394b[_0x21836e(0x77d)](_0x556dfd,_0x289e4e,_0x53659f,_0x1f26f3,_0x83eda4,_0x173a67),_0x3c394b[_0x21836e(0x6cf)](_0x3a8078);}if(_0x50ebde)_0x10fe3b[_0x21836e(0x8d7)]('battleMove');}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x2c5),_0x1d6afc=>{const _0x53bc22=_0x4376f0;if(!SceneManager[_0x53bc22(0x446)]())return;VisuMZ[_0x53bc22(0xa93)](_0x1d6afc,_0x1d6afc);const _0x522c77=$gameTemp[_0x53bc22(0x3c4)](),_0x227d69=VisuMZ[_0x53bc22(0xa0d)](_0x1d6afc[_0x53bc22(0x88c)]),_0x4f906d=_0x1d6afc[_0x53bc22(0x51f)],_0x53bdb9=_0x1d6afc[_0x53bc22(0x178)],_0x132066=_0x1d6afc[_0x53bc22(0x6b1)],_0x5a6556=_0x1d6afc[_0x53bc22(0x744)];if(!_0x522c77)return;for(const _0x5e8daf of _0x227d69){if(!_0x5e8daf)continue;_0x5e8daf['changeBattlerOpacity'](_0x4f906d,_0x53bdb9,_0x132066);}if(_0x5a6556)_0x522c77[_0x53bc22(0x8d7)]('battleOpacity');}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0xac4),_0xb55828=>{const _0x7efe49=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x7efe49(0xa93)](_0xb55828,_0xb55828);const _0x3fd700=$gameTemp[_0x7efe49(0x3c4)](),_0x5e7cc9=VisuMZ[_0x7efe49(0xa0d)](_0xb55828['Targets']),_0x219e7f=_0xb55828['ScaleX'],_0x28875f=_0xb55828[_0x7efe49(0xc43)],_0x577838=_0xb55828[_0x7efe49(0x178)],_0x5a7513=_0xb55828[_0x7efe49(0x6b1)],_0x152f16=_0xb55828[_0x7efe49(0x3aa)];if(!_0x3fd700)return;for(const _0x364fa1 of _0x5e7cc9){if(!_0x364fa1)continue;_0x364fa1[_0x7efe49(0x87e)](_0x219e7f,_0x28875f,_0x577838,_0x5a7513);}if(_0x152f16)_0x3fd700[_0x7efe49(0x8d7)](_0x7efe49(0x2cb));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x791),_0x20ea7c=>{const _0x1f9764=_0x4376f0;if(!SceneManager[_0x1f9764(0x446)]())return;VisuMZ[_0x1f9764(0xa93)](_0x20ea7c,_0x20ea7c);const _0x1f4c3c=$gameTemp['getLastPluginCommandInterpreter'](),_0x5cb574=VisuMZ['CreateActionSequenceTargets'](_0x20ea7c[_0x1f9764(0x88c)]),_0x382587=_0x20ea7c['SkewX'],_0x50dd74=_0x20ea7c['SkewY'],_0x8f51fb=_0x20ea7c['Duration'],_0x34dd6a=_0x20ea7c[_0x1f9764(0x6b1)],_0x4ecaf1=_0x20ea7c[_0x1f9764(0x464)];if(!_0x1f4c3c)return;for(const _0x1f697a of _0x5cb574){if(!_0x1f697a)continue;_0x1f697a[_0x1f9764(0xacf)](_0x382587,_0x50dd74,_0x8f51fb,_0x34dd6a);}if(_0x4ecaf1)_0x1f4c3c['setWaitMode'](_0x1f9764(0xba6));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x59e),_0x37f3af=>{const _0x557be9=_0x4376f0;if(!SceneManager[_0x557be9(0x446)]())return;VisuMZ[_0x557be9(0xa93)](_0x37f3af,_0x37f3af);const _0x24f1af=$gameTemp[_0x557be9(0x3c4)](),_0x5562b3=VisuMZ[_0x557be9(0xa0d)](_0x37f3af[_0x557be9(0x88c)]),_0xff4eef=_0x37f3af[_0x557be9(0x120)],_0x353f15=_0x37f3af['Duration'],_0x4349b7=_0x37f3af[_0x557be9(0x6b1)],_0x554923=_0x37f3af[_0x557be9(0xb5e)],_0x1fbc79=_0x37f3af[_0x557be9(0xa8a)];if(!_0x24f1af)return;for(const _0x1b2467 of _0x5562b3){if(!_0x1b2467)continue;_0x1b2467[_0x557be9(0x9aa)](_0xff4eef,_0x353f15,_0x4349b7,_0x554923);}if(_0x1fbc79)_0x24f1af[_0x557be9(0x8d7)](_0x557be9(0x703));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x746),_0x15b8fb=>{const _0x5d871e=_0x4376f0;if(!SceneManager[_0x5d871e(0x446)]())return;const _0x5caf93=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5caf93)return;_0x5caf93['setWaitMode'](_0x5d871e(0x290));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x864),_0x377cbf=>{const _0x3f2619=_0x4376f0;if(!SceneManager['isSceneBattle']())return;const _0x3958fd=$gameTemp[_0x3f2619(0x3c4)]();if(!_0x3958fd)return;_0x3958fd[_0x3f2619(0x8d7)](_0x3f2619(0xaa5));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x6da),_0x2b9f57=>{const _0x3f910e=_0x4376f0;if(!SceneManager[_0x3f910e(0x446)]())return;const _0x4922e7=$gameTemp[_0x3f910e(0x3c4)]();if(!_0x4922e7)return;_0x4922e7['setWaitMode'](_0x3f910e(0xa83));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x128),_0x4f7128=>{const _0x495abd=_0x4376f0;if(!SceneManager[_0x495abd(0x446)]())return;const _0xb467cd=$gameTemp[_0x495abd(0x3c4)]();if(!_0xb467cd)return;_0xb467cd[_0x495abd(0x8d7)](_0x495abd(0x43c));}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x7e0),_0x598d0c=>{const _0x5d7e7f=_0x4376f0;if(!SceneManager['isSceneBattle']())return;const _0x3256e7=$gameTemp[_0x5d7e7f(0x3c4)]();if(!_0x3256e7)return;_0x3256e7[_0x5d7e7f(0x8d7)](_0x5d7e7f(0x2cb));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x1a3),_0x4edad6=>{const _0xaec9ba=_0x4376f0;if(!SceneManager[_0xaec9ba(0x446)]())return;const _0xa37971=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xa37971)return;_0xa37971[_0xaec9ba(0x8d7)](_0xaec9ba(0xba6));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x30b),_0x4070c8=>{const _0x2c8998=_0x4376f0;if(!SceneManager['isSceneBattle']())return;const _0x3754ea=$gameTemp[_0x2c8998(0x3c4)]();if(!_0x3754ea)return;_0x3754ea['setWaitMode'](_0x2c8998(0x703));}),VisuMZ['BattleCore'][_0x4376f0(0x2f1)]=function(){const _0x8eee88=_0x4376f0;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;if(VisuMZ[_0x8eee88(0x40b)][_0x8eee88(0x351)]<1.08){let _0x577efc='';_0x577efc+=_0x8eee88(0x35b),_0x577efc+=_0x8eee88(0x800),alert(_0x577efc),SceneManager['exit']();}},PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x1c8),_0x5740ba=>{const _0x554d87=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x554d87(0x27d)])return;VisuMZ[_0x554d87(0xa93)](_0x5740ba,_0x5740ba),VisuMZ[_0x554d87(0x19c)][_0x554d87(0x2f1)]();const _0x4fee05=$gameTemp['getLastPluginCommandInterpreter'](),_0x4d95ec=_0x5740ba['WaitForProjectile'];if(!_0x4fee05)return;const _0x389db5=BattleManager[_0x554d87(0x86d)];if(!_0x389db5)return;_0x389db5[_0x554d87(0x7a1)](_0x5740ba);if(_0x4d95ec)_0x4fee05[_0x554d87(0x8d7)](_0x554d87(0xc35));}),PluginManager[_0x4376f0(0x315)](pluginData['name'],_0x4376f0(0x82e),_0x5bd80a=>{const _0x415a3b=_0x4376f0;if(!SceneManager[_0x415a3b(0x446)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x415a3b(0xa93)](_0x5bd80a,_0x5bd80a),VisuMZ[_0x415a3b(0x19c)][_0x415a3b(0x2f1)]();const _0x3d91f6=$gameTemp[_0x415a3b(0x3c4)](),_0x29573e=_0x5bd80a[_0x415a3b(0x346)];if(!_0x3d91f6)return;const _0x5669ab=BattleManager[_0x415a3b(0x86d)];if(!_0x5669ab)return;_0x5669ab[_0x415a3b(0x7a1)](_0x5bd80a);if(_0x29573e)_0x3d91f6[_0x415a3b(0x8d7)](_0x415a3b(0xc35));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],'ActSeq_Projectile_Picture',_0x29692d=>{const _0x2fa23e=_0x4376f0;if(!SceneManager[_0x2fa23e(0x446)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x2fa23e(0xa93)](_0x29692d,_0x29692d),VisuMZ[_0x2fa23e(0x19c)][_0x2fa23e(0x2f1)]();const _0x555c0a=$gameTemp[_0x2fa23e(0x3c4)](),_0x480b4d=_0x29692d[_0x2fa23e(0x346)];if(!_0x555c0a)return;const _0x2bd38e=BattleManager['_spriteset'];if(!_0x2bd38e)return;_0x2bd38e[_0x2fa23e(0x7a1)](_0x29692d);if(_0x480b4d)_0x555c0a[_0x2fa23e(0x8d7)](_0x2fa23e(0xc35));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x4c5),_0x251697=>{const _0x2e11f3=_0x4376f0;if(!SceneManager[_0x2e11f3(0x446)]())return;if(!Imported[_0x2e11f3(0xae3)])return;VisuMZ[_0x2e11f3(0xa93)](_0x251697,_0x251697);const _0x30b7e3=$gameTemp[_0x2e11f3(0x3c4)](),_0x2ee4c5=_0x251697[_0x2e11f3(0x464)];if(!_0x30b7e3)return;$gameScreen['setBattleSkew'](_0x251697[_0x2e11f3(0x3b8)],_0x251697[_0x2e11f3(0x2b2)],_0x251697[_0x2e11f3(0x178)],_0x251697[_0x2e11f3(0x6b1)]);if(_0x2ee4c5)_0x30b7e3[_0x2e11f3(0x8d7)](_0x2e11f3(0xb00));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x204),_0x1f7eca=>{const _0x41cf86=_0x4376f0;if(!SceneManager[_0x41cf86(0x446)]())return;if(!Imported[_0x41cf86(0xae3)])return;VisuMZ[_0x41cf86(0xa93)](_0x1f7eca,_0x1f7eca);const _0x2bc027=$gameTemp[_0x41cf86(0x3c4)](),_0x2007b5=_0x1f7eca[_0x41cf86(0x464)];if(!_0x2bc027)return;$gameScreen[_0x41cf86(0xb28)](0x0,0x0,_0x1f7eca[_0x41cf86(0x178)],_0x1f7eca[_0x41cf86(0x6b1)]);if(_0x2007b5)_0x2bc027[_0x41cf86(0x8d7)](_0x41cf86(0xb00));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Skew_WaitForSkew',_0xaeaac7=>{const _0x368efb=_0x4376f0;if(!SceneManager[_0x368efb(0x446)]())return;if(!Imported[_0x368efb(0xae3)])return;const _0x502852=$gameTemp[_0x368efb(0x3c4)]();if(!_0x502852)return;_0x502852[_0x368efb(0x8d7)]('battleSkew');}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x4db),_0x5b22f9=>{const _0x1c83e3=_0x4376f0;if(!SceneManager[_0x1c83e3(0x446)]())return;VisuMZ[_0x1c83e3(0xa93)](_0x5b22f9,_0x5b22f9);const _0x56d877=$gameTemp[_0x1c83e3(0x3c4)](),_0x160d30=_0x5b22f9[_0x1c83e3(0x5f3)],_0x149c8f=_0x5b22f9[_0x1c83e3(0x513)];if(!_0x56d877)return;BattleManager[_0x1c83e3(0x28c)]=_0x160d30,BattleManager['_target']=BattleManager[_0x1c83e3(0x610)]?BattleManager['_allTargets'][BattleManager[_0x1c83e3(0x28c)]]||null:null;if(window[_0x1c83e3(0x8a0)])BattleManager[_0x1c83e3(0x6f0)]();BattleManager[_0x1c83e3(0x961)]&&_0x149c8f[_0x1c83e3(0x896)]()[_0x1c83e3(0x5cf)]()!=='UNTITLED'&&_0x56d877[_0x1c83e3(0x318)]([_0x149c8f]);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x94e),_0x1d25a7=>{const _0x10e559=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x10e559(0xa93)](_0x1d25a7,_0x1d25a7);const _0xfa04d3=$gameTemp[_0x10e559(0x3c4)](),_0x57df02=_0x1d25a7['JumpToLabel'];if(!_0xfa04d3)return;BattleManager[_0x10e559(0x28c)]++,BattleManager[_0x10e559(0x961)]=BattleManager[_0x10e559(0x610)][BattleManager['_targetIndex']]||null;if(window[_0x10e559(0x8a0)])BattleManager[_0x10e559(0x6f0)]();BattleManager[_0x10e559(0x961)]&&_0x57df02[_0x10e559(0x896)]()['trim']()!==_0x10e559(0x48c)&&_0xfa04d3[_0x10e559(0x318)]([_0x57df02]);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x262),_0x7b6f61=>{const _0x1f8ee2=_0x4376f0;if(!SceneManager[_0x1f8ee2(0x446)]())return;VisuMZ['ConvertParams'](_0x7b6f61,_0x7b6f61);const _0x3e6722=$gameTemp[_0x1f8ee2(0x3c4)](),_0x5d5a1a=_0x7b6f61[_0x1f8ee2(0x513)];if(!_0x3e6722)return;BattleManager[_0x1f8ee2(0x28c)]--,BattleManager['_target']=BattleManager[_0x1f8ee2(0x610)][BattleManager[_0x1f8ee2(0x28c)]]||null;if(window[_0x1f8ee2(0x8a0)])BattleManager[_0x1f8ee2(0x6f0)]();BattleManager[_0x1f8ee2(0x961)]&&_0x5d5a1a[_0x1f8ee2(0x896)]()['trim']()!==_0x1f8ee2(0x48c)&&_0x3e6722[_0x1f8ee2(0x318)]([_0x5d5a1a]);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Target_RandTarget',_0x45e8c2=>{const _0x10ba74=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x10ba74(0xa93)](_0x45e8c2,_0x45e8c2);const _0x5a6f9e=$gameTemp[_0x10ba74(0x3c4)](),_0x50888f=_0x45e8c2[_0x10ba74(0x64f)],_0x4b799c=_0x45e8c2[_0x10ba74(0x513)];if(!_0x5a6f9e)return;const _0x263bb9=BattleManager[_0x10ba74(0x28c)];for(;;){BattleManager[_0x10ba74(0x28c)]=Math[_0x10ba74(0x96e)](BattleManager['_allTargets'][_0x10ba74(0xa3a)]);if(!_0x50888f)break;if(BattleManager[_0x10ba74(0x28c)]!==_0x263bb9)break;if(BattleManager['_allTargets'][_0x10ba74(0xa3a)]<=0x1){BattleManager[_0x10ba74(0x28c)]=0x0;break;}}BattleManager[_0x10ba74(0x961)]=BattleManager[_0x10ba74(0x610)][BattleManager['_targetIndex']]||null;if(window[_0x10ba74(0x8a0)])BattleManager[_0x10ba74(0x6f0)]();BattleManager[_0x10ba74(0x961)]&&_0x4b799c[_0x10ba74(0x896)]()[_0x10ba74(0x5cf)]()!==_0x10ba74(0x48c)&&_0x5a6f9e[_0x10ba74(0x318)]([_0x4b799c]);}),PluginManager[_0x4376f0(0x315)](pluginData['name'],'ActSeq_BattleVoice_PlayCommonLine',_0x56a737=>{const _0x19ebd2=_0x4376f0;if(!SceneManager[_0x19ebd2(0x446)]())return;if(!Imported[_0x19ebd2(0x352)])return;if(!ConfigManager[_0x19ebd2(0x88a)])return;VisuMZ['ConvertParams'](_0x56a737,_0x56a737);const _0x503b6a=VisuMZ[_0x19ebd2(0xa0d)](_0x56a737[_0x19ebd2(0x88c)]);let _0x17b52d=_0x56a737[_0x19ebd2(0xb02)]||'';for(const _0x395a52 of _0x503b6a){if(!_0x395a52)continue;_0x395a52[_0x19ebd2(0x914)](_0x17b52d);}}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x46f),_0x995bba=>{const _0x1ee112=_0x4376f0;if(!SceneManager[_0x1ee112(0x446)]())return;if(!Imported[_0x1ee112(0x352)])return;if(!ConfigManager[_0x1ee112(0x88a)])return;VisuMZ[_0x1ee112(0xa93)](_0x995bba,_0x995bba);const _0x20acbc=VisuMZ['CreateActionSequenceTargets'](_0x995bba[_0x1ee112(0x88c)]);let _0x3f7092=(_0x995bba['VoiceLineType']||'')+(_0x995bba[_0x1ee112(0x47d)]||'');for(const _0x28aa9e of _0x20acbc){if(!_0x28aa9e)continue;_0x28aa9e[_0x1ee112(0x914)](_0x3f7092);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Weapon_ClearActiveWeapon',_0x5bc9d3=>{const _0x3f33e8=_0x4376f0;if(!SceneManager[_0x3f33e8(0x446)]())return;VisuMZ[_0x3f33e8(0xa93)](_0x5bc9d3,_0x5bc9d3);const _0x4c5f1a=VisuMZ[_0x3f33e8(0xa0d)](_0x5bc9d3[_0x3f33e8(0x88c)]);for(const _0x182c29 of _0x4c5f1a){if(!_0x182c29)continue;if(!_0x182c29[_0x3f33e8(0xb9d)]())continue;_0x182c29[_0x3f33e8(0x4ce)]();}}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x5ee),_0x308b0e=>{const _0x4727d9=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x308b0e,_0x308b0e);const _0x48a4ca=$gameTemp[_0x4727d9(0x3c4)]();let _0x5951c3=![];const _0x2e1701=_0x308b0e['JumpToLabel'],_0x26daf2=VisuMZ['CreateActionSequenceTargets'](_0x308b0e[_0x4727d9(0x88c)]);for(const _0x26b999 of _0x26daf2){if(!_0x26b999)continue;if(!_0x26b999[_0x4727d9(0xb9d)]())continue;_0x26b999[_0x4727d9(0x284)](),_0x26b999[_0x4727d9(0xb7d)]()[_0x4727d9(0xa3a)]>0x0?_0x5951c3=!![]:_0x26b999[_0x4727d9(0x4ce)]();}_0x5951c3&&_0x2e1701[_0x4727d9(0x896)]()[_0x4727d9(0x5cf)]()!==_0x4727d9(0x48c)&&_0x48a4ca[_0x4727d9(0x318)]([_0x2e1701]);}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Weapon_SetActiveWeapon',_0x3ad5ec=>{const _0x456174=_0x4376f0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x456174(0xa93)](_0x3ad5ec,_0x3ad5ec);let _0x1eb24a=_0x3ad5ec[_0x456174(0x7ed)];_0x1eb24a--,_0x1eb24a=Math[_0x456174(0xa63)](_0x1eb24a,0x0);const _0x5c1f1f=VisuMZ[_0x456174(0xa0d)](_0x3ad5ec['Targets']);for(const _0x4a614d of _0x5c1f1f){if(!_0x4a614d)continue;if(!_0x4a614d[_0x456174(0xb9d)]())continue;_0x4a614d[_0x456174(0xa68)](_0x1eb24a);}}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],_0x4376f0(0x3bb),_0x31456d=>{const _0x5e8a7c=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5e8a7c(0xae3)])return;VisuMZ[_0x5e8a7c(0xa93)](_0x31456d,_0x31456d);const _0x21bcfd=$gameTemp[_0x5e8a7c(0x3c4)](),_0x53910d=_0x31456d['WaitForZoom'];if(!_0x21bcfd)return;$gameScreen[_0x5e8a7c(0xbdc)](_0x31456d[_0x5e8a7c(0x7d9)],_0x31456d[_0x5e8a7c(0x178)],_0x31456d[_0x5e8a7c(0x6b1)]);if(_0x53910d)_0x21bcfd[_0x5e8a7c(0x8d7)](_0x5e8a7c(0x205));}),PluginManager['registerCommand'](pluginData[_0x4376f0(0x7d3)],'ActSeq_Zoom_Reset',_0x3a3687=>{const _0x29c520=_0x4376f0;if(!SceneManager[_0x29c520(0x446)]())return;if(!Imported[_0x29c520(0xae3)])return;VisuMZ[_0x29c520(0xa93)](_0x3a3687,_0x3a3687);const _0x573b2e=$gameTemp[_0x29c520(0x3c4)](),_0x324e36=_0x3a3687[_0x29c520(0x987)];if(!_0x573b2e)return;$gameScreen[_0x29c520(0xbdc)](0x1,_0x3a3687['Duration'],_0x3a3687[_0x29c520(0x6b1)]);if(_0x324e36)_0x573b2e[_0x29c520(0x8d7)](_0x29c520(0x205));}),PluginManager[_0x4376f0(0x315)](pluginData[_0x4376f0(0x7d3)],'ActSeq_Zoom_WaitForZoom',_0x4b9f3a=>{const _0x4059ad=_0x4376f0;if(!SceneManager[_0x4059ad(0x446)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x3e38bd=$gameTemp[_0x4059ad(0x3c4)]();if(!_0x3e38bd)return;_0x3e38bd[_0x4059ad(0x8d7)]('battleZoom');}),VisuMZ[_0x4376f0(0x19c)]['Scene_Boot_onDatabaseLoaded']=Scene_Boot['prototype'][_0x4376f0(0x355)],Scene_Boot[_0x4376f0(0x705)]['onDatabaseLoaded']=function(){const _0x4a0571=_0x4376f0;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x4a0571(0x324)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x4a0571(0xb61)](),this[_0x4a0571(0xb2a)](),VisuMZ[_0x4a0571(0x19c)]['Scene_Boot_onDatabaseLoaded']['call'](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x4a0571(0xa84)](),this[_0x4a0571(0xb59)](),this[_0x4a0571(0xba1)]();},Scene_Boot['prototype'][_0x4376f0(0x1ca)]=function(){const _0x49dd52=_0x4376f0;if(VisuMZ['ParseAllNotetags'])return;this[_0x49dd52(0x17a)](),this[_0x49dd52(0x42a)](),this[_0x49dd52(0xc23)]();},Scene_Boot[_0x4376f0(0x705)][_0x4376f0(0x1ea)]=function(){const _0x3f2e94=_0x4376f0,_0x38f5b8=$dataSystem['weaponTypes'][_0x3f2e94(0xa3a)];for(let _0x569304=0x0;_0x569304<_0x38f5b8;_0x569304++){const _0x31b40f=$dataSystem[_0x3f2e94(0x58f)][_0x569304];if(_0x31b40f)continue;$dataSystem[_0x3f2e94(0x58f)][_0x569304]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype'][_0x4376f0(0x324)]=function(){const _0x4bef12=_0x4376f0,_0x5ad94e=VisuMZ['BattleCore'][_0x4bef12(0xae8)];if(!_0x5ad94e[_0x4bef12(0x46a)]['CheckFormulaMechanics']??!![])return;if(!Utils[_0x4bef12(0x16a)]('test'))return;const _0x34468c=$dataSkills[_0x4bef12(0x4f7)]($dataItems);let _0x254597='⚠⚠⚠\x20Warning!\x20⚠⚠⚠\x0a\x0a';_0x254597+=_0x4bef12(0x348),_0x254597+=_0x4bef12(0x27a),_0x254597+='Mechanics\x20in\x20damage\x20formulas\x20cause\x20problems\x20with\x20the\x20following:\x0a\x0a',_0x254597+=_0x4bef12(0x263),_0x254597+=_0x4bef12(0x1cf);for(const _0x34a8a7 of _0x34468c){if(!_0x34a8a7)continue;if(!_0x34a8a7[_0x4bef12(0x121)])continue;if(_0x34a8a7[_0x4bef12(0x121)][_0x4bef12(0x2a6)]<0x1)continue;const _0x179043=_0x34a8a7[_0x4bef12(0x121)][_0x4bef12(0x979)];if(VisuMZ['BattleCore']['CheckDamageFormulaForMechanics'](_0x179043)){const _0x444aca=$dataItems[_0x4bef12(0x3e9)](_0x34a8a7)?_0x4bef12(0x312):_0x4bef12(0x3a2),_0x396c9a=_0x254597['format'](_0x444aca,_0x34a8a7['id'],_0x34a8a7[_0x4bef12(0x7d3)]);alert(_0x396c9a);}}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x53d)]=function(_0x34376b){const _0x38db4a=_0x4376f0;if(_0x34376b[_0x38db4a(0x844)](/\.(?:SETVALUE)\(/i))return!![];if(_0x34376b[_0x38db4a(0x844)](/\.(?:DIE|REVIVE|REFRESH|RECOVERALL)\(/i))return!![];if(_0x34376b[_0x38db4a(0x844)](/\.(?:GAIN|LOSE|ADD|REMOVE|SET|REGENERATE)(?:HP|MP|TP)\(/i))return!![];if(_0x34376b['match'](/\.(?:ADD|ADDNEW|REMOVE|ERASE|INCREASE|DECREASE)(?:BUFF|DEBUFF|STATE)\(/i))return!![];if(_0x34376b['match'](/\.(?:CLEAR|RESET)(?:STATES|PARAMPLUS|ACTIONS|RESULT|TPBCHARGETIME)\(/i))return!![];return![];},Scene_Boot[_0x4376f0(0x705)]['process_VisuMZ_BattleCore_PluginParams']=function(){const _0x3b8189=_0x4376f0,_0x4e40e9=VisuMZ[_0x3b8189(0x19c)][_0x3b8189(0xae8)];_0x4e40e9[_0x3b8189(0x46a)][_0x3b8189(0xc3b)]===undefined&&(_0x4e40e9[_0x3b8189(0x46a)][_0x3b8189(0xc3b)]=_0x3b8189(0x591)),_0x4e40e9[_0x3b8189(0x41c)][_0x3b8189(0xab4)]===undefined&&(_0x4e40e9[_0x3b8189(0x41c)]['SmoothImage']=![]),_0x4e40e9['Enemy'][_0x3b8189(0xab4)]===undefined&&(_0x4e40e9[_0x3b8189(0x653)][_0x3b8189(0xab4)]=!![]),_0x4e40e9['Actor'][_0x3b8189(0x6aa)]===undefined&&(_0x4e40e9[_0x3b8189(0x41c)][_0x3b8189(0x6aa)]=![]),_0x4e40e9['Actor'][_0x3b8189(0x6cc)]===undefined&&(_0x4e40e9['Actor'][_0x3b8189(0x6cc)]=!![]);},VisuMZ[_0x4376f0(0x82d)]={},Scene_Boot[_0x4376f0(0x705)][_0x4376f0(0xb61)]=function(){const _0x5bd685=_0x4376f0;for(const _0x2a40d7 of VisuMZ[_0x5bd685(0x19c)]['Settings']['Damage'][_0x5bd685(0x134)]){if(!_0x2a40d7)continue;const _0x5025f2=_0x2a40d7[_0x5bd685(0x13f)][_0x5bd685(0x896)]()['trim']();VisuMZ[_0x5bd685(0x82d)][_0x5025f2]=_0x2a40d7;}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x13a)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x4376f0(0x705)][_0x4376f0(0xb2a)]=function(){const _0x223766=_0x4376f0,_0x591aba=VisuMZ[_0x223766(0x19c)][_0x223766(0x13a)],_0x2d60a9=_0x223766(0xad3),_0x1356f5=[[_0x223766(0xa23),_0x223766(0x4cf)],[_0x223766(0x4ee),_0x223766(0x52e)]],_0x1a0ee7=[['%1Apply%2JS',_0x223766(0x166)],['%1Damage%2JS',_0x223766(0x8f5)]],_0x231154=[['',''],[_0x223766(0xa91),_0x223766(0x4a8)],[_0x223766(0x8b1),_0x223766(0xb53)]];for(const _0x3a6f4a of _0x1a0ee7){for(const _0x25e3b5 of _0x231154){for(const _0x583872 of _0x1356f5){const _0x39057a=_0x3a6f4a[0x0][_0x223766(0xa30)](_0x583872[0x0],_0x25e3b5[0x0]),_0x39657e=_0x3a6f4a[0x1]['format'](_0x583872[0x1],_0x25e3b5[0x1])[_0x223766(0x5cf)](),_0x250b20=new RegExp(_0x2d60a9['format'](_0x39657e),'i');_0x591aba[_0x39057a]=_0x250b20;}}}const _0x583ce6=[[_0x223766(0x636),'JS\x20%1START\x20ACTION'],[_0x223766(0x76c),'JS\x20%1END\x20ACTION']];for(const _0x28de9e of _0x583ce6){for(const _0x1b59e0 of _0x1356f5){const _0x563cf2=_0x28de9e[0x0]['format'](_0x1b59e0[0x0]),_0x89fe42=_0x28de9e[0x1]['format'](_0x1b59e0[0x1]),_0x588c35=new RegExp(_0x2d60a9[_0x223766(0xa30)](_0x89fe42),'i');_0x591aba[_0x563cf2]=_0x588c35;}}const _0x2f9525=[[_0x223766(0x462),_0x223766(0x264)],[_0x223766(0x268),_0x223766(0x4f2)],[_0x223766(0x63f),_0x223766(0x26d)],[_0x223766(0xb75),'JS\x20BATTLE\x20DEFEAT'],[_0x223766(0x1f4),_0x223766(0x829)],[_0x223766(0x8fb),_0x223766(0xa09)],[_0x223766(0x449),_0x223766(0x919)],[_0x223766(0xa94),_0x223766(0x805)],[_0x223766(0x1b8),_0x223766(0x2e2)]];for(const _0x601461 of _0x2f9525){for(const _0x1d440b of _0x1356f5){const _0x2805a9=_0x601461[0x0]['format'](_0x1d440b[0x0]),_0x1c453b=_0x601461[0x1]['format'](_0x1d440b[0x1]),_0x40a6cc=new RegExp(_0x2d60a9[_0x223766(0xa30)](_0x1c453b),'i');_0x591aba[_0x2805a9]=_0x40a6cc;}}},Scene_Boot['prototype'][_0x4376f0(0x17a)]=function(){const _0x1d3953=_0x4376f0,_0x10ef3b=$dataSkills[_0x1d3953(0x4f7)]($dataItems);for(const _0x355ef8 of _0x10ef3b){if(!_0x355ef8)continue;VisuMZ['BattleCore'][_0x1d3953(0x195)](_0x355ef8);}},Scene_Boot[_0x4376f0(0x705)][_0x4376f0(0x42a)]=function(){const _0x5a1626=_0x4376f0,_0x3159cd=$dataActors[_0x5a1626(0x4f7)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x5ac641 of _0x3159cd){if(!_0x5ac641)continue;VisuMZ[_0x5a1626(0x19c)]['Parse_Notetags_TraitObjects'](_0x5ac641),_0x5ac641['autoRemovalTiming']!==undefined&&VisuMZ[_0x5a1626(0x19c)]['Parse_Notetags_HelpDescription'](_0x5ac641);}},Scene_Boot[_0x4376f0(0x705)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x19accc=_0x4376f0,_0x2a8c2f=VisuMZ[_0x19accc(0x19c)][_0x19accc(0xae8)][_0x19accc(0x956)][_0x19accc(0x3e0)],_0x475c18=[];for(const _0x21cc7e of _0x2a8c2f){const _0x447214=$dataTroops[_0x21cc7e];if(_0x447214)_0x475c18[_0x19accc(0x6b0)](JsonEx[_0x19accc(0xa66)](_0x447214));}for(const _0x140f0e of $dataTroops){if(!_0x140f0e)continue;for(const _0x21e444 of _0x475c18){if(_0x21e444['id']===_0x140f0e['id'])continue;_0x140f0e[_0x19accc(0x493)]=_0x140f0e[_0x19accc(0x493)][_0x19accc(0x4f7)](_0x21e444[_0x19accc(0x493)]);}}},Scene_Boot[_0x4376f0(0x705)][_0x4376f0(0xb59)]=function(){const _0x2a6d62=_0x4376f0,_0x4ce984=VisuMZ['BattleCore']['Settings'][_0x2a6d62(0x956)];if(_0x4ce984[_0x2a6d62(0x213)]>0x0&&$dataCommonEvents[_0x4ce984[_0x2a6d62(0x213)]]){const _0x9a651e=$dataCommonEvents[_0x4ce984[_0x2a6d62(0x213)]],_0x1804f5=_0x9a651e['list'][_0x2a6d62(0xa3a)]-0x2,_0x395658=_0x9a651e['list'][_0x1804f5];if(_0x395658&&_0x395658[_0x2a6d62(0x808)]!==0xe6){const _0x3e1dd7={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x37c238=_0x9a651e[_0x2a6d62(0x438)][_0x2a6d62(0x958)]();_0x9a651e[_0x2a6d62(0x438)][_0x2a6d62(0xc0b)](_0x3e1dd7),_0x9a651e[_0x2a6d62(0x438)][_0x2a6d62(0xc0b)](_0x37c238);}}},Scene_Boot['prototype'][_0x4376f0(0xba1)]=function(){const _0x1fc936=_0x4376f0;VisuMZ[_0x1fc936(0x19c)][_0x1fc936(0x164)](),VisuMZ[_0x1fc936(0x19c)][_0x1fc936(0xc4c)]($dataSkills),VisuMZ['BattleCore'][_0x1fc936(0xc4c)]($dataItems);},VisuMZ[_0x4376f0(0x19c)]['CreateCommonEventKeys']=function(){const _0x57f0b5=_0x4376f0;VisuMZ[_0x57f0b5(0x19c)][_0x57f0b5(0xac2)]={};for(const _0x4d2abe of $dataCommonEvents){if(!_0x4d2abe)continue;if(_0x4d2abe[_0x57f0b5(0x7d3)]['match'](/\[(.*)\]/i)){let _0x4f5a0f=String(RegExp['$1'])[_0x57f0b5(0x6f6)](/,/g,'')['toUpperCase']()[_0x57f0b5(0x5cf)]();VisuMZ[_0x57f0b5(0x19c)][_0x57f0b5(0xac2)][_0x4f5a0f]=_0x4d2abe['id'];}}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xc4c)]=function(_0x3fa03d){const _0xb97d97=_0x4376f0;for(const _0x4e10e6 of _0x3fa03d){if(!_0x4e10e6)continue;VisuMZ[_0xb97d97(0x19c)]['BindCommonEventKeysForObj'](_0x4e10e6);}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x933)]=function(_0x43516f){const _0x7ed26e=_0x4376f0;if(!_0x43516f)return;if(!_0x43516f[_0x7ed26e(0xa1a)])return;VisuMZ[_0x7ed26e(0x19c)]['_commonEventKey']=VisuMZ['BattleCore'][_0x7ed26e(0xac2)]||{};const _0x393260=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x4e1384=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x5050ad=[];const _0x223820=_0x43516f['note']['match'](_0x393260);if(_0x223820){for(const _0x17136e of _0x223820){_0x17136e[_0x7ed26e(0x844)](_0x393260);const _0xaa3ef3=String(RegExp['$1'])['split'](',')['map'](_0x38ead3=>String(_0x38ead3)[_0x7ed26e(0x896)]()['trim']());_0x5050ad=_0x5050ad[_0x7ed26e(0x4f7)](_0xaa3ef3);}!_0x43516f[_0x7ed26e(0x54f)][_0x7ed26e(0x844)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x43516f[_0x7ed26e(0x54f)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}if(_0x43516f[_0x7ed26e(0x54f)][_0x7ed26e(0x844)](_0x4e1384)){const _0x57757b=String(RegExp['$1'])[_0x7ed26e(0x597)](/[\r\n]+/)[_0x7ed26e(0x424)](_0x512ee2=>String(_0x512ee2)[_0x7ed26e(0x896)]()[_0x7ed26e(0x5cf)]());_0x5050ad=_0x5050ad[_0x7ed26e(0x4f7)](_0x57757b);!_0x43516f[_0x7ed26e(0x54f)][_0x7ed26e(0x844)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x43516f[_0x7ed26e(0x54f)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}for(const _0xe34e92 of _0x5050ad){if(VisuMZ[_0x7ed26e(0x19c)][_0x7ed26e(0xac2)][_0xe34e92]){const _0x24a7ca=VisuMZ[_0x7ed26e(0x19c)][_0x7ed26e(0xac2)][_0xe34e92],_0x166493={'code':0x2c,'dataId':_0x24a7ca,'value1':0x1,'value2':0x0};_0x43516f[_0x7ed26e(0xa1a)][_0x7ed26e(0x6b0)](_0x166493);}}},Scene_Boot[_0x4376f0(0x705)][_0x4376f0(0xc23)]=function(){const _0x10ecd8=_0x4376f0,_0x2b3e1b=$dataSkills[_0x10ecd8(0x4f7)]($dataItems);for(const _0x651ef1 of _0x2b3e1b){if(!_0x651ef1)continue;VisuMZ[_0x10ecd8(0x19c)][_0x10ecd8(0x20a)](_0x651ef1);}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x3c3)]=VisuMZ[_0x4376f0(0x3c3)],VisuMZ['ParseActorNotetags']=function(_0x52cef3){const _0x169d75=_0x4376f0;VisuMZ[_0x169d75(0x19c)]['ParseActorNotetags']&&VisuMZ[_0x169d75(0x19c)][_0x169d75(0x3c3)][_0x169d75(0x34b)](this,_0x52cef3),VisuMZ[_0x169d75(0x19c)]['Parse_Notetags_TraitObjects'](_0x52cef3);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xbb5)]=VisuMZ['ParseClassNotetags'],VisuMZ[_0x4376f0(0xbb5)]=function(_0x1d1bff){const _0x2c1092=_0x4376f0;VisuMZ[_0x2c1092(0x19c)][_0x2c1092(0xbb5)]&&VisuMZ['BattleCore'][_0x2c1092(0xbb5)][_0x2c1092(0x34b)](this,_0x1d1bff),VisuMZ[_0x2c1092(0x19c)][_0x2c1092(0x334)](_0x1d1bff);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x75c)]=VisuMZ['ParseSkillNotetags'],VisuMZ['ParseSkillNotetags']=function(_0x21415b){const _0x1a04c1=_0x4376f0;VisuMZ[_0x1a04c1(0x19c)][_0x1a04c1(0x75c)]&&VisuMZ['BattleCore']['ParseSkillNotetags']['call'](this,_0x21415b),VisuMZ[_0x1a04c1(0x19c)][_0x1a04c1(0x195)](_0x21415b),VisuMZ['BattleCore'][_0x1a04c1(0x20a)](_0x21415b);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x71c)]=VisuMZ[_0x4376f0(0x71c)],VisuMZ[_0x4376f0(0x71c)]=function(_0x4bde97){const _0xb84271=_0x4376f0;VisuMZ[_0xb84271(0x19c)][_0xb84271(0x71c)]&&VisuMZ[_0xb84271(0x19c)][_0xb84271(0x71c)][_0xb84271(0x34b)](this,_0x4bde97),VisuMZ['BattleCore'][_0xb84271(0x195)](_0x4bde97),VisuMZ[_0xb84271(0x19c)]['Parse_Notetags_Targets'](_0x4bde97);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa46)]=VisuMZ[_0x4376f0(0xa46)],VisuMZ[_0x4376f0(0xa46)]=function(_0x33e7ac){const _0x2677d5=_0x4376f0;VisuMZ['BattleCore'][_0x2677d5(0xa46)]&&VisuMZ['BattleCore'][_0x2677d5(0xa46)][_0x2677d5(0x34b)](this,_0x33e7ac),VisuMZ[_0x2677d5(0x19c)]['Parse_Notetags_TraitObjects'](_0x33e7ac);},VisuMZ[_0x4376f0(0x19c)]['ParseArmorNotetags']=VisuMZ[_0x4376f0(0x7b7)],VisuMZ[_0x4376f0(0x7b7)]=function(_0x2b4119){const _0x22664a=_0x4376f0;VisuMZ['BattleCore']['ParseArmorNotetags']&&VisuMZ['BattleCore'][_0x22664a(0x7b7)][_0x22664a(0x34b)](this,_0x2b4119),VisuMZ[_0x22664a(0x19c)]['Parse_Notetags_TraitObjects'](_0x2b4119);},VisuMZ['BattleCore']['ParseEnemyNotetags']=VisuMZ[_0x4376f0(0x9a6)],VisuMZ[_0x4376f0(0x9a6)]=function(_0x1eb143){const _0x3f82ef=_0x4376f0;VisuMZ['BattleCore']['ParseEnemyNotetags']&&VisuMZ[_0x3f82ef(0x19c)][_0x3f82ef(0x9a6)][_0x3f82ef(0x34b)](this,_0x1eb143),VisuMZ['BattleCore'][_0x3f82ef(0x334)](_0x1eb143);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa2d)]=VisuMZ['ParseStateNotetags'],VisuMZ['ParseStateNotetags']=function(_0x43bb5c){const _0x2c6adf=_0x4376f0;VisuMZ[_0x2c6adf(0x19c)][_0x2c6adf(0xa2d)]&&VisuMZ['BattleCore'][_0x2c6adf(0xa2d)][_0x2c6adf(0x34b)](this,_0x43bb5c),VisuMZ[_0x2c6adf(0x19c)][_0x2c6adf(0x334)](_0x43bb5c),VisuMZ['BattleCore'][_0x2c6adf(0xb6e)](_0x43bb5c);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x195)]=function(_0x37bd86){const _0x3a3397=_0x4376f0,_0x3b8f16=[_0x3a3397(0x9ea),_0x3a3397(0x9f2),_0x3a3397(0x582),_0x3a3397(0x688),_0x3a3397(0x85a),'PostStartActionJS',_0x3a3397(0x8ed),_0x3a3397(0xa77)];for(const _0x32f2e1 of _0x3b8f16){VisuMZ[_0x3a3397(0x19c)]['createJS'](_0x37bd86,_0x32f2e1);}const _0x12ebea=_0x37bd86[_0x3a3397(0x54f)];_0x12ebea[_0x3a3397(0x844)](/<ALWAYS CRITICAL/i)&&(_0x37bd86[_0x3a3397(0x121)][_0x3a3397(0x2f0)]=!![]),_0x12ebea[_0x3a3397(0x844)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x37bd86[_0x3a3397(0x7cd)]=Math[_0x3a3397(0xa63)](0x1,Number(RegExp['$1']))),_0x12ebea[_0x3a3397(0x844)](/<TARGET:[ ](.*)>/i)&&(_0x37bd86['scope']=String(RegExp['$1'])[_0x3a3397(0x896)]()[_0x3a3397(0x5cf)]());},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x334)]=function(_0x48ec67){const _0x4e7c3d=_0x4376f0,_0xdca2d5=['PreApplyAsUserJS',_0x4e7c3d(0x156),'PreDamageAsUserJS',_0x4e7c3d(0x60e),_0x4e7c3d(0x58b),_0x4e7c3d(0x755),_0x4e7c3d(0xbad),_0x4e7c3d(0xadd),_0x4e7c3d(0x85a),_0x4e7c3d(0x75e),'PreEndActionJS','PostEndActionJS',_0x4e7c3d(0x927),_0x4e7c3d(0x291),_0x4e7c3d(0x44d),_0x4e7c3d(0x59d),_0x4e7c3d(0x63f),_0x4e7c3d(0xb75),_0x4e7c3d(0x1f4),_0x4e7c3d(0x8fb),'PreStartTurnJS',_0x4e7c3d(0xa59),_0x4e7c3d(0x79e),'PostEndTurnJS',_0x4e7c3d(0x6bd),_0x4e7c3d(0xa74)];for(const _0x4909f1 of _0xdca2d5){VisuMZ[_0x4e7c3d(0x19c)][_0x4e7c3d(0x7a4)](_0x48ec67,_0x4909f1);}const _0xab05dc=[_0x4e7c3d(0x8cc),_0x4e7c3d(0xc14),_0x4e7c3d(0x894),_0x4e7c3d(0x467),'jsCritRateAsTarget'];for(const _0x4b8775 of _0xab05dc){VisuMZ[_0x4e7c3d(0x19c)][_0x4e7c3d(0x3cc)](_0x48ec67,_0x4b8775);}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x20a)]=function(_0x4585e9){const _0x1638b8=_0x4376f0,_0x2651f3=_0x4585e9['note'];if(_0x2651f3[_0x1638b8(0x844)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x318a6a=String(RegExp['$1']),_0x1bdf54=VisuMZ['BattleCore'][_0x1638b8(0x123)](_0x4585e9,_0x1638b8(0x88c));VisuMZ[_0x1638b8(0x19c)][_0x1638b8(0x34a)](_0x318a6a,_0x1bdf54);}if(_0x2651f3[_0x1638b8(0x844)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x4f6593=String(RegExp['$1']),_0x300b38=VisuMZ['BattleCore'][_0x1638b8(0x123)](_0x4585e9,_0x1638b8(0x415));VisuMZ[_0x1638b8(0x19c)][_0x1638b8(0x31f)](_0x4f6593,_0x300b38);}},VisuMZ[_0x4376f0(0x19c)]['JS']={},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x7a4)]=function(_0x15c9a1,_0x541fab){const _0xf30455=_0x4376f0,_0x16b7df=_0x15c9a1['note'];if(_0x16b7df[_0xf30455(0x844)](VisuMZ[_0xf30455(0x19c)][_0xf30455(0x13a)][_0x541fab])){const _0x5ed8c4=RegExp['$1'],_0x1206e3=_0xf30455(0x7e7)[_0xf30455(0xa30)](_0x5ed8c4),_0x2b09db=VisuMZ[_0xf30455(0x19c)][_0xf30455(0x123)](_0x15c9a1,_0x541fab);VisuMZ[_0xf30455(0x19c)]['JS'][_0x2b09db]=new Function(_0x1206e3);}},VisuMZ[_0x4376f0(0x19c)]['createKeyJS']=function(_0x2f1dc4,_0x3d36ad){const _0x3a5ed0=_0x4376f0;if(VisuMZ[_0x3a5ed0(0x123)])return VisuMZ[_0x3a5ed0(0x123)](_0x2f1dc4,_0x3d36ad);let _0x1a1c11='';if($dataActors[_0x3a5ed0(0x3e9)](_0x2f1dc4))_0x1a1c11='Actor-%1-%2'[_0x3a5ed0(0xa30)](_0x2f1dc4['id'],_0x3d36ad);if($dataClasses[_0x3a5ed0(0x3e9)](_0x2f1dc4))_0x1a1c11=_0x3a5ed0(0xbfb)[_0x3a5ed0(0xa30)](_0x2f1dc4['id'],_0x3d36ad);if($dataSkills[_0x3a5ed0(0x3e9)](_0x2f1dc4))_0x1a1c11='Skill-%1-%2'[_0x3a5ed0(0xa30)](_0x2f1dc4['id'],_0x3d36ad);if($dataItems[_0x3a5ed0(0x3e9)](_0x2f1dc4))_0x1a1c11=_0x3a5ed0(0x954)['format'](_0x2f1dc4['id'],_0x3d36ad);if($dataWeapons[_0x3a5ed0(0x3e9)](_0x2f1dc4))_0x1a1c11=_0x3a5ed0(0x3ef)['format'](_0x2f1dc4['id'],_0x3d36ad);if($dataArmors[_0x3a5ed0(0x3e9)](_0x2f1dc4))_0x1a1c11=_0x3a5ed0(0x2d6)[_0x3a5ed0(0xa30)](_0x2f1dc4['id'],_0x3d36ad);if($dataEnemies[_0x3a5ed0(0x3e9)](_0x2f1dc4))_0x1a1c11=_0x3a5ed0(0x2df)['format'](_0x2f1dc4['id'],_0x3d36ad);if($dataStates[_0x3a5ed0(0x3e9)](_0x2f1dc4))_0x1a1c11=_0x3a5ed0(0xbf1)[_0x3a5ed0(0xa30)](_0x2f1dc4['id'],_0x3d36ad);return _0x1a1c11;},VisuMZ['BattleCore']['createTargetsJS']=function(_0x16c526,_0x52f708){const _0x488634=_0x4376f0,_0x1a10c4=_0x488634(0xa24)[_0x488634(0xa30)](_0x16c526);VisuMZ[_0x488634(0x19c)]['JS'][_0x52f708]=new Function(_0x1a10c4);},VisuMZ['BattleCore']['createCommandVisibleJS']=function(_0x50f0c0,_0x55c6f2){const _0x5c30c2=_0x4376f0,_0x1c4022=_0x5c30c2(0x469)['format'](_0x50f0c0);VisuMZ[_0x5c30c2(0x19c)]['JS'][_0x55c6f2]=new Function(_0x1c4022);},VisuMZ[_0x4376f0(0x19c)]['createRateJS']=function(_0x2167d8,_0x562284){const _0x1165e1=_0x4376f0,_0x554231=_0x2167d8[_0x1165e1(0x54f)];if(_0x554231[_0x1165e1(0x844)](VisuMZ[_0x1165e1(0x19c)][_0x1165e1(0x13a)][_0x562284])){const _0x1a701d=RegExp['$1'],_0x3645d5=_0x1165e1(0x460)['format'](_0x1a701d),_0x3b5250=VisuMZ[_0x1165e1(0x19c)][_0x1165e1(0x123)](_0x2167d8,_0x562284);VisuMZ[_0x1165e1(0x19c)]['JS'][_0x3b5250]=new Function(_0x3645d5);}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xb6e)]=function(_0x2b40c8){const _0x39372=_0x4376f0;_0x2b40c8[_0x39372(0x7bd)]='-';const _0x4b78e2=_0x2b40c8['note'];_0x4b78e2['match'](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x2b40c8[_0x39372(0x7bd)]=String(RegExp['$1'])[_0x39372(0x5cf)]()),_0x4b78e2[_0x39372(0x844)](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x2b40c8[_0x39372(0x6d9)]=String(RegExp['$1'])[_0x39372(0x5cf)]()),_0x4b78e2[_0x39372(0x844)](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING|STATUS LISTING)>/i)&&(_0x2b40c8[_0x39372(0xb87)]=!![]);},TextManager['autoBattle']=VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x863)][_0x4376f0(0x743)],TextManager[_0x4376f0(0x2c1)]=VisuMZ['BattleCore'][_0x4376f0(0xae8)][_0x4376f0(0x6d8)][_0x4376f0(0x9a2)],TextManager['autoBattleStyle']=VisuMZ[_0x4376f0(0x19c)]['Settings'][_0x4376f0(0x6d8)][_0x4376f0(0x5a4)],TextManager[_0x4376f0(0x259)]=VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x522)][_0x4376f0(0x13f)],ColorManager[_0x4376f0(0xbdb)]=function(_0x389414){const _0x23342c=_0x4376f0;return _0x389414=String(_0x389414),_0x389414[_0x23342c(0x844)](/#(.*)/i)?_0x23342c(0x3b3)[_0x23342c(0xa30)](String(RegExp['$1'])):this[_0x23342c(0x8d2)](Number(_0x389414));},DataManager[_0x4376f0(0x4fe)]=function(_0x1c617b){const _0x535081=_0x4376f0;if(_0x1c617b[_0x535081(0x54f)][_0x535081(0x844)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x58f49b=String(RegExp['$1'])[_0x535081(0x896)]()['trim']();if(_0x58f49b==='MANUAL')return _0x535081(0x1f2);if(VisuMZ[_0x535081(0x82d)][_0x58f49b])return _0x58f49b;}const _0x334680=VisuMZ['BattleCore'][_0x535081(0xae8)][_0x535081(0x46a)]['DefaultDamageStyle']['toUpperCase']()[_0x535081(0x5cf)]();if(VisuMZ[_0x535081(0x82d)][_0x334680])return _0x334680;return'MANUAL';},DataManager[_0x4376f0(0x6a3)]=function(_0x4a5d4d){const _0x1395ce=_0x4376f0;_0x4a5d4d=_0x4a5d4d[_0x1395ce(0x896)]()[_0x1395ce(0x5cf)](),this['_stypeIDs']=this[_0x1395ce(0x1c7)]||{};if(this[_0x1395ce(0x1c7)][_0x4a5d4d])return this[_0x1395ce(0x1c7)][_0x4a5d4d];for(let _0x5541f9=0x1;_0x5541f9<0x64;_0x5541f9++){if(!$dataSystem[_0x1395ce(0x901)][_0x5541f9])continue;let _0xa3cf1b=$dataSystem[_0x1395ce(0x901)][_0x5541f9]['toUpperCase']()[_0x1395ce(0x5cf)]();_0xa3cf1b=_0xa3cf1b[_0x1395ce(0x6f6)](/\x1I\[(\d+)\]/gi,''),_0xa3cf1b=_0xa3cf1b['replace'](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0xa3cf1b]=_0x5541f9;}return this[_0x1395ce(0x1c7)][_0x4a5d4d]||0x0;},DataManager[_0x4376f0(0x94f)]=function(_0x646fcd){const _0x4a551f=_0x4376f0;_0x646fcd=_0x646fcd[_0x4a551f(0x896)]()['trim'](),this[_0x4a551f(0x385)]=this[_0x4a551f(0x385)]||{};if(this[_0x4a551f(0x385)][_0x646fcd])return this[_0x4a551f(0x385)][_0x646fcd];for(const _0x3d0d6e of $dataSkills){if(!_0x3d0d6e)continue;this['_skillIDs'][_0x3d0d6e[_0x4a551f(0x7d3)][_0x4a551f(0x896)]()[_0x4a551f(0x5cf)]()]=_0x3d0d6e['id'];}return this[_0x4a551f(0x385)][_0x646fcd]||0x0;},DataManager[_0x4376f0(0x2be)]=function(_0x401a2e){const _0x5f3ef9=_0x4376f0;_0x401a2e=_0x401a2e[_0x5f3ef9(0x896)]()['trim'](),this[_0x5f3ef9(0x6a4)]=this[_0x5f3ef9(0x6a4)]||{};if(this[_0x5f3ef9(0x6a4)][_0x401a2e])return this[_0x5f3ef9(0x6a4)][_0x401a2e];for(const _0x1607b6 of $dataEnemies){if(!_0x1607b6)continue;this['_enemyIDs'][_0x1607b6['name'][_0x5f3ef9(0x896)]()[_0x5f3ef9(0x5cf)]()]=_0x1607b6['id'];}return this[_0x5f3ef9(0x6a4)][_0x401a2e]||0x0;},DataManager['getWtypeIdWithName']=function(_0x230790){const _0x4b3bbd=_0x4376f0;_0x230790=_0x230790[_0x4b3bbd(0x896)]()['trim'](),this[_0x4b3bbd(0x888)]=this['_wtypeIDs']||{};if(this[_0x4b3bbd(0x888)][_0x230790])return this[_0x4b3bbd(0x888)][_0x230790];for(let _0x410e62=0x1;_0x410e62<0x64;_0x410e62++){if(!$dataSystem[_0x4b3bbd(0x684)][_0x410e62])continue;let _0x58b685=$dataSystem[_0x4b3bbd(0x684)][_0x410e62][_0x4b3bbd(0x896)]()[_0x4b3bbd(0x5cf)]();_0x58b685=_0x58b685[_0x4b3bbd(0x6f6)](/\x1I\[(\d+)\]/gi,''),_0x58b685=_0x58b685[_0x4b3bbd(0x6f6)](/\\I\[(\d+)\]/gi,''),this[_0x4b3bbd(0x888)][_0x58b685]=_0x410e62;}return this[_0x4b3bbd(0x888)]['BARE\x20HANDS']=0x0,this[_0x4b3bbd(0x888)][_0x230790]||0x0;},DataManager[_0x4376f0(0x709)]=function(_0x4a1967){const _0x8cbf1d=_0x4376f0,_0x1a8a2e=_0x8cbf1d(0x734);let _0x3aedb4=_0x4a1967[_0x8cbf1d(0xc45)],_0x1a6e40=_0x4a1967[_0x8cbf1d(0x7d3)];const _0x1f4d28=_0x4a1967['note'];return _0x1f4d28[_0x8cbf1d(0x844)](/<DISPLAY ICON: (\d+)>/i)&&(_0x3aedb4=Number(RegExp['$1'])),_0x1f4d28[_0x8cbf1d(0x844)](/<DISPLAY TEXT: (.*)>/i)&&(_0x1a6e40=String(RegExp['$1'])),_0x1a8a2e[_0x8cbf1d(0xa30)](_0x3aedb4,_0x1a6e40);},DataManager[_0x4376f0(0x992)]=function(_0x206e99){const _0x43789c=_0x4376f0;return _0x206e99[_0x43789c(0x54f)][_0x43789c(0x844)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x206e99[_0x43789c(0x7d3)];},DataManager[_0x4376f0(0x939)]=function(_0x493cd7){const _0x5282ba=_0x4376f0;return _0x493cd7[_0x5282ba(0x54f)][_0x5282ba(0x844)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x493cd7[_0x5282ba(0xc45)];},DataManager['swapEnemyIDs']=function(_0x11672d){const _0x3cea4b=_0x4376f0,_0x542d02=$dataEnemies[_0x11672d];if(_0x542d02){if(_0x542d02['note'][_0x3cea4b(0x844)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x1fe953=String(RegExp['$1'])['split'](/[\r\n]+/)['remove'](''),_0x2a3712=this[_0x3cea4b(0xb05)](_0x1fe953);_0x11672d=this[_0x3cea4b(0x2be)](_0x2a3712)||_0x11672d,_0x11672d=DataManager['swapEnemyIDs'](_0x11672d);}}return _0x11672d;},DataManager['processRandomizedData']=function(_0x45ee91){const _0x1153c3=_0x4376f0;let _0x59ff46=0x0;const _0xffeb5e={};for(const _0x2c40b0 of _0x45ee91){if(_0x2c40b0[_0x1153c3(0x844)](/(.*):[ ](\d+)/i)){const _0x123f01=String(RegExp['$1'])[_0x1153c3(0x5cf)](),_0x1fe985=Number(RegExp['$2']);_0xffeb5e[_0x123f01]=_0x1fe985,_0x59ff46+=_0x1fe985;}else{if(_0x2c40b0['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x241b1f=String(RegExp['$1'])[_0x1153c3(0x5cf)](),_0x35d3b4=Number(RegExp['$2']);_0xffeb5e[_0x241b1f]=_0x35d3b4,_0x59ff46+=_0x35d3b4;}else _0x2c40b0!==''&&(_0xffeb5e[_0x2c40b0]=0x1,_0x59ff46++);}}if(_0x59ff46<=0x0)return'';let _0x21dca1=Math[_0x1153c3(0x8dd)]()*_0x59ff46;for(const _0x11927c in _0xffeb5e){_0x21dca1-=_0xffeb5e[_0x11927c];if(_0x21dca1<=0x0)return _0x11927c;}return'';},DataManager[_0x4376f0(0x23e)]=function(_0x50b333){const _0xa2866a=_0x4376f0;if(!_0x50b333)return![];if(!VisuMZ['BattleCore'][_0xa2866a(0xae8)][_0xa2866a(0x1e5)][_0xa2866a(0x3ff)])return![];if(_0x50b333['note'][_0xa2866a(0x844)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x50b333[_0xa2866a(0x54f)][_0xa2866a(0x844)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x4bd039 of _0x50b333[_0xa2866a(0xa1a)]){if(!_0x4bd039)continue;if(_0x4bd039[_0xa2866a(0x808)]===Game_Action[_0xa2866a(0x600)])return!![];}return![];},DataManager[_0x4376f0(0x65c)]=function(_0x165b81){const _0x246636=_0x4376f0,_0x496564=$dataTroops[_0x165b81];if(!_0x496564)return'';let _0x593d04='';_0x593d04+=_0x496564[_0x246636(0x7d3)];for(const _0x4c7c19 of _0x496564['pages']){for(const _0x22adb4 of _0x4c7c19[_0x246636(0x438)]){[0x6c,0x198]['includes'](_0x22adb4['code'])&&(_0x593d04+='\x0a',_0x593d04+=_0x22adb4[_0x246636(0x3fd)][0x0]);}}return _0x593d04;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x4376f0(0x8ac)]??![],ConfigManager['autoBattleUseSkills']=ConfigManager[_0x4376f0(0x5c1)]??![],ConfigManager['visualHpGauge']=ConfigManager['visualHpGauge']??!![],VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x4bb)]=ConfigManager[_0x4376f0(0x994)],ConfigManager[_0x4376f0(0x994)]=function(){const _0x533acb=_0x4376f0,_0x5d5378=VisuMZ['BattleCore']['ConfigManager_makeData'][_0x533acb(0x34b)](this);return _0x5d5378['autoBattleAtStart']=this[_0x533acb(0x8ac)],_0x5d5378['autoBattleUseSkills']=this[_0x533acb(0x5c1)],_0x5d5378[_0x533acb(0x259)]=this[_0x533acb(0x259)],_0x5d5378;},VisuMZ[_0x4376f0(0x19c)]['ConfigManager_applyData']=ConfigManager[_0x4376f0(0xb94)],ConfigManager[_0x4376f0(0xb94)]=function(_0x273b4a){const _0x4d6774=_0x4376f0;VisuMZ[_0x4d6774(0x19c)][_0x4d6774(0x7ff)][_0x4d6774(0x34b)](this,_0x273b4a),_0x4d6774(0x8ac)in _0x273b4a?this[_0x4d6774(0x8ac)]=_0x273b4a[_0x4d6774(0x8ac)]:this[_0x4d6774(0x8ac)]=![],'autoBattleUseSkills'in _0x273b4a?this[_0x4d6774(0x5c1)]=_0x273b4a[_0x4d6774(0x5c1)]:this[_0x4d6774(0x5c1)]=![],_0x4d6774(0x259)in _0x273b4a?this[_0x4d6774(0x259)]=_0x273b4a[_0x4d6774(0x259)]:this['visualHpGauge']=!![];},ImageManager['svActorHorzCells']=ImageManager['svActorHorzCells']||0x9,ImageManager['svActorVertCells']=ImageManager[_0x4376f0(0x1da)]||0x6,VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa4a)]=BattleManager[_0x4376f0(0x578)],BattleManager[_0x4376f0(0x578)]=function(_0x3e2240,_0x2ad619,_0x767722){const _0x2a88c1=_0x4376f0;VisuMZ[_0x2a88c1(0x19c)]['BattleManager_setup']['call'](this,_0x3e2240,_0x2ad619,_0x767722),this[_0x2a88c1(0x494)]={};},VisuMZ['BattleCore'][_0x4376f0(0x649)]=BattleManager['initMembers'],BattleManager[_0x4376f0(0x5e8)]=function(){const _0x26fbe3=_0x4376f0;VisuMZ[_0x26fbe3(0x19c)][_0x26fbe3(0x649)][_0x26fbe3(0x34b)](this),this[_0x26fbe3(0x558)]=[];},BattleManager[_0x4376f0(0x6f0)]=function(){const _0x542ec4=_0x4376f0;$subject=this['_subject'],$targets=this[_0x542ec4(0xac7)],$target=this[_0x542ec4(0x961)]||this[_0x542ec4(0xac7)][this['_targetIndex']||0x0];},BattleManager['refreshStatusWindow']=function(){const _0x3c0a49=_0x4376f0;if(!SceneManager['isSceneBattle']())return;const _0x97b3d7=SceneManager[_0x3c0a49(0x982)][_0x3c0a49(0xad4)];if(_0x97b3d7)_0x97b3d7[_0x3c0a49(0x3fc)]();},BattleManager[_0x4376f0(0x953)]=function(){const _0x124a85=_0x4376f0;if(BattleManager['isTpb']())return _0x124a85(0xbd9);return _0x124a85(0x720);},BattleManager[_0x4376f0(0x8c9)]=function(_0x56ebc3){const _0x1c113f=_0x4376f0;return _0x56ebc3=_0x56ebc3[_0x1c113f(0x896)]()['trim'](),this[_0x1c113f(0x953)]()===_0x56ebc3;},BattleManager[_0x4376f0(0x32a)]=function(){const _0x370a70=_0x4376f0;return this[_0x370a70(0x8c9)](_0x370a70(0x720));},BattleManager[_0x4376f0(0x11b)]=function(){const _0x139413=_0x4376f0;return this[_0x139413(0x32a)]();},BattleManager[_0x4376f0(0x148)]=function(){const _0x8ed7f0=_0x4376f0;return!this[_0x8ed7f0(0x11b)]();},BattleManager[_0x4376f0(0x125)]=function(){const _0x2b2694=_0x4376f0;return!this[_0x2b2694(0x11b)]()&&!this[_0x2b2694(0x148)]();},BattleManager[_0x4376f0(0x3f7)]=function(_0xe2b68f){const _0x3a56d7=_0x4376f0;this['_battlerKeyCache']=this[_0x3a56d7(0x494)]||{};if(this[_0x3a56d7(0x494)][_0xe2b68f]!==undefined)return this[_0x3a56d7(0x494)][_0xe2b68f];this[_0x3a56d7(0x494)][_0xe2b68f]=null;const _0xc90cdc=this['allBattleMembers'](),_0x2a7b5d=_0xc90cdc[_0x3a56d7(0x57f)](_0x299d5b=>_0x299d5b[_0x3a56d7(0x1e4)]()===_0xe2b68f);if(_0x2a7b5d)this['_battlerKeyCache'][_0xe2b68f]=_0x2a7b5d;return this[_0x3a56d7(0x494)][_0xe2b68f];},Game_BattlerBase['prototype']['battlerKey']=function(){const _0x1d85f8=_0x4376f0;return _0x1d85f8(0xa36)[_0x1d85f8(0xa30)](this[_0x1d85f8(0xb9d)]()?'actor':'enemy',this[_0x1d85f8(0x7d3)]()+'-'+(this[_0x1d85f8(0xb9d)]()?this[_0x1d85f8(0xb99)]():this[_0x1d85f8(0xab2)]()));},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x370)]=function(_0xda479f){const _0x347b8f=_0x4376f0;if(this['_targetBattlerKey']!=='')return;typeof _0xda479f===_0x347b8f(0x9db)?this[_0x347b8f(0x619)]=_0xda479f[_0x347b8f(0x177)]()['trim']():this[_0x347b8f(0x619)]=_0xda479f['battlerKey']();},Game_Action[_0x4376f0(0x705)]['getBattlerKeyTargets']=function(){const _0x43646a=_0x4376f0;return[this[_0x43646a(0x6ee)]()];},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x6ee)]=function(){const _0x238654=_0x4376f0,_0x3e0659=this[_0x238654(0x619)]||'',_0x594961=BattleManager[_0x238654(0x3f7)](_0x3e0659);if(!_0x594961)return this[_0x238654(0xc05)]();if(!_0x594961[_0x238654(0x5c4)]())return this[_0x238654(0xc05)]();return _0x594961;},Game_Action[_0x4376f0(0x705)][_0x4376f0(0xc05)]=function(){const _0x26cfe9=_0x4376f0,_0x2cfb9f=this[_0x26cfe9(0x619)];return _0x2cfb9f['match'](/ACTOR/i)?this['friendsUnit']()['trueRandomTarget']():this['opponentsUnit']()[_0x26cfe9(0x784)]();},BattleManager[_0x4376f0(0xb9f)]=function(){const _0x45a514=_0x4376f0;return this[_0x45a514(0x559)]()[_0x45a514(0x4bd)](_0x53d83a=>_0x53d83a[_0x45a514(0x90c)]());},BattleManager['processBattleCoreJS']=function(_0x450961){const _0x309dca=_0x4376f0;_0x450961===_0x309dca(0x63f)&&(this[_0x309dca(0x169)]=!![]),$gameParty['processBattleCoreJS'](_0x450961),$gameTroop[_0x309dca(0x887)](_0x450961);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x431)]=BattleManager[_0x4376f0(0x924)],BattleManager[_0x4376f0(0x924)]=function(){const _0x178876=_0x4376f0;this['_endBattle']=![],this[_0x178876(0xa3c)]=ConfigManager[_0x178876(0x8ac)],this[_0x178876(0x169)]=![],this[_0x178876(0x887)]('PreStartBattleJS'),VisuMZ[_0x178876(0x19c)][_0x178876(0x431)][_0x178876(0x34b)](this),this[_0x178876(0x887)]('PostStartBattleJS');},BattleManager[_0x4376f0(0x43e)]=function(_0x25a57e){const _0x49884f=_0x4376f0,_0x453a12=VisuMZ[_0x49884f(0x19c)][_0x49884f(0xae8)][_0x49884f(0x956)];_0x25a57e!==_0x49884f(0x679)&&_0x453a12[_0x49884f(0x890)]&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x453a12[_0x49884f(0x890)])&&$gameTemp[_0x49884f(0x4ac)](_0x453a12[_0x49884f(0x890)]);const _0x32997a=_0x49884f(0x4b2)[_0x49884f(0xa30)](_0x25a57e);_0x453a12[_0x32997a]&&VisuMZ[_0x49884f(0x19c)][_0x49884f(0x487)](_0x453a12[_0x32997a])&&$gameTemp[_0x49884f(0x4ac)](_0x453a12[_0x32997a]);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa8f)]=BattleManager[_0x4376f0(0xbee)],BattleManager['abort']=function(){const _0x9afa73=_0x4376f0;VisuMZ[_0x9afa73(0x19c)][_0x9afa73(0xa8f)][_0x9afa73(0x34b)](this),SceneManager[_0x9afa73(0x446)]()&&BattleManager[_0x9afa73(0x1d9)]();},VisuMZ[_0x4376f0(0x19c)]['BattleManager_checkBattleEnd']=BattleManager[_0x4376f0(0x21a)],BattleManager[_0x4376f0(0x21a)]=function(){const _0x12d393=_0x4376f0;if(this[_0x12d393(0x89c)]===_0x12d393(0x83a)){if($gameTemp[_0x12d393(0x25c)]())return![];}return VisuMZ[_0x12d393(0x19c)][_0x12d393(0x2b1)][_0x12d393(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa9c)]=BattleManager[_0x4376f0(0x313)],BattleManager[_0x4376f0(0x313)]=function(){const _0x3fddc5=_0x4376f0;this['_endingBattle']=!![],this[_0x3fddc5(0x887)](_0x3fddc5(0x63f)),VisuMZ['BattleCore'][_0x3fddc5(0xa9c)][_0x3fddc5(0x34b)](this),this[_0x3fddc5(0x43e)](_0x3fddc5(0x8db));},VisuMZ['BattleCore'][_0x4376f0(0xc37)]=BattleManager[_0x4376f0(0x410)],BattleManager[_0x4376f0(0x410)]=function(){const _0x1641ab=_0x4376f0;this[_0x1641ab(0x169)]=!![],VisuMZ['BattleCore'][_0x1641ab(0xc37)]['call'](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x499)]=BattleManager[_0x4376f0(0x173)],BattleManager['processDefeat']=function(){const _0x19b1eb=_0x4376f0;this['_endingBattle']=!![],this[_0x19b1eb(0x887)](_0x19b1eb(0xb75)),VisuMZ[_0x19b1eb(0x19c)][_0x19b1eb(0x499)][_0x19b1eb(0x34b)](this),this[_0x19b1eb(0x43e)](_0x19b1eb(0x421));},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x3c0)]=BattleManager[_0x4376f0(0x926)],BattleManager[_0x4376f0(0x926)]=function(_0x3c9676){const _0x2826ef=_0x4376f0;this[_0x2826ef(0x2e3)]=!![],this[_0x2826ef(0xa3c)]=![],this['processBattleCoreJS'](_0x2826ef(0x44d)),VisuMZ['BattleCore']['BattleManager_endBattle'][_0x2826ef(0x34b)](this,_0x3c9676),this[_0x2826ef(0x887)](_0x2826ef(0x59d));},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x615)]=BattleManager[_0x4376f0(0xb5b)],BattleManager['startTurn']=function(){const _0x2a6fbc=_0x4376f0;if(this[_0x2a6fbc(0x11b)]())this[_0x2a6fbc(0x887)](_0x2a6fbc(0x5bd));VisuMZ[_0x2a6fbc(0x19c)][_0x2a6fbc(0x615)][_0x2a6fbc(0x34b)](this);if(this['isTurnBased']())this[_0x2a6fbc(0x887)]('PostStartTurnJS');},BattleManager['processTurn']=function(){const _0x3c9c20=_0x4376f0,_0x2436a6=this[_0x3c9c20(0x3f8)],_0x2d2901=_0x2436a6[_0x3c9c20(0x8ad)]();_0x2d2901?(_0x2d2901[_0x3c9c20(0x9c9)](),_0x2d2901['isValid']()?(this['startAction'](),_0x2436a6['removeCurrentAction']()):(_0x2436a6[_0x3c9c20(0x11d)](),this[_0x3c9c20(0xa1d)]())):(this['endAction'](),this[_0x3c9c20(0x3f8)]=null);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x234)]=BattleManager[_0x4376f0(0xaa0)],BattleManager[_0x4376f0(0xaa0)]=function(){const _0x2aeac7=_0x4376f0,_0x196b0a=this[_0x2aeac7(0x3f8)][_0x2aeac7(0x8ad)](),_0x59a662=this[_0x2aeac7(0x3f8)];_0x196b0a&&_0x196b0a[_0x2aeac7(0x8d8)]()===_0x59a662&&_0x196b0a[_0x2aeac7(0xa21)]('PreStartActionJS'),VisuMZ[_0x2aeac7(0x19c)]['BattleManager_startAction']['call'](this),_0x196b0a&&_0x196b0a[_0x2aeac7(0x8d8)]()===_0x59a662&&_0x196b0a[_0x2aeac7(0xa21)](_0x2aeac7(0x75e));},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x603)]=BattleManager[_0x4376f0(0xa1d)],BattleManager[_0x4376f0(0xa1d)]=function(){const _0x5f52d1=_0x4376f0,_0x3edc9c=this['_action'],_0x510f70=this[_0x5f52d1(0x3f8)];_0x3edc9c&&_0x3edc9c!==this[_0x5f52d1(0xb03)]&&_0x3edc9c[_0x5f52d1(0x8d8)]()===_0x510f70&&_0x3edc9c[_0x5f52d1(0xa21)](_0x5f52d1(0x8ed)),this[_0x5f52d1(0x3f8)]?VisuMZ[_0x5f52d1(0x19c)][_0x5f52d1(0x603)][_0x5f52d1(0x34b)](this):this[_0x5f52d1(0x89c)]=_0x5f52d1(0x83a),_0x3edc9c&&_0x3edc9c!==this['_lastAction']&&_0x3edc9c[_0x5f52d1(0x8d8)]()===_0x510f70&&_0x3edc9c[_0x5f52d1(0xa21)]('PostEndActionJS'),this[_0x5f52d1(0x18e)](this[_0x5f52d1(0x559)]()),this[_0x5f52d1(0xb03)]=this[_0x5f52d1(0x93c)];},BattleManager[_0x4376f0(0x18e)]=function(_0x4c778a){const _0x43bba0=_0x4376f0;for(const _0x304de5 of _0x4c778a){if(!_0x304de5)continue;if(!_0x304de5[_0x43bba0(0x3f1)]())continue;_0x304de5[_0x43bba0(0x3f1)]()[_0x43bba0(0x80a)]();}},BattleManager[_0x4376f0(0xa2c)]=function(){const _0x2ca71f=_0x4376f0;!this[_0x2ca71f(0x127)][_0x2ca71f(0xa8b)]()&&this[_0x2ca71f(0xa1d)]();},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x252)]=function(){const _0x49a85b=_0x4376f0;this['clearResult']();if(Imported[_0x49a85b(0x601)]){const _0x56c3fc=VisuMZ[_0x49a85b(0x15f)]['Settings'][_0x49a85b(0x948)];_0x56c3fc&&_0x56c3fc[_0x49a85b(0x85f)]===![]&&this[_0x49a85b(0x7d6)](0x1);}else this['removeStatesAuto'](0x1);this[_0x49a85b(0x2ca)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xacb)]=BattleManager['invokeCounterAttack'],BattleManager[_0x4376f0(0x49c)]=function(_0x5b5740,_0x32fee8){const _0x2c3672=_0x4376f0;this[_0x2c3672(0x41f)]=!![],VisuMZ[_0x2c3672(0x19c)][_0x2c3672(0xacb)]['call'](this,_0x5b5740,_0x32fee8),this['_bypassCanCounterCheck']=undefined;},BattleManager['makeEscapeRatio']=function(){const _0xd3de51=_0x4376f0;this['_escapeRatio']=VisuMZ[_0xd3de51(0x19c)]['Settings'][_0xd3de51(0x956)]['CalcEscapeRatioJS'][_0xd3de51(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x389)]=BattleManager['onEscapeSuccess'],BattleManager[_0x4376f0(0x8e3)]=function(){const _0x575ccd=_0x4376f0;this[_0x575ccd(0x887)](_0x575ccd(0x1f4)),BattleManager[_0x575ccd(0x86d)][_0x575ccd(0x3bd)](),VisuMZ[_0x575ccd(0x19c)][_0x575ccd(0x389)]['call'](this),this['processPostBattleCommonEvents'](_0x575ccd(0xb54));},VisuMZ['BattleCore'][_0x4376f0(0x651)]=BattleManager['onEscapeFailure'],BattleManager[_0x4376f0(0x14d)]=function(){const _0x3f86f6=_0x4376f0;this['processBattleCoreJS'](_0x3f86f6(0x8fb));const _0x5ef7b9=this['_escapeRatio'];VisuMZ['BattleCore']['BattleManager_onEscapeFailure'][_0x3f86f6(0x34b)](this),this['_escapeRatio']=_0x5ef7b9+VisuMZ[_0x3f86f6(0x19c)]['Settings'][_0x3f86f6(0x956)][_0x3f86f6(0xa0a)][_0x3f86f6(0x34b)](this),this[_0x3f86f6(0x645)]=![],this['processPostBattleCommonEvents']('EscapeFail');},BattleManager[_0x4376f0(0xb56)]=function(){const _0x178786=_0x4376f0;let _0x15623a=![];if(this[_0x178786(0x9af)]())for(const _0x53b0c8 of $gameTroop[_0x178786(0x292)]()){this[_0x178786(0x127)]['push']('addText',TextManager[_0x178786(0x302)][_0x178786(0xa30)](_0x53b0c8)),this[_0x178786(0x127)][_0x178786(0x6b0)](_0x178786(0xc3e)),_0x15623a=!![];}if(this[_0x178786(0x9c0)])this[_0x178786(0x127)][_0x178786(0x6b0)](_0x178786(0x6e3),TextManager[_0x178786(0xa2e)]['format']($gameParty[_0x178786(0x7d3)]())),this[_0x178786(0x127)]['push'](_0x178786(0xc3e));else this[_0x178786(0x366)]&&(this[_0x178786(0x127)]['push'](_0x178786(0x6e3),TextManager[_0x178786(0x7b3)][_0x178786(0xa30)]($gameParty[_0x178786(0x7d3)]())),this[_0x178786(0x127)][_0x178786(0x6b0)](_0x178786(0xc3e)));_0x15623a&&(this[_0x178786(0x127)][_0x178786(0x6b0)](_0x178786(0xc3e)),this[_0x178786(0x127)][_0x178786(0x6b0)](_0x178786(0x976))),this['isTpb']()&&this[_0x178786(0x36b)]()&&(this[_0x178786(0x532)]=![]);},BattleManager[_0x4376f0(0x9af)]=function(){const _0x166ed9=_0x4376f0;if(BattleManager[_0x166ed9(0xa3c)])return![];return VisuMZ[_0x166ed9(0x19c)]['Settings'][_0x166ed9(0x653)]['EmergeText'];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa5b)]=BattleManager['startInput'],BattleManager[_0x4376f0(0x697)]=function(){const _0x37e03b=_0x4376f0;VisuMZ[_0x37e03b(0x19c)]['BattleManager_startInput']['call'](this),this[_0x37e03b(0x32a)]()&&this[_0x37e03b(0x36b)]()&&!this['_surprise']&&$gameParty[_0x37e03b(0x34e)]()&&this[_0x37e03b(0x4d3)]();},BattleManager[_0x4376f0(0x36b)]=function(){const _0x57183e=_0x4376f0;return VisuMZ[_0x57183e(0x19c)][_0x57183e(0xae8)][_0x57183e(0x863)][_0x57183e(0xc0c)];},BattleManager[_0x4376f0(0xa17)]=function(){const _0x1372fb=_0x4376f0;this[_0x1372fb(0x973)]()&&this[_0x1372fb(0x4d3)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x7f0)]=Scene_Battle['prototype'][_0x4376f0(0x515)],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x515)]=function(){const _0x75dc8c=_0x4376f0;VisuMZ[_0x75dc8c(0x19c)][_0x75dc8c(0x7f0)][_0x75dc8c(0x34b)](this),BattleManager['isTpb']()&&BattleManager[_0x75dc8c(0x532)]&&(BattleManager['_tpbNeedsPartyCommand']=![],this['actorCommandCancelTPB']());},BattleManager[_0x4376f0(0x9c7)]=function(_0x5b291e,_0x299fcd,_0x5e093b){const _0x3f5a47=_0x4376f0;if(!_0x5e093b)return;if(!_0x5b291e)return;if(!_0x299fcd)return;const _0x367db1=this[_0x3f5a47(0x93c)];this[_0x3f5a47(0x93c)]=new Game_Action(_0x5b291e);if(DataManager['isItem'](_0x5e093b))this[_0x3f5a47(0x93c)][_0x3f5a47(0xa06)](_0x5e093b['id']);if(DataManager['isSkill'](_0x5e093b))this[_0x3f5a47(0x93c)][_0x3f5a47(0x338)](_0x5e093b['id']);if(this[_0x3f5a47(0x93c)][_0x3f5a47(0x269)]())BattleManager[_0x3f5a47(0x7a2)](_0x5b291e,_0x299fcd);this[_0x3f5a47(0x93c)]=_0x367db1;},BattleManager[_0x4376f0(0x412)]=function(_0xa230be,_0xd073aa){const _0x22f512=_0x4376f0;this[_0x22f512(0x93c)][_0x22f512(0x185)]=_0xd073aa,this['_logWindow']['displayReflection'](_0xd073aa),this[_0x22f512(0x127)][_0x22f512(0x40d)](_0xa230be,this[_0x22f512(0x93c)]),this['_action']['apply'](_0xa230be),this[_0x22f512(0x127)][_0x22f512(0xb1c)](_0xa230be,_0xa230be);},VisuMZ[_0x4376f0(0x19c)]['BattleManager_makeActionOrders']=BattleManager[_0x4376f0(0x8eb)],BattleManager[_0x4376f0(0x8eb)]=function(){const _0x194b93=_0x4376f0;VisuMZ['BattleCore'][_0x194b93(0x461)]['call'](this),this[_0x194b93(0x875)]=this['_actionBattlers'][_0x194b93(0x4bd)](_0x15e64f=>_0x15e64f&&_0x15e64f['isAppeared']());},VisuMZ[_0x4376f0(0x19c)]['BattleManager_updatePhase']=BattleManager[_0x4376f0(0x730)],BattleManager[_0x4376f0(0x730)]=function(_0x136077){const _0x39e034=_0x4376f0;if(this[_0x39e034(0x89c)]===_0x39e034(0xb4f))this[_0x39e034(0x149)]();else this['_phase']===_0x39e034(0xa25)?this[_0x39e034(0xc10)]():VisuMZ[_0x39e034(0x19c)][_0x39e034(0x167)][_0x39e034(0x34b)](this,_0x136077);},BattleManager['prepareCustomActionSequence']=function(){const _0x2d0d75=_0x4376f0;this[_0x2d0d75(0x610)]=this[_0x2d0d75(0xac7)][_0x2d0d75(0x393)](0x0),this['_targetIndex']=0x0,this[_0x2d0d75(0x961)]=this['_allTargets'][0x0]||null,this[_0x2d0d75(0x89c)]='custom';},BattleManager[_0x4376f0(0x149)]=function(){const _0x2ba7e5=_0x4376f0;!this['updateEventMain']()&&!this[_0x2ba7e5(0x127)][_0x2ba7e5(0xa8b)]()&&(this[_0x2ba7e5(0x89c)]=_0x2ba7e5(0xb7f));},BattleManager[_0x4376f0(0xa25)]=function(_0x1bd421){const _0x3587ed=_0x4376f0;this[_0x3587ed(0x875)]['remove'](_0x1bd421);if(_0x1bd421===this[_0x3587ed(0x3f8)])return;const _0x165841=JsonEx['makeDeepCopy'](_0x1bd421['currentAction']());this[_0x3587ed(0x558)][_0x3587ed(0x6b0)]([_0x1bd421,_0x165841]);},BattleManager[_0x4376f0(0x99b)]=function(){},BattleManager[_0x4376f0(0x8b2)]=function(){const _0x36bc8b=_0x4376f0;if(this[_0x36bc8b(0x4c7)]())this[_0x36bc8b(0x89c)]=_0x36bc8b(0x83a);else this[_0x36bc8b(0x558)][_0x36bc8b(0xa3a)]>0x0?this['_phase']='turn':this[_0x36bc8b(0x697)]();},BattleManager[_0x4376f0(0x8a9)]=function(){const _0x2bb618=_0x4376f0,_0xcb9fbd=this['_subject'];_0xcb9fbd&&this[_0x2bb618(0x4c7)]()&&_0xcb9fbd['setActionState'](_0x2bb618(0x70e));for(;;){const _0x3a882d=this[_0x2bb618(0x13c)]();if(!_0x3a882d)return null;if(_0x3a882d[_0x2bb618(0xa95)]()&&_0x3a882d[_0x2bb618(0x5c4)]())return _0x3a882d;}},BattleManager['getNextSubjectFromPool']=function(){const _0x48d835=_0x4376f0;if(this[_0x48d835(0x558)][_0x48d835(0xa3a)]>0x0){const _0x54f5a3=this[_0x48d835(0x558)]['shift'](),_0x5ab86c=_0x54f5a3[0x0];return _0x5ab86c[_0x48d835(0x33f)]=_0x5ab86c[_0x48d835(0x33f)]||[],_0x5ab86c[_0x48d835(0x33f)][0x0]=_0x54f5a3[0x1],_0x5ab86c;}else return this[_0x48d835(0x875)][_0x48d835(0xaf0)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x53a)]=Game_Battler[_0x4376f0(0x705)][_0x4376f0(0xa25)],Game_Battler[_0x4376f0(0x705)]['forceAction']=function(_0x2d15e4,_0x5e45e8){const _0x52e7bb=_0x4376f0;VisuMZ[_0x52e7bb(0x19c)]['Game_Battler_forceAction']['call'](this,_0x2d15e4,_0x5e45e8),this[_0x52e7bb(0x33f)][this[_0x52e7bb(0x33f)][_0x52e7bb(0xa3a)]-0x1][_0x52e7bb(0x9a1)]=!![];},Game_Interpreter[_0x4376f0(0x705)][_0x4376f0(0x343)]=function(_0x49497d){const _0x4d7898=_0x4376f0;return this[_0x4d7898(0x660)](_0x49497d[0x0],_0x49497d[0x1],_0x25af2c=>{const _0x523a28=_0x4d7898;!_0x25af2c[_0x523a28(0x1cb)]()&&(_0x25af2c[_0x523a28(0xa25)](_0x49497d[0x2],_0x49497d[0x3]),BattleManager[_0x523a28(0xa25)](_0x25af2c));}),!![];},VisuMZ['BattleCore'][_0x4376f0(0x7a8)]=Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x701)],Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x701)]=function(){const _0x52673d=_0x4376f0;VisuMZ[_0x52673d(0x19c)][_0x52673d(0x7a8)][_0x52673d(0x34b)](this),this[_0x52673d(0x33f)][_0x52673d(0xa3a)]<=0x0&&(this[_0x52673d(0x71b)]=Number[_0x52673d(0x98f)]);},BattleManager[_0x4376f0(0xb14)]=function(){const _0x1f08ba=_0x4376f0;if(VisuMZ[_0x1f08ba(0x19c)][_0x1f08ba(0xae8)][_0x1f08ba(0x46a)][_0x1f08ba(0xa26)]??!![])return![];return SceneManager[_0x1f08ba(0x446)]()&&this[_0x1f08ba(0x169)];},VisuMZ[_0x4376f0(0x19c)]['BattleManager_selectNextCommand']=BattleManager[_0x4376f0(0x4d3)],BattleManager['selectNextCommand']=function(){const _0x223fd3=_0x4376f0;this['isTpb']()?this[_0x223fd3(0x62a)]():VisuMZ['BattleCore'][_0x223fd3(0x598)][_0x223fd3(0x34b)](this);},BattleManager[_0x4376f0(0x62a)]=function(){const _0x323863=_0x4376f0;if(this[_0x323863(0xb79)]){if(this[_0x323863(0xb79)]['selectNextCommand']())return;this[_0x323863(0x72e)](),this[_0x323863(0x946)](),!this[_0x323863(0x3f8)]&&!this[_0x323863(0xb79)]&&SceneManager[_0x323863(0x982)][_0x323863(0x5d1)]();}else!this[_0x323863(0x3f8)]&&this[_0x323863(0xb92)]();},BattleManager[_0x4376f0(0x946)]=function(){const _0x195b09=_0x4376f0;(!this[_0x195b09(0x973)]()||this[_0x195b09(0x270)]())&&(this[_0x195b09(0xc1f)]&&(!$gameParty['battleMembers']()[_0x195b09(0x3e9)](this[_0x195b09(0xc1f)])&&(this['_tpbSceneChangeCacheActor']=null)),!this[_0x195b09(0xc1f)]?(this[_0x195b09(0x5a5)](),this[_0x195b09(0xb79)]=null,this[_0x195b09(0x645)]=![]):this['revertTpbCachedActor']());},BattleManager[_0x4376f0(0x38e)]=function(){const _0x30828e=_0x4376f0;!$gameParty[_0x30828e(0x276)]()['includes'](this[_0x30828e(0xc1f)])&&(this[_0x30828e(0xc1f)]=null),this[_0x30828e(0xc1f)]?(this['_currentActor']=this[_0x30828e(0xc1f)],this[_0x30828e(0xb79)][_0x30828e(0x279)]='charged',this[_0x30828e(0x645)]=!![],this[_0x30828e(0xc1f)]=null):(this['cancelActorInput'](),this['_currentActor']=null,this[_0x30828e(0x645)]=![]);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x628)]=BattleManager[_0x4376f0(0x3ca)],BattleManager[_0x4376f0(0x3ca)]=function(){const _0x4c9b65=_0x4376f0;return this[_0x4c9b65(0x89c)]===_0x4c9b65(0xb4f)?this[_0x4c9b65(0x548)]():VisuMZ[_0x4c9b65(0x19c)]['BattleManager_isTpbMainPhase'][_0x4c9b65(0x34b)](this);},BattleManager[_0x4376f0(0x548)]=function(){return this['isActiveTpb']();},VisuMZ[_0x4376f0(0x19c)]['BattleManager_cancelActorInput']=BattleManager[_0x4376f0(0x5a5)],BattleManager[_0x4376f0(0x5a5)]=function(){const _0x2306ba=_0x4376f0;this[_0x2306ba(0x4c7)]()&&this[_0x2306ba(0x89c)]===_0x2306ba(0x7c5)&&(this[_0x2306ba(0xb79)]=null),VisuMZ[_0x2306ba(0x19c)]['BattleManager_cancelActorInput'][_0x2306ba(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x321)]=BattleManager[_0x4376f0(0x8af)],BattleManager[_0x4376f0(0x8af)]=function(){const _0x547b01=_0x4376f0,_0x146d55=this[_0x547b01(0xb79)];if(_0x146d55&&!_0x146d55[_0x547b01(0x8af)]()){const _0x5a3fdd=_0x146d55['_actionInputIndex'];_0x146d55[_0x547b01(0x33f)][_0x5a3fdd]=new Game_Action(_0x146d55);}return VisuMZ[_0x547b01(0x19c)]['BattleManager_inputtingAction'][_0x547b01(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)]['BattleManager_checkSubstitute']=BattleManager[_0x4376f0(0x27b)],BattleManager[_0x4376f0(0x27b)]=function(_0x7e1cb7){const _0x962699=_0x4376f0;if(this[_0x962699(0x93c)][_0x962699(0x6f1)]())return![];return VisuMZ[_0x962699(0x19c)][_0x962699(0x49e)][_0x962699(0x34b)](this,_0x7e1cb7);},SceneManager[_0x4376f0(0x446)]=function(){const _0x3517a2=_0x4376f0;return this[_0x3517a2(0x982)]&&this[_0x3517a2(0x982)][_0x3517a2(0xa32)]===Scene_Battle;},SceneManager[_0x4376f0(0x20d)]=function(){const _0xb4f36a=_0x4376f0;return Spriteset_Battle[_0xb4f36a(0x705)]['isFlipped']();},SceneManager[_0x4376f0(0x44c)]=function(){const _0x2f508f=_0x4376f0;if(SceneManager[_0x2f508f(0x822)](Scene_Options))return!![];return![];},SceneManager[_0x4376f0(0xbec)]=function(){const _0x16a004=_0x4376f0;if(SceneManager[_0x16a004(0xc2d)](Scene_Options))return!![];return![];},SceneManager[_0x4376f0(0x485)]=function(_0x3a9967){const _0x3a4786=_0x4376f0;if(!SceneManager[_0x3a4786(0x446)]())return!![];const _0x288b26=['Scene_Options',_0x3a4786(0x6e5),'Scene_QuickLoad'];return _0x288b26['includes'](_0x3a9967[_0x3a4786(0x7d3)]);},VisuMZ[_0x4376f0(0x19c)]['SceneManager_push']=SceneManager['push'],SceneManager[_0x4376f0(0x6b0)]=function(_0x54005c){const _0x567b97=_0x4376f0;if(!SceneManager[_0x567b97(0x485)](_0x54005c))return this[_0x567b97(0x16d)](_0x54005c);VisuMZ['BattleCore'][_0x567b97(0x771)][_0x567b97(0x34b)](this,_0x54005c);},SceneManager[_0x4376f0(0x16d)]=function(_0x980de0){const _0x291d2d=_0x4376f0;if(!$gameTemp['isPlaytest']())return;if(this[_0x291d2d(0x8cd)])return;this[_0x291d2d(0x8cd)]=!![];let _0x4f0e07='';_0x4f0e07+=_0x291d2d(0x1c9),_0x4f0e07+=_0x291d2d(0x852)['format'](_0x980de0['name']),alert(_0x4f0e07);},VisuMZ['BattleCore'][_0x4376f0(0xc38)]=Game_Temp[_0x4376f0(0x705)][_0x4376f0(0x72f)],Game_Temp['prototype'][_0x4376f0(0x72f)]=function(){const _0x4bcce1=_0x4376f0;VisuMZ[_0x4bcce1(0x19c)]['Game_Temp_initialize'][_0x4bcce1(0x34b)](this),this['_battleBalloonQueue']=[];},VisuMZ['BattleCore'][_0x4376f0(0x751)]=Game_Temp['prototype'][_0x4376f0(0x9f8)],Game_Temp[_0x4376f0(0x705)][_0x4376f0(0x9f8)]=function(_0x166627,_0x3d7be7,_0x42bdc2){const _0x525646=_0x4376f0;_0x166627[_0x525646(0x246)](null)['remove'](undefined),_0x166627=_0x166627[_0x525646(0x4bd)]((_0x46d515,_0x356f83,_0x164cb6)=>_0x164cb6['indexOf'](_0x46d515)===_0x356f83);SceneManager[_0x525646(0x446)]()&&SceneManager[_0x525646(0x20d)]()&&(_0x42bdc2=!_0x42bdc2);VisuMZ[_0x525646(0x19c)]['Game_Temp_requestAnimation'][_0x525646(0x34b)](this,_0x166627,_0x3d7be7,_0x42bdc2);SceneManager['isSceneBattle']()&&BattleManager[_0x525646(0x86d)][_0x525646(0x2b9)]();for(const _0x67acb9 of _0x166627){_0x67acb9&&_0x67acb9['isEnemy']&&_0x67acb9[_0x525646(0x7b4)]()&&_0x67acb9[_0x525646(0x891)]();}},Game_Temp[_0x4376f0(0x705)][_0x4376f0(0x90a)]=function(_0x1e3ae5){const _0x2be0d4=_0x4376f0;this[_0x2be0d4(0x695)]=_0x1e3ae5;},Game_Temp[_0x4376f0(0x705)]['getLastPluginCommandInterpreter']=function(){const _0xf955e1=_0x4376f0;return this[_0xf955e1(0x695)];},Game_Temp[_0x4376f0(0x705)][_0x4376f0(0x774)]=function(){const _0x1635c0=_0x4376f0;this[_0x1635c0(0xc2f)]=undefined;},Game_Temp[_0x4376f0(0x705)][_0x4376f0(0xb6c)]=function(_0x59cad3){const _0x42b1c3=_0x4376f0;$gameMap&&$dataMap&&$dataMap['note']&&this[_0x42b1c3(0xa3e)]($dataMap[_0x42b1c3(0x54f)]);const _0x60a3cb=$dataTroops[_0x59cad3];if(_0x60a3cb){let _0x405387=DataManager[_0x42b1c3(0x65c)](_0x60a3cb['id']);this[_0x42b1c3(0xa3e)](_0x405387);}},Game_Temp[_0x4376f0(0x705)]['parseForcedGameTroopSettingsBattleCore']=function(_0x38951a){const _0x80ae07=_0x4376f0;if(!_0x38951a)return;if(_0x38951a[_0x80ae07(0x844)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x2c0169=String(RegExp['$1']);if(_0x2c0169[_0x80ae07(0x844)](/DEFAULT/i))this[_0x80ae07(0xc2f)]=_0x80ae07(0x847);else{if(_0x2c0169[_0x80ae07(0x844)](/LIST/i))this[_0x80ae07(0xc2f)]=_0x80ae07(0x438);else{if(_0x2c0169['match'](/XP/i))this['_forcedBattleLayout']='xp';else{if(_0x2c0169[_0x80ae07(0x844)](/PORTRAIT/i))this[_0x80ae07(0xc2f)]=_0x80ae07(0xaf9);else{if(_0x2c0169[_0x80ae07(0x844)](/BORDER/i))this[_0x80ae07(0xc2f)]=_0x80ae07(0x937);else{if(_0x2c0169[_0x80ae07(0x844)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x80ae07(0x65d)]?this[_0x80ae07(0xc2f)]='sideview_ui':this[_0x80ae07(0xc2f)]=_0x80ae07(0x847);else _0x2c0169['match'](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x80ae07(0x764)]?this[_0x80ae07(0xc2f)]=_0x80ae07(0x404):this['_forcedBattleLayout']=_0x80ae07(0x847));}}}}}}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x4d8)]=Game_Temp[_0x4376f0(0x705)]['requestBalloon'],Game_Temp[_0x4376f0(0x705)][_0x4376f0(0x2a4)]=function(_0x345853,_0x976574){const _0x521d9c=_0x4376f0;SceneManager[_0x521d9c(0x446)]()?this[_0x521d9c(0x1fc)](_0x345853,_0x976574):VisuMZ[_0x521d9c(0x19c)]['Game_Temp_requestBalloon']['call'](this,_0x345853,_0x976574);},Game_Temp[_0x4376f0(0x705)][_0x4376f0(0x1fc)]=function(_0x58a528,_0x240637){const _0x80f98c=_0x4376f0,_0x21d31f={'target':_0x58a528,'balloonId':_0x240637};this[_0x80f98c(0xa4b)]=this[_0x80f98c(0xa4b)]||[],this[_0x80f98c(0xa4b)][_0x80f98c(0x6b0)](_0x21d31f);},Game_Temp[_0x4376f0(0x705)][_0x4376f0(0xafa)]=function(){const _0x50c9cb=_0x4376f0;return this['_battleBalloonQueue']=this[_0x50c9cb(0xa4b)]||[],this[_0x50c9cb(0xa4b)]['shift']();},Game_Temp[_0x4376f0(0x705)][_0x4376f0(0xa1c)]=function(){const _0x409453=_0x4376f0;this[_0x409453(0xa4b)]=[];},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x8f0)]=function(){const _0x19c671=_0x4376f0;this['_battleBalloonSprites']===undefined&&(this[_0x19c671(0x6e0)]=[]);for(const _0x5d20db of this[_0x19c671(0x6e0)]){!_0x5d20db[_0x19c671(0x801)]()&&this[_0x19c671(0x718)](_0x5d20db);}this[_0x19c671(0x2e6)]();},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x2e6)]=function(){const _0x2c1ac3=_0x4376f0;for(;;){const _0xc298ce=$gameTemp[_0x2c1ac3(0xafa)]();if(_0xc298ce)this[_0x2c1ac3(0x5ef)](_0xc298ce);else break;}},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x5ef)]=function(_0x5240e6){const _0x3e1a87=_0x4376f0,_0x223890=this[_0x3e1a87(0x683)](_0x5240e6[_0x3e1a87(0x545)]);if(_0x223890){let _0x3d84ea=null;Imported[_0x3e1a87(0xbc1)]&&Array['isArray'](_0x5240e6[_0x3e1a87(0x905)])?_0x3d84ea=new Sprite_IconBalloon():_0x3d84ea=new Sprite_Balloon(),_0x3d84ea[_0x3e1a87(0x2fd)]=_0x5240e6['target'],_0x3d84ea[_0x3e1a87(0x961)]=_0x223890,_0x3d84ea[_0x3e1a87(0x961)][_0x3e1a87(0x75f)]=_0x223890,_0x3d84ea[_0x3e1a87(0x578)](_0x223890,_0x5240e6[_0x3e1a87(0x905)]),BattleManager[_0x3e1a87(0x3b7)](_0x3d84ea),this['_battleBalloonSprites'][_0x3e1a87(0x6b0)](_0x3d84ea);}},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x718)]=function(_0x506847){const _0x2be3e2=_0x4376f0;this[_0x2be3e2(0x6e0)][_0x2be3e2(0x246)](_0x506847),BattleManager[_0x2be3e2(0x777)](_0x506847),_0x506847[_0x2be3e2(0x450)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x278)]=function(_0x30f823,_0x1685d0){},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x556)]=function(){return![];},Spriteset_Battle['prototype']['isAnyBattleBalloonPlaying']=function(){const _0x5d7f5e=_0x4376f0;return this[_0x5d7f5e(0x6e0)]=this[_0x5d7f5e(0x6e0)]||[],this['_battleBalloonSprites']['length']>0x0;},VisuMZ['BattleCore']['Game_System_initialize']=Game_System['prototype'][_0x4376f0(0x72f)],Game_System[_0x4376f0(0x705)][_0x4376f0(0x72f)]=function(){const _0x30c49a=_0x4376f0;VisuMZ['BattleCore'][_0x30c49a(0xc40)]['call'](this),this[_0x30c49a(0x8f7)]();},Game_System[_0x4376f0(0x705)][_0x4376f0(0x8f7)]=function(){const _0x70ed35=_0x4376f0;this[_0x70ed35(0x3e5)]=this[_0x70ed35(0x3e5)]||[];},Game_System[_0x4376f0(0x705)][_0x4376f0(0xa6d)]=function(){const _0x438e41=_0x4376f0;if(this[_0x438e41(0x3e5)]===undefined)this['initBattleCore']();return this[_0x438e41(0x3e5)];},Game_System[_0x4376f0(0x705)][_0x4376f0(0x631)]=function(_0x470b43){const _0x2f1d61=_0x4376f0;if(this['_defeatedEnemies']===undefined)this[_0x2f1d61(0x8f7)]();if(!_0x470b43)return;if(this[_0x2f1d61(0x3e5)][_0x2f1d61(0x3e9)](_0x470b43))return;this[_0x2f1d61(0x3e5)][_0x2f1d61(0x6b0)](_0x470b43),this['_defeatedEnemies'][_0x2f1d61(0xc3a)]((_0x528795,_0x2ac1ed)=>_0x528795-_0x2ac1ed);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x92f)]=Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x97e)],Game_BattlerBase[_0x4376f0(0x705)]['addNewState']=function(_0x3590e3){const _0x144950=_0x4376f0,_0x43b574=this[_0x144950(0x5c4)](),_0x5c761b=this['stateMotionIndex']();VisuMZ[_0x144950(0x19c)]['Game_BattlerBase_addNewState']['call'](this,_0x3590e3),this[_0x144950(0x7b4)]()&&_0x43b574&&this[_0x144950(0x57e)]()&&(this['_visualHpGauge_JustDied']=!this[_0x144950(0x8f1)](),$gameSystem[_0x144950(0x631)](this[_0x144950(0xaca)]())),SceneManager[_0x144950(0x446)]()&&_0x5c761b!==this[_0x144950(0x2db)]()&&(this[_0x144950(0x3f1)]()&&this[_0x144950(0x3f1)]()[_0x144950(0x80a)]());},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x8f1)]=function(){const _0x1892e7=_0x4376f0;return $gameSystem['getDefeatedEnemies']()[_0x1892e7(0x3e9)](this['_enemyId']);},VisuMZ['BattleCore'][_0x4376f0(0x71d)]=Game_BattlerBase[_0x4376f0(0x705)]['eraseState'],Game_BattlerBase[_0x4376f0(0x705)]['eraseState']=function(_0x192d62){const _0x35582d=_0x4376f0,_0x399ff7=this[_0x35582d(0x7e2)][_0x35582d(0x3e9)](_0x192d62),_0x71414c=this[_0x35582d(0x2db)]();VisuMZ[_0x35582d(0x19c)][_0x35582d(0x71d)][_0x35582d(0x34b)](this,_0x192d62),this[_0x35582d(0x7b4)]()&&_0x192d62===this[_0x35582d(0x706)]()&&this[_0x35582d(0x5c4)]()&&(this[_0x35582d(0x923)]=![]),!this['_tempActor']&&!this[_0x35582d(0x336)]&&SceneManager[_0x35582d(0x446)]()&&(_0x399ff7&&!this['_states'][_0x35582d(0x3e9)](_0x192d62)&&this['requestMotionRefresh'](),_0x71414c!==this[_0x35582d(0x2db)]()&&(this[_0x35582d(0x3f1)]()&&this[_0x35582d(0x3f1)]()[_0x35582d(0x80a)]()));},VisuMZ['BattleCore'][_0x4376f0(0x9ca)]=Game_Action[_0x4376f0(0x705)][_0x4376f0(0x976)],Game_Action['prototype'][_0x4376f0(0x976)]=function(){const _0x4dce8c=_0x4376f0;VisuMZ['BattleCore'][_0x4dce8c(0x9ca)][_0x4dce8c(0x34b)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x4dce8c(0xb5a)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x4dce8c(0x28f)]=_0x4dce8c(0x847),this[_0x4dce8c(0x1b2)]();},Game_Action['prototype'][_0x4376f0(0x1b2)]=function(){this['_targetBattlerKey']='';},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x194)]=Game_Action[_0x4376f0(0x705)]['setSubject'],Game_Action[_0x4376f0(0x705)]['setSubject']=function(_0x2eb91c){const _0x5e0934=_0x4376f0;VisuMZ[_0x5e0934(0x19c)][_0x5e0934(0x194)][_0x5e0934(0x34b)](this,_0x2eb91c),this[_0x5e0934(0x1b2)]();},VisuMZ[_0x4376f0(0x19c)]['Game_Action_setSkill']=Game_Action['prototype'][_0x4376f0(0x338)],Game_Action[_0x4376f0(0x705)][_0x4376f0(0x338)]=function(_0x3aeb08){const _0x2292b8=_0x4376f0;VisuMZ[_0x2292b8(0x19c)][_0x2292b8(0x6d3)][_0x2292b8(0x34b)](this,_0x3aeb08),this[_0x2292b8(0x1b2)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x50b)]=Game_Action[_0x4376f0(0x705)][_0x4376f0(0xa06)],Game_Action[_0x4376f0(0x705)]['setItem']=function(_0x316046){const _0x21b83c=_0x4376f0;VisuMZ[_0x21b83c(0x19c)][_0x21b83c(0x50b)]['call'](this,_0x316046),this[_0x21b83c(0x1b2)]();},Game_Action[_0x4376f0(0x705)]['makeDamageValue']=function(_0x578ea2,_0x359033){const _0x15359e=_0x4376f0;return VisuMZ[_0x15359e(0x19c)][_0x15359e(0xae8)][_0x15359e(0x46a)]['OverallFormulaJS'][_0x15359e(0x34b)](this,_0x578ea2,_0x359033);},Game_Action['prototype'][_0x4376f0(0x63b)]=function(_0x5afc35,_0x412b0d){const _0x2bdfef=_0x4376f0;return VisuMZ[_0x2bdfef(0x19c)][_0x2bdfef(0xae8)][_0x2bdfef(0x46a)][_0x2bdfef(0x17c)][_0x2bdfef(0x34b)](this,_0x5afc35,_0x412b0d);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x1c3)]=function(_0x147bd3,_0x1b42b4){const _0xdc0bba=_0x4376f0;return VisuMZ['BattleCore'][_0xdc0bba(0xae8)][_0xdc0bba(0x46a)][_0xdc0bba(0xc39)]['call'](this,_0x147bd3,_0x1b42b4);},VisuMZ['BattleCore'][_0x4376f0(0xb4a)]=Game_Action[_0x4376f0(0x705)]['itemHit'],Game_Action[_0x4376f0(0x705)][_0x4376f0(0x906)]=function(_0x3444c7){const _0x3e0ede=_0x4376f0,_0x470b24=this[_0x3e0ede(0x269)]()[_0x3e0ede(0x54f)];if(_0x470b24[_0x3e0ede(0x844)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x470b24[_0x3e0ede(0x844)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x149874=VisuMZ[_0x3e0ede(0x19c)]['Game_Action_itemHit'][_0x3e0ede(0x34b)](this,_0x3444c7);return _0x149874=this[_0x3e0ede(0xb5a)]['hitRate']*_0x149874+this[_0x3e0ede(0xb5a)][_0x3e0ede(0x508)],$gameParty['inBattle']()&&(_0x149874=this[_0x3e0ede(0x9de)](_0x149874,_0x3444c7)),_0x149874;}}},VisuMZ['BattleCore']['Game_Action_updateLastTarget']=Game_Action[_0x4376f0(0x705)][_0x4376f0(0x930)],Game_Action[_0x4376f0(0x705)][_0x4376f0(0x930)]=function(_0x53952e){const _0x3cc177=_0x4376f0;this[_0x3cc177(0x2d2)]=!![],VisuMZ['BattleCore'][_0x3cc177(0x181)][_0x3cc177(0x34b)](this,_0x53952e),this[_0x3cc177(0x2d2)]=undefined;},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x45f)]=function(_0x18b853){const _0x659221=_0x4376f0;window[_0x659221(0xb7f)]=this,window['a']=this[_0x659221(0x8d8)](),window['b']=_0x18b853,window[_0x659221(0x8f6)]=this[_0x659221(0x8d8)](),window[_0x659221(0x545)]=_0x18b853,window['obj']=this[_0x659221(0x269)](),window[_0x659221(0xbd1)]=this[_0x659221(0x269)](),window[_0x659221(0x269)]=this[_0x659221(0x269)]();},Game_Action[_0x4376f0(0x705)]['clearGlobalVariables']=function(_0x8d31ef){const _0x279784=_0x4376f0;window[_0x279784(0xb7f)]=undefined,window['a']=undefined,window['b']=undefined,window['user']=undefined,window[_0x279784(0x545)]=undefined,window[_0x279784(0x79d)]=undefined,window['skill']=undefined,window[_0x279784(0x269)]=undefined;},Game_Action['prototype'][_0x4376f0(0x9de)]=function(_0x4a6627,_0x5653eb){const _0x68a969=_0x4376f0;if(this['_bypass_applyBattleCoreHitRateJS'])return _0x4a6627;this['declareGlobalVariables'](_0x5653eb),window[_0x68a969(0x21d)]=_0x4a6627;const _0x5d9f31=VisuMZ[_0x68a969(0x19c)][_0x68a969(0x13a)];if(this[_0x68a969(0x269)]()){if(this['item']()[_0x68a969(0x54f)][_0x68a969(0x844)](_0x5d9f31['jsAccuracy'])){const _0x277cca=String(RegExp['$1']);try{eval(_0x277cca);}catch(_0x331a98){if($gameTemp['isPlaytest']())console[_0x68a969(0x28e)](_0x331a98);}}}{const _0x442ba5=this[_0x68a969(0x8d8)]()['traitObjects']();for(const _0x2bc7f6 of _0x442ba5){if(!_0x2bc7f6)continue;if(_0x2bc7f6[_0x68a969(0x54f)]['match'](_0x5d9f31[_0x68a969(0xc14)])){const _0x41e6bd=String(RegExp['$1']);try{eval(_0x41e6bd);}catch(_0x1fcde3){if($gameTemp[_0x68a969(0xb0f)]())console[_0x68a969(0x28e)](_0x1fcde3);}}}}{const _0x28cff4=_0x5653eb['traitObjects']();for(const _0x5add36 of _0x28cff4){if(!_0x5add36)continue;if(_0x5add36['note'][_0x68a969(0x844)](_0x5d9f31[_0x68a969(0x894)])){const _0x52f5e7=String(RegExp['$1']);try{eval(_0x52f5e7);}catch(_0x5533eb){if($gameTemp['isPlaytest']())console['log'](_0x5533eb);}}}}return _0x4a6627=window[_0x68a969(0x21d)],this[_0x68a969(0xc42)](_0x5653eb),_0x4a6627;},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x2ab)]=function(_0xda7824){const _0x2f6b02=_0x4376f0;if(!this[_0x2f6b02(0x269)]()['damage'][_0x2f6b02(0x2f0)])return 0x0;let _0x5618f4=VisuMZ[_0x2f6b02(0x19c)]['Settings']['Damage'][_0x2f6b02(0x2e7)]['call'](this,_0xda7824);return _0x5618f4=this['_multipliers'][_0x2f6b02(0x90e)]*_0x5618f4+this['_multipliers']['criticalHitFlat'],$gameParty[_0x2f6b02(0x60f)]()&&(_0x5618f4=this['applyBattleCoreCriticalHitRateJS'](_0x5618f4,_0xda7824)),_0x5618f4;},Game_Action[_0x4376f0(0x705)]['applyBattleCoreCriticalHitRateJS']=function(_0x5a5bcd,_0x53dea3){const _0x2c4654=_0x4376f0;this[_0x2c4654(0x45f)](_0x53dea3),window['rate']=_0x5a5bcd;const _0x370dd8=VisuMZ[_0x2c4654(0x19c)][_0x2c4654(0x13a)];{const _0x9ea1a2=this[_0x2c4654(0x8d8)]()['traitObjects']();for(const _0xc92e01 of _0x9ea1a2){if(!_0xc92e01)continue;if(_0xc92e01[_0x2c4654(0x54f)][_0x2c4654(0x844)](_0x370dd8[_0x2c4654(0x467)])){const _0x2a8980=String(RegExp['$1']);try{eval(_0x2a8980);}catch(_0x7cd38a){if($gameTemp['isPlaytest']())console['log'](_0x7cd38a);}}}}{const _0xcfabe3=_0x53dea3[_0x2c4654(0x91b)]();for(const _0x2e1e06 of _0xcfabe3){if(!_0x2e1e06)continue;if(_0x2e1e06[_0x2c4654(0x54f)][_0x2c4654(0x844)](_0x370dd8[_0x2c4654(0x83c)])){const _0x1afa7a=String(RegExp['$1']);try{eval(_0x1afa7a);}catch(_0x72fb3d){if($gameTemp['isPlaytest']())console[_0x2c4654(0x28e)](_0x72fb3d);}}}}return _0x5a5bcd=window[_0x2c4654(0x21d)],this[_0x2c4654(0xc42)](_0x53dea3),_0x5a5bcd;},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x83b)]=function(_0x53a355,_0x58f855){const _0x22ddae=_0x4376f0;this[_0x22ddae(0x45f)](_0x58f855);for(const _0xbd20db of this['subject']()['traitObjects']()){if(!_0xbd20db)continue;key=VisuMZ[_0x22ddae(0x19c)][_0x22ddae(0x123)](_0xbd20db,'jsCritRateAsUser'),VisuMZ[_0x22ddae(0x19c)]['JS'][key]&&(_0x53a355=VisuMZ['BattleCore']['JS'][key][_0x22ddae(0x34b)](this,this[_0x22ddae(0x8d8)](),_0x58f855,this[_0x22ddae(0x269)](),_0x53a355));}for(const _0x168d8a of _0x58f855[_0x22ddae(0x91b)]()){if(!_0x168d8a)continue;key=VisuMZ['BattleCore'][_0x22ddae(0x123)](_0x168d8a,_0x22ddae(0x83c)),VisuMZ[_0x22ddae(0x19c)]['JS'][key]&&(_0x53a355=VisuMZ['BattleCore']['JS'][key][_0x22ddae(0x34b)](this,this[_0x22ddae(0x8d8)](),_0x58f855,this[_0x22ddae(0x269)](),_0x53a355));}return this['clearGlobalVariables'](_0x58f855),_0x53a355;},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x8f4)]=function(_0x41edac){const _0x400f48=_0x4376f0;return _0x41edac=VisuMZ[_0x400f48(0x19c)]['Settings'][_0x400f48(0x46a)][_0x400f48(0x411)][_0x400f48(0x34b)](this,_0x41edac),_0x41edac=this['_multipliers']['criticalDmgRate']*_0x41edac+this[_0x400f48(0xb5a)][_0x400f48(0x26c)],_0x41edac;},VisuMZ['BattleCore']['Game_Action_evalDamageFormula']=Game_Action['prototype']['evalDamageFormula'],Game_Action['prototype'][_0x4376f0(0x71a)]=function(_0x54fd36){const _0x3090a1=_0x4376f0;if(this['_customDamageFormula']!==_0x3090a1(0x847))return this[_0x3090a1(0x3ac)](_0x54fd36);else return DataManager['getDamageStyle'](this[_0x3090a1(0x269)]())===_0x3090a1(0x1f2)?VisuMZ['BattleCore'][_0x3090a1(0x5e0)][_0x3090a1(0x34b)](this,_0x54fd36):this[_0x3090a1(0x5e3)](_0x54fd36);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x2f5)]=function(_0x2eb9f7){const _0x4bb66a=_0x4376f0;this[_0x4bb66a(0x28f)]=_0x2eb9f7;},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x3ac)]=function(_0x3cf0e8){const _0x413afb=_0x4376f0,_0x36e6fe=this[_0x413afb(0x269)](),_0x597a6a=_0x36e6fe['damage'][_0x413afb(0x979)];_0x36e6fe['damage']['formula']=this[_0x413afb(0x28f)];let _0x58b956=VisuMZ[_0x413afb(0x19c)]['Game_Action_evalDamageFormula'][_0x413afb(0x34b)](this,_0x3cf0e8);return _0x36e6fe[_0x413afb(0x121)][_0x413afb(0x979)]=_0x597a6a,_0x58b956;},Game_Action[_0x4376f0(0x705)]['damageStyle']=function(){const _0x551c82=_0x4376f0;if(this[_0x551c82(0x269)]()[_0x551c82(0x54f)][_0x551c82(0x844)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x54bba1=String(RegExp['$1'])[_0x551c82(0x896)]()[_0x551c82(0x5cf)]();return _0x54bba1;}return _0x551c82(0x1f2);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x5e3)]=function(_0x587161){const _0xc7bb7d=_0x4376f0,_0x290118=DataManager[_0xc7bb7d(0x4fe)](this[_0xc7bb7d(0x269)]()),_0x378b31=VisuMZ[_0xc7bb7d(0x82d)][_0x290118];try{return _0x378b31[_0xc7bb7d(0xa12)][_0xc7bb7d(0x34b)](this,_0x587161);}catch(_0x18833f){if($gameTemp[_0xc7bb7d(0xb0f)]())console[_0xc7bb7d(0x28e)](_0x18833f);return VisuMZ[_0xc7bb7d(0x19c)][_0xc7bb7d(0x5e0)]['call'](this);}},Game_Action['prototype']['applyArmorModifiers']=function(_0x70b452,_0x24f947){const _0xbb2166=_0x4376f0;if(this[_0xbb2166(0x7d8)]())return _0x24f947;const _0x1c4dd2=this[_0xbb2166(0x8d8)](),_0x1407ab=_0x70b452;let _0x34e023=[],_0x44e268=[];_0x34e023[_0xbb2166(0x6b0)](this['_armorPenetration'][_0xbb2166(0x857)],this[_0xbb2166(0xadb)][_0xbb2166(0x49b)]),_0x44e268['push'](this[_0xbb2166(0xadb)][_0xbb2166(0xba3)],this[_0xbb2166(0xadb)][_0xbb2166(0x991)]);const _0x5dfe81=this[_0xbb2166(0x620)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5d2ff8=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x25733b=this[_0xbb2166(0x620)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x511d4d=this[_0xbb2166(0x620)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x34e023=_0x34e023[_0xbb2166(0x4f7)](_0x1407ab[_0xbb2166(0x91b)]()[_0xbb2166(0x424)](_0x1823b4=>_0x1823b4&&_0x1823b4[_0xbb2166(0x54f)]['match'](_0x5dfe81)?Number(RegExp['$1']):0x0)),_0x44e268=_0x44e268[_0xbb2166(0x4f7)](_0x1407ab['traitObjects']()['map'](_0x281b4e=>_0x281b4e&&_0x281b4e[_0xbb2166(0x54f)]['match'](_0x5d2ff8)?Number(RegExp['$1'])/0x64:0x0)),_0x34e023=_0x34e023['concat'](_0x1c4dd2[_0xbb2166(0x91b)]()['map'](_0x16c625=>_0x16c625&&_0x16c625[_0xbb2166(0x54f)][_0xbb2166(0x844)](_0x25733b)?Number(RegExp['$1']):0x0)),_0x44e268=_0x44e268[_0xbb2166(0x4f7)](_0x1c4dd2[_0xbb2166(0x91b)]()[_0xbb2166(0x424)](_0x37b39b=>_0x37b39b&&_0x37b39b[_0xbb2166(0x54f)]['match'](_0x511d4d)?Number(RegExp['$1'])/0x64:0x0)),this[_0xbb2166(0x269)]()[_0xbb2166(0x54f)][_0xbb2166(0x844)](_0x25733b)&&_0x34e023[_0xbb2166(0x6b0)](Number(RegExp['$1'])),this[_0xbb2166(0x269)]()['note'][_0xbb2166(0x844)](_0x511d4d)&&_0x44e268[_0xbb2166(0x6b0)](Number(RegExp['$1'])),_0x24f947=_0x34e023[_0xbb2166(0x207)]((_0x480374,_0x123f16)=>_0x480374-_0x123f16,_0x24f947),_0x24f947>0x0&&(_0x24f947=_0x44e268[_0xbb2166(0x207)]((_0x190226,_0x5f0ba1)=>_0x190226*(0x1-_0x5f0ba1),_0x24f947)),_0x24f947;},VisuMZ[_0x4376f0(0x19c)]['Game_Action_executeDamage']=Game_Action[_0x4376f0(0x705)][_0x4376f0(0x5ce)],Game_Action[_0x4376f0(0x705)][_0x4376f0(0x5ce)]=function(_0x3e96d2,_0x33c172){const _0x20aa57=_0x4376f0;_0x33c172=_0x33c172*this[_0x20aa57(0xb5a)][_0x20aa57(0x24e)],_0x33c172+=this[_0x20aa57(0xb5a)][_0x20aa57(0x614)]*(_0x33c172>=0x0?0x1:-0x1),_0x33c172=this['applyBattleCoreJS'](_0x20aa57(0xb52),_0x3e96d2,_0x33c172,![]),_0x33c172=this['applyDamageCaps'](_0x33c172),_0x33c172>0x0?_0x33c172=Math[_0x20aa57(0x554)](_0x33c172):_0x33c172=Math[_0x20aa57(0x627)](_0x33c172),this[_0x20aa57(0x283)]=_0x33c172,this[_0x20aa57(0x93b)]=this[_0x20aa57(0x93b)]||0x0,this[_0x20aa57(0x93b)]+=_0x33c172,VisuMZ[_0x20aa57(0x19c)][_0x20aa57(0x50f)][_0x20aa57(0x34b)](this,_0x3e96d2,_0x33c172),this['applyBattleCoreJS'](_0x20aa57(0x364),_0x3e96d2,_0x33c172,!![]);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x900)]=function(_0x1e75ee){const _0x31b8e7=_0x4376f0;if(this[_0x31b8e7(0x9bf)]())return _0x1e75ee;return _0x1e75ee=this['applySoftDamageCap'](_0x1e75ee),_0x1e75ee=this['applyHardDamageCap'](_0x1e75ee),_0x1e75ee;},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x9bf)]=function(){const _0x43259d=_0x4376f0,_0x3c6a33=/<BYPASS DAMAGE CAP>/i;if(this[_0x43259d(0x269)]()['note'][_0x43259d(0x844)](_0x3c6a33))return!![];if(this[_0x43259d(0x8d8)]()['traitObjects']()[_0x43259d(0x4af)](_0x592c99=>_0x592c99&&_0x592c99[_0x43259d(0x54f)][_0x43259d(0x844)](_0x3c6a33)))return!![];return!VisuMZ['BattleCore'][_0x43259d(0xae8)]['Damage'][_0x43259d(0x14f)];},Game_Action[_0x4376f0(0x705)][_0x4376f0(0xb55)]=function(_0x184a89){const _0x5a7b16=_0x4376f0;if(!VisuMZ[_0x5a7b16(0x19c)][_0x5a7b16(0xae8)][_0x5a7b16(0x46a)][_0x5a7b16(0x5d3)])return _0x184a89;const _0x4b06a4=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x5a7b16(0x269)]()[_0x5a7b16(0x54f)][_0x5a7b16(0x844)](_0x4b06a4))return _0x184a89;if(this[_0x5a7b16(0x8d8)]()['traitObjects']()[_0x5a7b16(0x4af)](_0x5cee4d=>_0x5cee4d&&_0x5cee4d[_0x5a7b16(0x54f)][_0x5a7b16(0x844)](_0x4b06a4)))return _0x184a89;const _0x54ae3e=_0x184a89<0x0?-0x1:0x1;_0x184a89=Math[_0x5a7b16(0x54d)](_0x184a89);let _0x106b84=this[_0x5a7b16(0x8d8)]()['softDamageCapRate']();this[_0x5a7b16(0x269)]()[_0x5a7b16(0x54f)][_0x5a7b16(0x844)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x106b84+=Number(RegExp['$1'])/0x64);_0x106b84=_0x106b84[_0x5a7b16(0x745)](0.01,0x1);const _0x295e38=this[_0x5a7b16(0x6fd)](),_0x294e12=_0x106b84*_0x295e38;if(_0x184a89>_0x294e12&&_0x295e38>_0x294e12){_0x184a89-=_0x294e12;const _0x204a5b=VisuMZ[_0x5a7b16(0x19c)][_0x5a7b16(0xae8)][_0x5a7b16(0x46a)][_0x5a7b16(0x151)],_0x1851d0=Math[_0x5a7b16(0xa63)](0x1-_0x184a89/((_0x295e38-_0x294e12)*_0x204a5b+_0x184a89),0.01);_0x184a89*=_0x1851d0,_0x184a89+=_0x294e12;}return _0x184a89*_0x54ae3e;},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x6fd)]=function(){const _0x40be33=_0x4376f0;return this[_0x40be33(0x269)]()[_0x40be33(0x54f)][_0x40be33(0x844)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x40be33(0x8d8)]()['hardDamageCap']();},Game_Action[_0x4376f0(0x705)][_0x4376f0(0xb68)]=function(_0x1e411d){const _0x8d77cf=_0x4376f0;let _0x4efa60=this[_0x8d77cf(0x6fd)]();return _0x1e411d[_0x8d77cf(0x745)](-_0x4efa60,_0x4efa60);},Game_Action['prototype'][_0x4376f0(0xbce)]=function(){const _0x4fcca7=_0x4376f0;if(!this[_0x4fcca7(0x269)]())return![];if(!$gameParty[_0x4fcca7(0x60f)]())return![];return(this[_0x4fcca7(0x269)]()[_0x4fcca7(0x54f)]||'')[_0x4fcca7(0x844)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x9e8)]=function(_0xb8c3f9){const _0x3fe3f9=_0x4376f0;if(this['shouldDisperseDamage']()){let _0x1a277a=BattleManager['_targets'];_0xb8c3f9/=_0x1a277a[_0x3fe3f9(0xa3a)],this[_0x3fe3f9(0x66c)]()&&(_0xb8c3f9*=this[_0x3fe3f9(0x8d8)]()[_0x3fe3f9(0x63c)]()+0x1),_0xb8c3f9=_0xb8c3f9>0x0?Math[_0x3fe3f9(0x554)](_0xb8c3f9):Math['floor'](_0xb8c3f9);}return _0xb8c3f9;},VisuMZ['BattleCore'][_0x4376f0(0x56d)]=Game_Action[_0x4376f0(0x705)][_0x4376f0(0x248)],Game_Action['prototype'][_0x4376f0(0x248)]=function(_0x574e04,_0x468c4f){const _0x9384dc=_0x4376f0;let _0x3ff6e7=VisuMZ['BattleCore'][_0x9384dc(0x56d)][_0x9384dc(0x34b)](this,_0x574e04,_0x468c4f);return this[_0x9384dc(0x9e8)](_0x3ff6e7);},Game_Action[_0x4376f0(0x705)]['itemEffectRecoverHp']=function(_0x5ed833,_0x533ab9){const _0x4373d4=_0x4376f0;let _0x5676d7=(_0x5ed833['mhp']*_0x533ab9['value1']+_0x533ab9['value2'])*_0x5ed833['rec'];_0x5676d7=this[_0x4373d4(0x9e8)](_0x5676d7),this['isItem']()&&(_0x5676d7*=this[_0x4373d4(0x8d8)]()['pha']),_0x5676d7=Math[_0x4373d4(0x627)](_0x5676d7),_0x5676d7!==0x0&&(_0x5ed833[_0x4373d4(0x140)](_0x5676d7),this['makeSuccess'](_0x5ed833));},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x1ba)]=function(_0x32fc93,_0x2061db){const _0x1d0132=_0x4376f0;let _0x213774=(_0x32fc93[_0x1d0132(0x2b7)]*_0x2061db['value1']+_0x2061db[_0x1d0132(0x95b)])*_0x32fc93[_0x1d0132(0x929)];_0x213774=this[_0x1d0132(0x9e8)](_0x213774),this[_0x1d0132(0x581)]()&&(_0x213774*=this[_0x1d0132(0x8d8)]()[_0x1d0132(0x76d)]),_0x213774=Math[_0x1d0132(0x627)](_0x213774),_0x213774!==0x0&&(_0x32fc93[_0x1d0132(0x1a2)](_0x213774),this[_0x1d0132(0xb9a)](_0x32fc93));},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x57a)]=function(_0x419e56,_0x10d907){const _0x410058=_0x4376f0;let _0x3d06f2=Math[_0x410058(0x627)](_0x10d907[_0x410058(0x7a0)]);_0x3d06f2=this['disperseDamage'](_0x3d06f2),_0x3d06f2!==0x0&&(_0x419e56[_0x410058(0xb8e)](_0x3d06f2),this['makeSuccess'](_0x419e56));},VisuMZ[_0x4376f0(0x19c)]['Game_Action_apply']=Game_Action[_0x4376f0(0x705)][_0x4376f0(0xb01)],Game_Action[_0x4376f0(0x705)]['apply']=function(_0x506080){const _0x379b79=_0x4376f0;if(_0x506080&&_0x506080[_0x379b79(0x7b4)]())_0x506080[_0x379b79(0x891)]();this[_0x379b79(0x5f4)]('PreApply%1JS',_0x506080,0x0,!![]),VisuMZ[_0x379b79(0x19c)][_0x379b79(0x145)][_0x379b79(0x34b)](this,_0x506080),this[_0x379b79(0x5f4)](_0x379b79(0x4b3),_0x506080,this['_executedValue']||0x0,!![]),this[_0x379b79(0xb3c)](_0x506080);},Game_Action[_0x4376f0(0x705)]['applyBattleCoreJS']=function(_0x84bbdd,_0x41cfff,_0x169895,_0xe5627e){const _0xb40f58=_0x4376f0;if(this[_0xb40f58(0x336)]||this[_0xb40f58(0x316)])return;_0x169895=_0x169895||0x0;const _0x56e429=_0x169895,_0x3faff8=VisuMZ[_0xb40f58(0x19c)]['Settings'][_0xb40f58(0x956)],_0xe89e01=_0x84bbdd['format']('');if(_0x3faff8[_0xe89e01]){_0x169895=_0x3faff8[_0xe89e01][_0xb40f58(0x34b)](this,_0x169895,_0x41cfff);if(_0xe5627e)_0x169895=_0x56e429;}let _0x1e16e1=VisuMZ[_0xb40f58(0x19c)][_0xb40f58(0x123)](this[_0xb40f58(0x269)](),_0x84bbdd['format'](''));if(VisuMZ[_0xb40f58(0x19c)]['JS'][_0x1e16e1]){_0x169895=VisuMZ[_0xb40f58(0x19c)]['JS'][_0x1e16e1][_0xb40f58(0x34b)](this,this[_0xb40f58(0x8d8)](),_0x41cfff,this['item'](),_0x169895);if(_0xe5627e)_0x169895=_0x56e429;}for(const _0x1c7c7d of this[_0xb40f58(0x8d8)]()[_0xb40f58(0x91b)]()){if(!_0x1c7c7d)continue;_0x1e16e1=VisuMZ[_0xb40f58(0x19c)][_0xb40f58(0x123)](_0x1c7c7d,_0x84bbdd['format'](_0xb40f58(0xa91)));if(VisuMZ[_0xb40f58(0x19c)]['JS'][_0x1e16e1]){_0x169895=VisuMZ[_0xb40f58(0x19c)]['JS'][_0x1e16e1][_0xb40f58(0x34b)](this,this[_0xb40f58(0x8d8)](),_0x41cfff,_0x1c7c7d,_0x169895);if(_0xe5627e)_0x169895=_0x56e429;}}for(const _0x334e0c of _0x41cfff[_0xb40f58(0x91b)]()){if(!_0x334e0c)continue;_0x1e16e1=VisuMZ[_0xb40f58(0x19c)]['createKeyJS'](_0x334e0c,_0x84bbdd[_0xb40f58(0xa30)](_0xb40f58(0x8b1)));if(VisuMZ['BattleCore']['JS'][_0x1e16e1]){_0x169895=VisuMZ[_0xb40f58(0x19c)]['JS'][_0x1e16e1][_0xb40f58(0x34b)](this,this['subject'](),_0x41cfff,_0x334e0c,_0x169895);if(_0xe5627e)_0x169895=_0x56e429;}}return _0x169895;},Game_Action[_0x4376f0(0x705)][_0x4376f0(0xa21)]=function(_0x1d0d83){const _0x44c88f=_0x4376f0,_0x1496ed=this[_0x44c88f(0x93b)]||0x0,_0x4f0f39=VisuMZ[_0x44c88f(0x19c)]['Settings'][_0x44c88f(0x956)],_0x1db2aa=_0x1d0d83['format']('');_0x4f0f39[_0x1db2aa]&&_0x4f0f39[_0x1db2aa]['call'](this,_0x1496ed);let _0x49d016=VisuMZ[_0x44c88f(0x19c)][_0x44c88f(0x123)](this['item'](),_0x1d0d83);VisuMZ[_0x44c88f(0x19c)]['JS'][_0x49d016]&&VisuMZ['BattleCore']['JS'][_0x49d016][_0x44c88f(0x34b)](this,this[_0x44c88f(0x8d8)](),this['subject'](),this[_0x44c88f(0x269)](),_0x1496ed);for(const _0xfd54fa of this[_0x44c88f(0x8d8)]()['traitObjects']()){if(!_0xfd54fa)continue;_0x49d016=VisuMZ['BattleCore'][_0x44c88f(0x123)](_0xfd54fa,_0x1d0d83),VisuMZ[_0x44c88f(0x19c)]['JS'][_0x49d016]&&VisuMZ[_0x44c88f(0x19c)]['JS'][_0x49d016][_0x44c88f(0x34b)](this,this[_0x44c88f(0x8d8)](),this[_0x44c88f(0x8d8)](),_0xfd54fa,_0x1496ed);}},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x63a)]=function(){const _0x301dde=_0x4376f0;return VisuMZ[_0x301dde(0x19c)][_0x301dde(0xae8)][_0x301dde(0x956)][_0x301dde(0x60a)]['call'](this);},Game_Action[_0x4376f0(0x705)]['allowRandomSpeed']=function(){const _0x5382b1=_0x4376f0;return VisuMZ[_0x5382b1(0x19c)][_0x5382b1(0xae8)]['Mechanics']['AllowRandomSpeed'];},Game_Action['prototype'][_0x4376f0(0x193)]=function(){const _0x476017=_0x4376f0;if(this[_0x476017(0x619)]===_0x476017(0x821))return![];if(this[_0x476017(0x619)]==='all\x20enemies')return![];if(!this[_0x476017(0x269)]())return![];return this[_0x476017(0x269)]()['note']['match'](/<JS TARGETS>/i);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x837)]=function(){const _0x6767af=_0x4376f0;if(this[_0x6767af(0x619)]===_0x6767af(0x821))return![];if(this['_targetBattlerKey']===_0x6767af(0x44b))return![];if(!this[_0x6767af(0x24c)]&&this['subject']()[_0x6767af(0x6c4)]())return![];if(this[_0x6767af(0x193)]())return!![];if(!this['item']())return![];return typeof this[_0x6767af(0x269)]()['scope']===_0x6767af(0x9db);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x5e6)]=Game_Action[_0x4376f0(0x705)]['isForOpponent'],Game_Action['prototype'][_0x4376f0(0x192)]=function(){const _0x30a081=_0x4376f0;if(this[_0x30a081(0x619)]===_0x30a081(0x821))return![];if(this['_targetBattlerKey']===_0x30a081(0x44b))return!![];return this[_0x30a081(0x837)]()&&!this[_0x30a081(0x193)]()?this['isForOpponentBattleCore']():VisuMZ['BattleCore']['Game_Action_isForOpponent'][_0x30a081(0x34b)](this);},Game_Action['prototype']['isForOpponentBattleCore']=function(){const _0x29da61=_0x4376f0,_0x1d6858=String(this['item']()[_0x29da61(0x4e9)]);if(_0x1d6858[_0x29da61(0x844)](/ANY/i))return!![];return _0x1d6858['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x79f)]=Game_Action[_0x4376f0(0x705)]['isForFriend'],Game_Action['prototype'][_0x4376f0(0x6f1)]=function(){const _0x349574=_0x4376f0;if(this[_0x349574(0x619)]===_0x349574(0x821))return!![];if(this[_0x349574(0x619)]==='all\x20enemies')return![];return this[_0x349574(0x837)]()&&!this[_0x349574(0x193)]()?this[_0x349574(0x3db)]():VisuMZ['BattleCore'][_0x349574(0x79f)][_0x349574(0x34b)](this);},Game_Action[_0x4376f0(0x705)]['isForFriendBattleCore']=function(){const _0x312ef1=_0x4376f0,_0x483f4f=String(this['item']()[_0x312ef1(0x4e9)]);return _0x483f4f['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x84d)]=function(){const _0x677e8c=_0x4376f0;if(this[_0x677e8c(0x837)]()&&!this[_0x677e8c(0x193)]()){const _0x37aa7d=String(this[_0x677e8c(0x269)]()[_0x677e8c(0x4e9)]);return _0x37aa7d[_0x677e8c(0x844)](/(?:ENEMY|FOE)/i)&&_0x37aa7d[_0x677e8c(0x844)](/OR/i)&&_0x37aa7d[_0x677e8c(0x844)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action['prototype']['isForAnyoneFocusFriends']=function(){const _0x4ed183=_0x4376f0;if(this[_0x4ed183(0x84d)]()){const _0x1b4f0a=String(this[_0x4ed183(0x269)]()[_0x4ed183(0x4e9)]);if(_0x1b4f0a[_0x4ed183(0x844)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x4376f0(0x705)]['isForAnyoneFocusOpponents']=function(){const _0x2213b9=_0x4376f0;if(this[_0x2213b9(0x84d)]()){const _0x3bf181=String(this['item']()[_0x2213b9(0x4e9)]);if(_0x3bf181[_0x2213b9(0x844)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ['BattleCore']['Game_Action_isForAliveFriend']=Game_Action[_0x4376f0(0x705)][_0x4376f0(0xbb2)],Game_Action[_0x4376f0(0x705)]['isForAliveFriend']=function(){const _0x5155af=_0x4376f0;if(this[_0x5155af(0x619)]==='all\x20actors')return!![];return this[_0x5155af(0x837)]()&&!this[_0x5155af(0x193)]()?this[_0x5155af(0xa34)]():VisuMZ[_0x5155af(0x19c)]['Game_Action_isForAliveFriend'][_0x5155af(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x8dc)]=Game_Action[_0x4376f0(0x705)][_0x4376f0(0x5f1)],Game_Action['prototype'][_0x4376f0(0x5f1)]=function(){const _0xa17a3=_0x4376f0;if(this['_targetBattlerKey']===_0xa17a3(0x821))return VisuMZ[_0xa17a3(0x19c)]['Game_Action_isForDeadFriend'][_0xa17a3(0x34b)](this);return VisuMZ['BattleCore'][_0xa17a3(0x8dc)][_0xa17a3(0x34b)](this);},Game_Action['prototype'][_0x4376f0(0xa34)]=function(){const _0x39a70c=_0x4376f0;if(this[_0x39a70c(0x84d)]())return!![];return![];},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x549)]=function(){const _0x553e6f=_0x4376f0;return this[_0x553e6f(0x269)]()&&this[_0x553e6f(0x269)]()[_0x553e6f(0x54f)][_0x553e6f(0x844)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x818)]=Game_Action[_0x4376f0(0x705)]['isForOne'],Game_Action[_0x4376f0(0x705)][_0x4376f0(0x82c)]=function(){const _0x14f27b=_0x4376f0;if(this[_0x14f27b(0x619)]==='all\x20actors')return![];if(this[_0x14f27b(0x619)]===_0x14f27b(0x44b))return![];return this[_0x14f27b(0x837)]()&&!this[_0x14f27b(0x193)]()?this['isForOneBattleCore']():VisuMZ[_0x14f27b(0x19c)][_0x14f27b(0x818)]['call'](this);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x86e)]=function(){const _0x5c7171=_0x4376f0;if(this[_0x5c7171(0x84d)]())return!![];return![];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x472)]=Game_Action[_0x4376f0(0x705)][_0x4376f0(0xa40)],Game_Action[_0x4376f0(0x705)]['isForRandom']=function(){const _0x45f535=_0x4376f0;if(this[_0x45f535(0x619)]==='all\x20actors')return![];if(this[_0x45f535(0x619)]===_0x45f535(0x44b))return![];return this[_0x45f535(0x837)]()&&!this['isCustomBattleScope']()?this['isForRandomBattleCore']():VisuMZ[_0x45f535(0x19c)]['Game_Action_isForRandom'][_0x45f535(0x34b)](this);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x5fd)]=function(){const _0xfe85d6=_0x4376f0,_0x33b5d5=String(this[_0xfe85d6(0x269)]()[_0xfe85d6(0x4e9)]);return _0x33b5d5[_0xfe85d6(0x844)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x4376f0(0x917)]=Game_Action[_0x4376f0(0x705)]['isForAll'],Game_Action[_0x4376f0(0x705)][_0x4376f0(0x539)]=function(){const _0x457977=_0x4376f0;if(this[_0x457977(0x619)]==='all\x20actors')return!![];if(this['_targetBattlerKey']==='all\x20enemies')return!![];return VisuMZ[_0x457977(0x19c)][_0x457977(0x917)][_0x457977(0x34b)](this);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x2c9)]=function(){const _0x446549=_0x4376f0;if(!this[_0x446549(0x269)]())return![];if(this['isForDeadFriend']())return![];return(this[_0x446549(0x269)]()[_0x446549(0x54f)]||'')[_0x446549(0x844)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x4376f0(0x19c)]['Game_Action_testApply']=Game_Action[_0x4376f0(0x705)][_0x4376f0(0x9dd)],Game_Action[_0x4376f0(0x705)][_0x4376f0(0x9dd)]=function(_0x236908){const _0x117df3=_0x4376f0;if(this[_0x117df3(0x549)]()&&_0x236908===this['subject']())return![];return VisuMZ[_0x117df3(0x19c)]['Game_Action_testApply']['call'](this,_0x236908);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x9b0)]=Game_Action[_0x4376f0(0x705)][_0x4376f0(0x8e2)],Game_Action[_0x4376f0(0x705)][_0x4376f0(0x8e2)]=function(){const _0x510b17=_0x4376f0,_0x561bf2=VisuMZ['BattleCore'][_0x510b17(0x9b0)][_0x510b17(0x34b)](this);if(this['isForNotUser']())_0x561bf2['remove'](this[_0x510b17(0x8d8)]());return _0x561bf2;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x69f)]=Game_Action['prototype'][_0x4376f0(0x230)],Game_Action[_0x4376f0(0x705)][_0x4376f0(0x230)]=function(){const _0x5ceda2=_0x4376f0;return this[_0x5ceda2(0x837)]()&&!this[_0x5ceda2(0x193)]()?this[_0x5ceda2(0x429)]():VisuMZ[_0x5ceda2(0x19c)][_0x5ceda2(0x69f)][_0x5ceda2(0x34b)](this);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x429)]=function(){const _0x3bb0dd=_0x4376f0,_0x559406=String(this[_0x3bb0dd(0x269)]()[_0x3bb0dd(0x4e9)]);if(_0x559406[_0x3bb0dd(0x844)](/RANDOM/i))return![];if(_0x559406['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x559406[_0x3bb0dd(0x844)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x559406[_0x3bb0dd(0x844)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x559406[_0x3bb0dd(0x844)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x3bb0dd(0x19c)][_0x3bb0dd(0x69f)]['call'](this);},VisuMZ[_0x4376f0(0x19c)]['Game_Action_makeTargets']=Game_Action[_0x4376f0(0x705)]['makeTargets'],Game_Action[_0x4376f0(0x705)][_0x4376f0(0xae4)]=function(){const _0x2aad01=_0x4376f0;let _0x3a4d2a=[];return this[_0x2aad01(0x837)]()?this[_0x2aad01(0x193)]()?_0x3a4d2a=this[_0x2aad01(0xb3d)]():_0x3a4d2a=this[_0x2aad01(0xaa7)]():_0x3a4d2a=VisuMZ[_0x2aad01(0x19c)]['Game_Action_makeTargets'][_0x2aad01(0x34b)](this),_0x3a4d2a=this[_0x2aad01(0x641)](_0x3a4d2a),_0x3a4d2a;},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x42c)]=function(){const _0x26b091=_0x4376f0;return this[_0x26b091(0x8d8)]()['isActor']()&&!this[_0x26b091(0x8d8)]()[_0x26b091(0xbf3)]();},Game_Action['prototype'][_0x4376f0(0xb3d)]=function(){const _0x403e89=_0x4376f0,_0x5ca622=VisuMZ['BattleCore'][_0x403e89(0x123)](this[_0x403e89(0x269)](),_0x403e89(0x88c));if(VisuMZ[_0x403e89(0x19c)]['JS'][_0x5ca622]){targets=VisuMZ['BattleCore'][_0x403e89(0x349)][_0x403e89(0x34b)](this);const _0x4ea01e=VisuMZ[_0x403e89(0x19c)][_0x403e89(0x123)](this[_0x403e89(0x269)](),_0x403e89(0x88c));return targets=VisuMZ[_0x403e89(0x19c)]['JS'][_0x4ea01e]['call'](this,this[_0x403e89(0x8d8)](),targets),this[_0x403e89(0x7fe)](targets);}return this[_0x403e89(0xaa7)]();},Game_Action[_0x4376f0(0x705)][_0x4376f0(0xaa7)]=function(){const _0x31b3ba=_0x4376f0;let _0x4aa0d2=[];const _0x4748b7=String(this[_0x31b3ba(0x269)]()[_0x31b3ba(0x4e9)]);if(this[_0x31b3ba(0x1b1)]())return this[_0x31b3ba(0x42c)]()?(_0x4aa0d2=this[_0x31b3ba(0xad6)](),this['repeatTargets'](_0x4aa0d2)):(this[_0x31b3ba(0x28c)]=-0x1,_0x4aa0d2['push'](...this[_0x31b3ba(0x712)]()),this[_0x31b3ba(0x7fe)](_0x4aa0d2));if(this[_0x31b3ba(0x3f0)]()){if(this['isSubjectValidForAnyoneSelect']())return _0x4aa0d2=this[_0x31b3ba(0xad6)](),this[_0x31b3ba(0x7fe)](_0x4aa0d2);else{if(Imported['VisuMZ_3_BattleAI']){if(VisuMZ[_0x31b3ba(0x43b)][_0x31b3ba(0x351)]<1.19){let _0x26c0d4='';_0x26c0d4+=_0x31b3ba(0x344),_0x26c0d4+='in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20',_0x26c0d4+=_0x31b3ba(0xaaf),alert(_0x26c0d4),SceneManager[_0x31b3ba(0x9d4)]();}}return this[_0x31b3ba(0x28c)]=-0x1,_0x4aa0d2[_0x31b3ba(0x6b0)](...this[_0x31b3ba(0x8b9)]()),this[_0x31b3ba(0x7fe)](_0x4aa0d2);}}if(_0x4748b7[_0x31b3ba(0x844)](/(\d+) RANDOM ANY/i)){let _0x294785=Number(RegExp['$1']);while(_0x294785--){const _0x5bcc6a=Math[_0x31b3ba(0x96e)](0x2)===0x0?this[_0x31b3ba(0xb45)]():this[_0x31b3ba(0x4b9)]();_0x4aa0d2[_0x31b3ba(0x6b0)](_0x5bcc6a[_0x31b3ba(0x784)]());}return this[_0x31b3ba(0x7fe)](_0x4aa0d2);}if(_0x4748b7[_0x31b3ba(0x844)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x853a8a=Number(RegExp['$1']);while(_0x853a8a--){_0x4aa0d2['push'](this['opponentsUnit']()['trueRandomTarget']());}return this[_0x31b3ba(0x7fe)](_0x4aa0d2);}if(_0x4748b7[_0x31b3ba(0x844)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x17016c=Number(RegExp['$1']);while(_0x17016c--){_0x4aa0d2[_0x31b3ba(0x6b0)](this[_0x31b3ba(0x4b9)]()['trueRandomTarget']());}return this['repeatTargets'](_0x4aa0d2);}if(_0x4748b7['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x4aa0d2[_0x31b3ba(0x6b0)](...this[_0x31b3ba(0x4b9)]()[_0x31b3ba(0x3a7)]()[_0x31b3ba(0x4bd)](_0x18c90e=>_0x18c90e!==this[_0x31b3ba(0x8d8)]())),this[_0x31b3ba(0x7fe)](_0x4aa0d2);return VisuMZ[_0x31b3ba(0x19c)][_0x31b3ba(0x349)][_0x31b3ba(0x34b)](this);},Game_Action[_0x4376f0(0x705)]['randomTargets']=function(_0xe92b73){const _0x305af0=_0x4376f0,_0x2c0d36=[];for(let _0x16678b=0x0;_0x16678b<this['numTargets']();_0x16678b++){_0x2c0d36[_0x305af0(0x6b0)](_0xe92b73[_0x305af0(0x784)]());}return _0x2c0d36;},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x641)]=function(_0x3f9129){const _0x18c699=_0x4376f0;if(!this[_0x18c699(0x269)]())return _0x3f9129;const _0xf928b2=this[_0x18c699(0x269)]()[_0x18c699(0x54f)];if(this[_0x18c699(0x549)]()){this[_0x18c699(0x539)]()&&_0x3f9129[_0x18c699(0x246)](this[_0x18c699(0x8d8)]());if(_0x3f9129['includes'](this[_0x18c699(0x8d8)]())){const _0x3e61b2=this['friendsUnit']()[_0x18c699(0x3a7)]()[_0x18c699(0x246)](this['subject']());if(_0x3e61b2['length']>0x0){_0x3e61b2[_0x18c699(0xc3a)]((_0x51c967,_0x534a71)=>_0x51c967[_0x18c699(0x737)]()-_0x534a71[_0x18c699(0x737)]());while(_0x3f9129['includes'](this[_0x18c699(0x8d8)]())){const _0x4348e9=_0x3f9129[_0x18c699(0x68d)](this[_0x18c699(0x8d8)]());_0x3f9129[_0x4348e9]=_0x3e61b2[Math[_0x18c699(0x96e)](_0x3e61b2[_0x18c699(0xa3a)])];}}else _0x3f9129[_0x18c699(0x246)](this['subject']());}}return _0x3f9129;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x340)]=Game_Action['prototype'][_0x4376f0(0x8d9)],Game_Action[_0x4376f0(0x705)]['itemEffectAddAttackState']=function(_0x2af4b3,_0x51f13d){const _0x4d81c7=_0x4376f0;VisuMZ[_0x4d81c7(0x19c)][_0x4d81c7(0x340)][_0x4d81c7(0x34b)](this,_0x2af4b3,_0x51f13d);if(!_0x2af4b3[_0x4d81c7(0x44a)]())return;for(const _0x3a4733 of this[_0x4d81c7(0x8d8)]()[_0x4d81c7(0xb98)]()){if(_0x3a4733===_0x2af4b3[_0x4d81c7(0x706)]()){let _0x320f89=_0x51f13d[_0x4d81c7(0x7a0)];_0x320f89*=_0x2af4b3['stateRate'](_0x3a4733),_0x320f89*=this[_0x4d81c7(0x8d8)]()[_0x4d81c7(0xa11)](_0x3a4733),_0x320f89*=this[_0x4d81c7(0x440)](_0x2af4b3),Math[_0x4d81c7(0x8dd)]()<_0x320f89&&(_0x2af4b3[_0x4d81c7(0x6d7)]=!![],this['makeSuccess'](_0x2af4b3));}}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xb31)]=Game_Action[_0x4376f0(0x705)][_0x4376f0(0xba2)],Game_Action[_0x4376f0(0x705)][_0x4376f0(0xba2)]=function(_0x506232,_0xb4c2a7){const _0x28f468=_0x4376f0;VisuMZ['BattleCore'][_0x28f468(0xb31)][_0x28f468(0x34b)](this,_0x506232,_0xb4c2a7);if(!_0x506232[_0x28f468(0x44a)]())return;if(_0xb4c2a7[_0x28f468(0xa08)]!==_0x506232[_0x28f468(0x706)]())return;let _0x5194d6=_0xb4c2a7['value1'];!this['isCertainHit']()&&(_0x5194d6*=_0x506232[_0x28f468(0x1aa)](_0xb4c2a7['dataId']),_0x5194d6*=this[_0x28f468(0x440)](_0x506232)),Math[_0x28f468(0x8dd)]()<_0x5194d6&&(_0x506232[_0x28f468(0x6d7)]=!![],this[_0x28f468(0xb9a)](_0x506232));},VisuMZ['BattleCore']['Game_Action_applyGlobal']=Game_Action[_0x4376f0(0x705)]['applyGlobal'],Game_Action[_0x4376f0(0x705)][_0x4376f0(0x3e8)]=function(){const _0x268551=_0x4376f0;VisuMZ[_0x268551(0x19c)][_0x268551(0x434)]['call'](this),this[_0x268551(0x152)](),this['resetResultSwitches']();},Game_Action['prototype']['applyGlobalCommonEventNotetags']=function(){const _0x59d0b3=_0x4376f0;if(!SceneManager[_0x59d0b3(0x446)]())return;const _0x37d763=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x53d2cf=this[_0x59d0b3(0x269)]()[_0x59d0b3(0x54f)]['match'](_0x37d763);if(_0x53d2cf)for(const _0x1c3332 of _0x53d2cf){if(!_0x1c3332)continue;_0x1c3332[_0x59d0b3(0x844)](_0x37d763);const _0x87d86c=String(RegExp['$1'])['split'](',')[_0x59d0b3(0x424)](_0x548cf3=>String(_0x548cf3)[_0x59d0b3(0x5cf)]()),_0x30b040=_0x87d86c[_0x59d0b3(0x424)](_0x2ddf93=>DataManager['getCommonEventIdWithName'](_0x2ddf93));for(const _0x389bf3 of _0x30b040){const _0x53b02c=$dataCommonEvents[_0x389bf3];_0x53b02c&&$gameTemp[_0x59d0b3(0x4ac)](_0x389bf3);}}},DataManager[_0x4376f0(0x187)]=function(_0x186943){const _0x1b10e6=_0x4376f0;_0x186943=_0x186943[_0x1b10e6(0x896)]()[_0x1b10e6(0x5cf)](),this[_0x1b10e6(0xb63)]=this[_0x1b10e6(0xb63)]||{};if(this[_0x1b10e6(0xb63)][_0x186943])return this[_0x1b10e6(0xb63)][_0x186943];for(const _0x284ed3 of $dataCommonEvents){if(!_0x284ed3)continue;let _0x465997=_0x284ed3['name'];_0x465997=_0x465997[_0x1b10e6(0x6f6)](/\x1I\[(\d+)\]/gi,''),_0x465997=_0x465997[_0x1b10e6(0x6f6)](/\\I\[(\d+)\]/gi,''),this[_0x1b10e6(0xb63)][_0x465997['toUpperCase']()[_0x1b10e6(0x5cf)]()]=_0x284ed3['id'];}return this[_0x1b10e6(0xb63)][_0x186943]||0x0;},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x30f)]=function(){const _0x3d7f48=_0x4376f0;if(!SceneManager[_0x3d7f48(0x446)]())return;const _0x531a85=VisuMZ[_0x3d7f48(0x19c)][_0x3d7f48(0xae8)][_0x3d7f48(0x956)];_0x531a85[_0x3d7f48(0x217)]&&$gameSwitches[_0x3d7f48(0xc28)](_0x531a85[_0x3d7f48(0x217)],![]),_0x531a85[_0x3d7f48(0x33b)]&&$gameSwitches['setValue'](_0x531a85[_0x3d7f48(0x33b)],![]),_0x531a85[_0x3d7f48(0xbc3)]&&$gameVariables[_0x3d7f48(0xc28)](_0x531a85['VariableDmg'],0x0),_0x531a85[_0x3d7f48(0x5ba)]&&$gameVariables['setValue'](_0x531a85['VariableHeal'],0x0);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0xb3c)]=function(_0x21d950){const _0x46c63b=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(!_0x21d950)return;const _0xe46433=_0x21d950['result'](),_0x57f894=VisuMZ[_0x46c63b(0x19c)][_0x46c63b(0xae8)][_0x46c63b(0x956)];_0x57f894['SwitchCritical']&&_0xe46433['critical']&&$gameSwitches[_0x46c63b(0xc28)](_0x57f894[_0x46c63b(0x217)],!![]);_0x57f894['SwitchMissEvade']&&(_0xe46433['missed']||_0xe46433['evaded'])&&$gameSwitches[_0x46c63b(0xc28)](_0x57f894[_0x46c63b(0x33b)],!![]);if(_0x57f894['VariableDmg']){let _0x2578c7=$gameVariables[_0x46c63b(0x883)](_0x57f894[_0x46c63b(0xbc3)]);_0xe46433[_0x46c63b(0x8c0)]>0x0&&(_0x2578c7+=Math[_0x46c63b(0x54d)](_0xe46433[_0x46c63b(0x8c0)])),$gameVariables[_0x46c63b(0xc28)](_0x57f894[_0x46c63b(0xbc3)],_0x2578c7);}if(_0x57f894['VariableHeal']){let _0x5d1f85=$gameVariables[_0x46c63b(0x883)](_0x57f894[_0x46c63b(0x5ba)]);_0xe46433[_0x46c63b(0x8c0)]<0x0&&(_0x5d1f85+=Math[_0x46c63b(0x54d)](_0xe46433[_0x46c63b(0x8c0)])),$gameVariables[_0x46c63b(0xc28)](_0x57f894[_0x46c63b(0x5ba)],_0x5d1f85);}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x4fd)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x897)]=Game_Action[_0x4376f0(0x705)][_0x4376f0(0x593)],Game_Action[_0x4376f0(0x705)]['executeHpDamage']=function(_0x540d59,_0x2ba7ee){const _0x59e687=_0x4376f0;VisuMZ[_0x59e687(0x19c)][_0x59e687(0x897)][_0x59e687(0x34b)](this,_0x540d59,_0x2ba7ee);!this[_0x59e687(0x97d)]()&&_0x540d59&&_0x540d59['result']()[_0x59e687(0x8c0)]>0x0&&this['performLifeSteal']('HP',_0x540d59,_0x540d59['result']()[_0x59e687(0x8c0)]);if(_0x540d59){this['_executeHpDamage']=this[_0x59e687(0x5be)]||{};const _0x2ace26=_0x540d59['battlerKey']();this[_0x59e687(0x5be)][_0x2ace26]=_0x2ba7ee;}},Game_Action['prototype'][_0x4376f0(0xbe1)]=function(_0x294dd7){const _0x263f0=_0x4376f0;this[_0x263f0(0x5be)]=this[_0x263f0(0x5be)]||{};const _0x14ed26=_0x294dd7[_0x263f0(0x1e4)]();return this[_0x263f0(0x5be)][_0x14ed26]||0x0;},VisuMZ['BattleCore'][_0x4376f0(0x6af)]=Game_Action[_0x4376f0(0x705)][_0x4376f0(0x413)],Game_Action[_0x4376f0(0x705)][_0x4376f0(0x413)]=function(_0x12086f,_0x3e5edf){const _0x695102=_0x4376f0;VisuMZ[_0x695102(0x19c)]['Game_Action_executeMpDamage'][_0x695102(0x34b)](this,_0x12086f,_0x3e5edf),!this['isDrain']()&&_0x12086f&&_0x12086f[_0x695102(0xbb6)]()[_0x695102(0xb22)]>0x0&&this[_0x695102(0x64c)]('MP',_0x12086f,_0x12086f[_0x695102(0xbb6)]()[_0x695102(0xb22)]);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x64c)]=function(_0x33255c,_0x16c5cc,_0x5d4bdc){const _0x20b637=_0x4376f0;_0x33255c=_0x33255c[_0x20b637(0x896)]()[_0x20b637(0x5cf)]();const _0x51bd12=this[_0x20b637(0x452)](_0x33255c,_0x16c5cc);if(_0x51bd12<=0x0)return;const _0x2b937c=Math[_0x20b637(0x1c6)](_0x5d4bdc*_0x51bd12);if(_0x2b937c<=0x0)return;let _0x32181a=this[_0x20b637(0x8d8)]();if(this[_0x20b637(0x185)])_0x32181a=this['_reflectionTarget'];const _0x44865f=_0x16c5cc['isNegativeLifeSteal'](_0x33255c)?-0x1:0x1;if(_0x33255c==='HP')_0x32181a['gainHp'](_0x44865f*_0x2b937c);if(_0x33255c==='MP')_0x32181a['gainMp'](_0x44865f*_0x2b937c);},Game_Action[_0x4376f0(0x705)][_0x4376f0(0x452)]=function(_0x4de4df,_0x52c75e){const _0x441ebe=_0x4376f0;if(this[_0x441ebe(0xb32)](_0x4de4df))return 0x0;if(this[_0x441ebe(0x8d8)]()['isDisarmLifeSteal'](_0x4de4df))return 0x0;if(_0x52c75e['isGuardLifeSteal'](_0x4de4df))return 0x0;let _0x8014b3=0x0;return _0x8014b3+=this[_0x441ebe(0x2b4)](_0x4de4df),_0x8014b3+=this[_0x441ebe(0x8d8)]()[_0x441ebe(0x452)](_0x4de4df,this[_0x441ebe(0x269)]()['hitType']),_0x8014b3[_0x441ebe(0x745)](0x0,0x1);},Game_Action['prototype'][_0x4376f0(0xb32)]=function(_0x4269bb){const _0x13ab04=_0x4376f0;_0x4269bb=_0x4269bb[_0x13ab04(0x896)]()[_0x13ab04(0x5cf)]();const _0xec17d2=VisuMZ[_0x13ab04(0x19c)]['LifeStealRegExp'],_0x527cdc=this[_0x13ab04(0x269)]()[_0x13ab04(0x54f)]||'';if(_0x527cdc[_0x13ab04(0x844)](_0xec17d2['cancelLifeSteal']))return!![];if(_0x4269bb==='HP'&&_0x527cdc[_0x13ab04(0x844)](_0xec17d2['cancelHpLifeSteal']))return!![];if(_0x4269bb==='MP'&&_0x527cdc[_0x13ab04(0x844)](_0xec17d2['cancelMpLifeSteal']))return!![];return![];},Game_Action[_0x4376f0(0x705)]['itemLifeStealRate']=function(_0x32eca6){const _0x381068=_0x4376f0,_0x10b8f2=VisuMZ[_0x381068(0x19c)]['LifeStealRegExp'],_0x5c5922=this[_0x381068(0x269)]()['note']||'';_0x32eca6=_0x32eca6[_0x381068(0x896)]()[_0x381068(0x5cf)]();const _0x555a2d=_0x5c5922['match'](_0x10b8f2[_0x381068(0x9cf)]);if(_0x555a2d)for(const _0x11b422 of _0x555a2d){_0x11b422[_0x381068(0x844)](_0x10b8f2[_0x381068(0x9cf)]);const _0x183be0=String(RegExp['$1'])['toUpperCase']()['trim'](),_0x5898ec=Number(RegExp['$2'])*0.01;if(_0x183be0!==_0x32eca6)continue;return _0x5898ec;}return 0x0;},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x452)]=function(_0xbfc37e,_0x47b7c7){const _0x1ce3e9=_0x4376f0,_0x1406a3=VisuMZ[_0x1ce3e9(0x19c)][_0x1ce3e9(0x4fd)];let _0x360a7b=0x0;_0xbfc37e=_0xbfc37e[_0x1ce3e9(0x896)]()[_0x1ce3e9(0x5cf)]();for(const _0x39d6fe of this[_0x1ce3e9(0x91b)]()){if(!_0x39d6fe)continue;const _0x5b2369=_0x39d6fe[_0x1ce3e9(0x54f)]||'',_0x3cb205=_0x5b2369['match'](_0x1406a3[_0x1ce3e9(0x89b)]);if(_0x3cb205)for(const _0x1099bc of _0x3cb205){_0x1099bc[_0x1ce3e9(0x844)](_0x1406a3[_0x1ce3e9(0x89b)]);const _0x39cba9=String(RegExp['$1'])[_0x1ce3e9(0x896)]()[_0x1ce3e9(0x5cf)](),_0x5dd7f8=String(RegExp['$2']),_0x514914=Number(RegExp['$3'])*0.01;if(_0x39cba9!==_0xbfc37e)continue;if(_0x47b7c7===Game_Action[_0x1ce3e9(0x8d3)]&&_0x5dd7f8[_0x1ce3e9(0x844)](/CERTAIN/i))_0x360a7b+=_0x514914;else{if(_0x47b7c7===Game_Action[_0x1ce3e9(0x95d)]&&_0x5dd7f8[_0x1ce3e9(0x844)](/PHYS/i))_0x360a7b+=_0x514914;else _0x47b7c7===Game_Action[_0x1ce3e9(0x456)]&&_0x5dd7f8['match'](/MAGIC/i)&&(_0x360a7b+=_0x514914);}}}return _0x360a7b;},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0xc1b)]=function(_0x324970){const _0x34d224=_0x4376f0;_0x324970=_0x324970['toUpperCase']()[_0x34d224(0x5cf)]();const _0x657f9d=VisuMZ['BattleCore'][_0x34d224(0x4fd)];for(const _0x2f77c9 of this[_0x34d224(0x91b)]()){if(!_0x2f77c9)continue;const _0xa32272=_0x2f77c9['note']||'';if(_0xa32272[_0x34d224(0x844)](_0x657f9d[_0x34d224(0x78f)]))return!![];if(_0x324970==='HP'&&_0xa32272['match'](_0x657f9d[_0x34d224(0x943)]))return!![];if(_0x324970==='MP'&&_0xa32272['match'](_0x657f9d[_0x34d224(0x12f)]))return!![];}return![];},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0xaf3)]=function(_0x58268b){const _0x46e9ad=_0x4376f0;_0x58268b=_0x58268b[_0x46e9ad(0x896)]()[_0x46e9ad(0x5cf)]();const _0x16c59e=VisuMZ[_0x46e9ad(0x19c)][_0x46e9ad(0x4fd)];for(const _0x385228 of this[_0x46e9ad(0x91b)]()){if(!_0x385228)continue;const _0x569a95=_0x385228[_0x46e9ad(0x54f)]||'';if(_0x569a95['match'](_0x16c59e[_0x46e9ad(0x873)]))return!![];if(_0x58268b==='HP'&&_0x569a95['match'](_0x16c59e[_0x46e9ad(0x212)]))return!![];if(_0x58268b==='MP'&&_0x569a95[_0x46e9ad(0x844)](_0x16c59e[_0x46e9ad(0x165)]))return!![];}return![];},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x754)]=function(_0x129683){const _0x227fa1=_0x4376f0;_0x129683=_0x129683[_0x227fa1(0x896)]()[_0x227fa1(0x5cf)]();const _0x4522ba=VisuMZ['BattleCore']['LifeStealRegExp'];for(const _0x3e5061 of this[_0x227fa1(0x91b)]()){if(!_0x3e5061)continue;const _0x46b000=_0x3e5061[_0x227fa1(0x54f)]||'';if(_0x46b000[_0x227fa1(0x844)](_0x4522ba[_0x227fa1(0xbe6)]))return!![];if(_0x129683==='HP'&&_0x46b000['match'](_0x4522ba[_0x227fa1(0x251)]))return!![];if(_0x129683==='MP'&&_0x46b000[_0x227fa1(0x844)](_0x4522ba['guardMpLifeSteal']))return!![];}return![];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x81e)]=Game_BattlerBase['prototype'][_0x4376f0(0x5e8)],Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x5e8)]=function(){const _0x5de37a=_0x4376f0;VisuMZ[_0x5de37a(0x19c)]['Game_BattlerBase_initMembers'][_0x5de37a(0x34b)](this),this[_0x5de37a(0x427)]();},Game_BattlerBase[_0x4376f0(0x705)]['initMembersBattleCore']=function(){this['_immortal']=![];},VisuMZ['BattleCore'][_0x4376f0(0x859)]=Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x31b)],Game_BattlerBase[_0x4376f0(0x705)]['refresh']=function(){const _0x399752=_0x4376f0;this[_0x399752(0x2b5)]={},VisuMZ['BattleCore']['Game_BattlerBase_refresh'][_0x399752(0x34b)](this);},Game_BattlerBase['prototype'][_0x4376f0(0x6b9)]=function(_0x2cd63c){const _0x2223c9=_0x4376f0;return this[_0x2223c9(0x2b5)]=this['_cache']||{},this[_0x2223c9(0x2b5)][_0x2cd63c]!==undefined;},Game_BattlerBase[_0x4376f0(0x705)]['hardDamageCap']=function(){const _0x51de03=_0x4376f0;if(this[_0x51de03(0x2b5)][_0x51de03(0x70b)]!==undefined)return this[_0x51de03(0x2b5)][_0x51de03(0x70b)];const _0x301207=/<DAMAGE CAP:[ ](\d+)>/i,_0x9ee165=this['traitObjects']()['map'](_0x2ff8e4=>_0x2ff8e4&&_0x2ff8e4[_0x51de03(0x54f)][_0x51de03(0x844)](_0x301207)?Number(RegExp['$1']):0x0);let _0x2a23de=_0x9ee165['length']>0x0?Math['max'](..._0x9ee165):0x0;if(_0x2a23de<=0x0)_0x2a23de=VisuMZ[_0x51de03(0x19c)][_0x51de03(0xae8)][_0x51de03(0x46a)][_0x51de03(0x4e3)];return this[_0x51de03(0x2b5)]['hardDamageCap']=_0x2a23de,this[_0x51de03(0x2b5)][_0x51de03(0x70b)];},Game_BattlerBase['prototype'][_0x4376f0(0x710)]=function(){const _0x2cb7ed=_0x4376f0;if(this[_0x2cb7ed(0x2b5)][_0x2cb7ed(0x4b6)]!==undefined)return this[_0x2cb7ed(0x2b5)][_0x2cb7ed(0x4b6)];let _0x16934d=VisuMZ[_0x2cb7ed(0x19c)][_0x2cb7ed(0xae8)][_0x2cb7ed(0x46a)][_0x2cb7ed(0x509)];const _0x3db91d=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x4568a9=this[_0x2cb7ed(0x91b)]()['map'](_0x21dadd=>_0x21dadd&&_0x21dadd[_0x2cb7ed(0x54f)]['match'](_0x3db91d)?Number(RegExp['$1'])/0x64:0x0);return _0x16934d=_0x4568a9['reduce']((_0x18f770,_0x4cc649)=>_0x18f770+_0x4cc649,_0x16934d),this[_0x2cb7ed(0x2b5)][_0x2cb7ed(0x4b6)]=_0x16934d,this[_0x2cb7ed(0x2b5)][_0x2cb7ed(0x4b6)][_0x2cb7ed(0x745)](0.01,0x1);},VisuMZ['BattleCore'][_0x4376f0(0x5cb)]=Game_BattlerBase[_0x4376f0(0x705)]['die'],Game_BattlerBase['prototype']['die']=function(){const _0x411426=_0x4376f0;VisuMZ['BattleCore']['Game_BattlerBase_die'][_0x411426(0x34b)](this),SceneManager[_0x411426(0x446)]()&&(this[_0x411426(0x6cf)]('dead'),this['_performDamageMotion']=undefined);},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x3f1)]=function(){const _0x5cf033=_0x4376f0;if(!SceneManager[_0x5cf033(0x446)]())return null;if(!SceneManager[_0x5cf033(0x982)][_0x5cf033(0x86d)])return null;return SceneManager[_0x5cf033(0x982)][_0x5cf033(0x86d)][_0x5cf033(0x683)](this);},Game_BattlerBase[_0x4376f0(0x705)]['svBattlerAnchorX']=function(){const _0x57b100=_0x4376f0;return VisuMZ[_0x57b100(0x19c)][_0x57b100(0xae8)][_0x57b100(0x41c)]['AnchorX'];},Game_BattlerBase[_0x4376f0(0x705)]['svBattlerAnchorY']=function(){const _0xb49f8c=_0x4376f0;return VisuMZ['BattleCore']['Settings'][_0xb49f8c(0x41c)][_0xb49f8c(0x524)];},Game_BattlerBase['prototype'][_0x4376f0(0x257)]=function(){const _0xc85c7c=_0x4376f0;return this[_0xc85c7c(0xb9d)]&&this[_0xc85c7c(0xb9d)]()?VisuMZ[_0xc85c7c(0x19c)][_0xc85c7c(0xae8)][_0xc85c7c(0x41c)][_0xc85c7c(0x35c)]:VisuMZ[_0xc85c7c(0x19c)][_0xc85c7c(0xae8)]['Enemy']['Shadow'];},Game_BattlerBase[_0x4376f0(0x705)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x89d)]=function(){return 0x0;},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x69e)]=function(){return 0x0;},Game_BattlerBase['prototype']['createBattleUIOffsetX']=function(_0x2fdbac){const _0x8819e9=_0x4376f0;if(!_0x2fdbac)return 0x0;let _0x3b0c66=0x0;const _0x11fd4e=_0x2fdbac[_0x8819e9(0x54f)];return _0x11fd4e[_0x8819e9(0x844)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x3b0c66+=Number(RegExp['$1'])),_0x11fd4e['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x3b0c66+=Number(RegExp['$1'])),_0x3b0c66;},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x85c)]=function(_0x308e88){const _0x12f79a=_0x4376f0;if(!_0x308e88)return 0x0;let _0x576105=0x0;const _0x44fc3d=_0x308e88['note'];return _0x44fc3d[_0x12f79a(0x844)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x576105+=Number(RegExp['$1'])),_0x44fc3d[_0x12f79a(0x844)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x576105+=Number(RegExp['$2'])),_0x576105;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x7dd)]=Game_BattlerBase['prototype'][_0x4376f0(0x694)],Game_BattlerBase['prototype'][_0x4376f0(0x694)]=function(_0x391183){const _0x19e3d4=_0x4376f0;if(_0x391183===this[_0x19e3d4(0x706)]()&&this[_0x19e3d4(0x44a)]())return!![];return VisuMZ[_0x19e3d4(0x19c)][_0x19e3d4(0x7dd)][_0x19e3d4(0x34b)](this,_0x391183);},Game_BattlerBase[_0x4376f0(0x705)]['isImmortal']=function(){const _0x4f2121=_0x4376f0;return this[_0x4f2121(0xb06)];},Game_BattlerBase['prototype'][_0x4376f0(0x67f)]=function(_0x25b6ec){const _0x119204=_0x4376f0;_0x25b6ec?this[_0x119204(0x5e2)]():this[_0x119204(0x809)]();},Game_BattlerBase[_0x4376f0(0x705)]['addImmortal']=function(){const _0x4f8848=_0x4376f0;if(this['isDead']())return;this[_0x4f8848(0xb06)]=!![],this[_0x4f8848(0x6d7)]=![];},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x809)]=function(){const _0x273cfb=_0x4376f0,_0x1065dc=this[_0x273cfb(0x5c4)]();this[_0x273cfb(0xb06)]=![],_0x1065dc&&this[_0x273cfb(0x6d7)]&&this['die'](),this[_0x273cfb(0x6d7)]=![],this[_0x273cfb(0x31b)](),this['isDead']()&&_0x1065dc&&(this['performCollapse'](),this['requestMotionRefresh']());},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x667)]=Game_Action['prototype']['numRepeats'],Game_Action['prototype']['numRepeats']=function(){const _0x919281=_0x4376f0;return this[_0x919281(0x269)]()?VisuMZ[_0x919281(0x19c)]['Game_Action_numRepeats']['call'](this):0x0;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x65f)]=Game_Action['prototype'][_0x4376f0(0x7f5)],Game_Action[_0x4376f0(0x705)][_0x4376f0(0x7f5)]=function(){const _0x3c89f2=_0x4376f0;if(this[_0x3c89f2(0x8d8)]()&&this[_0x3c89f2(0x8d8)]()[_0x3c89f2(0xa6e)]())VisuMZ['BattleCore'][_0x3c89f2(0x65f)][_0x3c89f2(0x34b)](this);else BattleManager[_0x3c89f2(0x41f)]?VisuMZ['BattleCore'][_0x3c89f2(0x65f)][_0x3c89f2(0x34b)](this):this[_0x3c89f2(0x976)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xb90)]=Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0xa6e)],Game_BattlerBase['prototype']['canAttack']=function(){const _0x2fd374=_0x4376f0;if(!this[_0x2fd374(0x41a)]())return![];return VisuMZ[_0x2fd374(0x19c)]['Game_BattlerBase_canAttack'][_0x2fd374(0x34b)](this);},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x41a)]=function(){const _0x4ff8d1=_0x4376f0;for(const _0xcd5dd1 of this['traitObjects']()){if(!_0xcd5dd1)continue;if(_0xcd5dd1['note'][_0x4ff8d1(0x844)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ['BattleCore']['Game_Action_setGuard']=Game_Action['prototype'][_0x4376f0(0x899)],Game_Action[_0x4376f0(0x705)]['setGuard']=function(){const _0x4269be=_0x4376f0;this[_0x4269be(0x8d8)]()['canGuard']()&&VisuMZ[_0x4269be(0x19c)]['Game_Action_setGuard'][_0x4269be(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x50c)]=Game_BattlerBase[_0x4376f0(0x705)]['canGuard'],Game_BattlerBase[_0x4376f0(0x705)]['canGuard']=function(){const _0x16602e=_0x4376f0;if(!this[_0x16602e(0x6dc)]())return![];return VisuMZ[_0x16602e(0x19c)][_0x16602e(0x50c)][_0x16602e(0x34b)](this);},Game_BattlerBase[_0x4376f0(0x705)]['canGuardBattleCore']=function(){const _0x386c58=_0x4376f0;for(const _0x589ea1 of this[_0x386c58(0x91b)]()){if(!_0x589ea1)continue;if(_0x589ea1[_0x386c58(0x54f)][_0x386c58(0x844)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x502)]=function(){const _0x44c66e=_0x4376f0;for(const _0x43fdf3 of this[_0x44c66e(0x91b)]()){if(!_0x43fdf3)continue;if(_0x43fdf3[_0x44c66e(0x54f)]['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xabb)]=Game_BattlerBase['prototype'][_0x4376f0(0x22d)],Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x22d)]=function(_0x3fe208){const _0x3a5eed=_0x4376f0;if(_0x3fe208&&_0x3fe208['note'][_0x3a5eed(0x844)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x29bec4=this['friendsUnit']()['aliveMembers']();if(_0x29bec4[_0x3a5eed(0xa3a)]===0x1&&_0x29bec4[0x0]===this)return![];}return VisuMZ[_0x3a5eed(0x19c)][_0x3a5eed(0xabb)][_0x3a5eed(0x34b)](this,_0x3fe208);},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x542)]=function(){const _0x412bc3=_0x4376f0;return VisuMZ[_0x412bc3(0x19c)]['Settings'][_0x412bc3(0x956)][_0x412bc3(0x253)];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa72)]=Game_Battler['prototype'][_0x4376f0(0x738)],Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x738)]=function(){const _0x7e63f2=_0x4376f0;if(SceneManager[_0x7e63f2(0x446)]()){if(BattleManager[_0x7e63f2(0x4c7)]()){if(this[_0x7e63f2(0xb39)]()<=0x0)return;}else{if($gameTroop[_0x7e63f2(0xb39)]()<=0x0)return;}}if(SceneManager[_0x7e63f2(0x446)]()&&BattleManager['isTpb']()&&this[_0x7e63f2(0x13d)]===Graphics['frameCount'])return;this['_lastRegenFrameCount']=Graphics[_0x7e63f2(0xa44)],SceneManager['isSceneBattle']()&&this[_0x7e63f2(0x887)](_0x7e63f2(0x6bd)),VisuMZ[_0x7e63f2(0x19c)]['Game_Battler_regenerateAll'][_0x7e63f2(0x34b)](this),SceneManager[_0x7e63f2(0x446)]()&&(this['regenerateAllBattleCore'](),this[_0x7e63f2(0x887)](_0x7e63f2(0xa74)));},Game_Battler[_0x4376f0(0x705)]['regenerateAllBattleCore']=function(){const _0x417949=_0x4376f0;if(SceneManager[_0x417949(0x446)]())for(const _0x5dacba of this['traitObjects']()){if(!_0x5dacba)continue;this[_0x417949(0x4e5)](_0x5dacba);}},Game_Battler['prototype'][_0x4376f0(0x4e5)]=function(_0x1d8575){const _0x5a11fd=_0x4376f0;if(!Imported[_0x5a11fd(0x7ba)])return;if(!SceneManager[_0x5a11fd(0x446)]())return;if(this[_0x5a11fd(0x57e)]())return;if(this[_0x5a11fd(0x36a)]())return;if(_0x1d8575['note'][_0x5a11fd(0x844)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x3a7cab=Number(RegExp['$1']);$gameTemp[_0x5a11fd(0x3c9)]([this],_0x3a7cab,![],![]);}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa53)]=Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x921)],Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x921)]=function(){const _0x414e1a=_0x4376f0;this['processBattleCoreJS'](_0x414e1a(0x5bd)),VisuMZ['BattleCore'][_0x414e1a(0xa53)][_0x414e1a(0x34b)](this),this['processBattleCoreJS'](_0x414e1a(0xa59));},VisuMZ['BattleCore'][_0x4376f0(0x6a9)]=Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x9e6)],Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x9e6)]=function(){const _0x2a5b99=_0x4376f0;this['processBattleCoreJS']('PreEndTurnJS'),VisuMZ['BattleCore'][_0x2a5b99(0x6a9)][_0x2a5b99(0x34b)](this),VisuMZ[_0x2a5b99(0x19c)][_0x2a5b99(0xae8)]['Mechanics'][_0x2a5b99(0x6b7)]&&this['removeBuffsAuto'](),this[_0x2a5b99(0x887)](_0x2a5b99(0x19e));},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x887)]=function(_0x49d6de){const _0x27e5ef=_0x4376f0;if(this[_0x27e5ef(0x336)]||this[_0x27e5ef(0x316)])return;const _0x21595a=VisuMZ[_0x27e5ef(0x19c)][_0x27e5ef(0xae8)]['Mechanics'];if(_0x21595a[_0x49d6de])_0x21595a[_0x49d6de][_0x27e5ef(0x34b)](this);for(const _0x233d88 of this['traitObjects']()){if(!_0x233d88)continue;key=VisuMZ['BattleCore'][_0x27e5ef(0x123)](_0x233d88,_0x49d6de),VisuMZ[_0x27e5ef(0x19c)]['JS'][key]&&VisuMZ[_0x27e5ef(0x19c)]['JS'][key][_0x27e5ef(0x34b)](this,this,this,_0x233d88,0x0);}},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x8ec)]=function(){const _0x4c359f=_0x4376f0;return VisuMZ[_0x4c359f(0x19c)][_0x4c359f(0xae8)][_0x4c359f(0x41c)][_0x4c359f(0xb73)]||![];},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x1fe)]=function(){const _0x3f748c=_0x4376f0;if(this[_0x3f748c(0x300)]()){if(this['chantStyle']()){if(this[_0x3f748c(0x33f)][_0x3f748c(0x4af)](_0x4883d3=>_0x4883d3['item']()&&_0x4883d3[_0x3f748c(0x22c)]()))return!![];}else{if(this['_actions'][_0x3f748c(0x4af)](_0x274a9e=>_0x274a9e['item']()&&_0x274a9e['isMagicSkill']()))return!![];}}if(BattleManager['isTpb']()&&this[_0x3f748c(0x279)]===_0x3f748c(0x677))return this[_0x3f748c(0x8ec)]()?this['currentAction']()&&this[_0x3f748c(0x8ad)]()['item']()&&this[_0x3f748c(0x8ad)]()['isMagical']():this[_0x3f748c(0x8ad)]()&&this[_0x3f748c(0x8ad)]()['item']()&&this['currentAction']()[_0x3f748c(0xad9)]();return![];},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x4c1)]=function(){const _0x36f0e5=_0x4376f0;if(BattleManager[_0x36f0e5(0x4c7)]()&&this[_0x36f0e5(0x279)]===_0x36f0e5(0x677))return this[_0x36f0e5(0x8ec)]()?this[_0x36f0e5(0x8ad)]()&&this[_0x36f0e5(0x8ad)]()[_0x36f0e5(0x269)]()&&!this[_0x36f0e5(0x8ad)]()[_0x36f0e5(0x22c)]():this['currentAction']()&&this[_0x36f0e5(0x8ad)]()['item']()&&!this[_0x36f0e5(0x8ad)]()[_0x36f0e5(0xad9)]();return![];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x86b)]=Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x13e)],Game_Battler['prototype'][_0x4376f0(0x13e)]=function(){const _0x36320c=_0x4376f0;VisuMZ[_0x36320c(0x19c)][_0x36320c(0x86b)][_0x36320c(0x34b)](this),this[_0x36320c(0x9d7)]=[];},Game_Battler['prototype'][_0x4376f0(0x988)]=function(){const _0x11e32e=_0x4376f0;if(!this['_damagePopupArray'])this[_0x11e32e(0x13e)]();return this[_0x11e32e(0x9d7)][_0x11e32e(0xa3a)]>0x0;},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x5a7)]=function(){const _0x5d3c9d=_0x4376f0;if(!SceneManager[_0x5d3c9d(0x446)]())return;if(BattleManager[_0x5d3c9d(0xb14)]())return;if(!this[_0x5d3c9d(0x9d7)])this[_0x5d3c9d(0x13e)]();this[_0x5d3c9d(0x835)]();const _0x55c7fb=this['battler']();if(_0x55c7fb)_0x55c7fb[_0x5d3c9d(0x99a)]();},Game_Battler['prototype']['createSeparateDamagePopups']=function(){const _0x22beb7=_0x4376f0,_0x10f2aa=this[_0x22beb7(0xbb6)]();if(_0x10f2aa[_0x22beb7(0x5bb)]||_0x10f2aa[_0x22beb7(0x3b0)]){const _0x278c6d=JsonEx[_0x22beb7(0xa66)](_0x10f2aa);_0x278c6d[_0x22beb7(0x30d)]=![],_0x278c6d[_0x22beb7(0xb22)]=0x0,this['_damagePopupArray'][_0x22beb7(0x6b0)](_0x278c6d);if(!_0x10f2aa[_0x22beb7(0x8c0)]&&!_0x10f2aa[_0x22beb7(0xb22)])return;}if(_0x10f2aa[_0x22beb7(0x30d)]){const _0x599749=JsonEx[_0x22beb7(0xa66)](_0x10f2aa);_0x599749['missed']=![],_0x599749[_0x22beb7(0x3b0)]=![],_0x599749[_0x22beb7(0xb22)]=0x0,this['_damagePopupArray'][_0x22beb7(0x6b0)](_0x599749);}if(_0x10f2aa['mpDamage']!==0x0){const _0x384fbc=JsonEx['makeDeepCopy'](_0x10f2aa);_0x384fbc[_0x22beb7(0x5bb)]=![],_0x384fbc[_0x22beb7(0x3b0)]=![],_0x384fbc[_0x22beb7(0x30d)]=![],this[_0x22beb7(0x9d7)][_0x22beb7(0x6b0)](_0x384fbc);}},Game_Battler['prototype'][_0x4376f0(0x138)]=function(){const _0x6f301f=_0x4376f0;if(!this['_damagePopupArray'])this[_0x6f301f(0x13e)]();return VisuMZ['BattleCore'][_0x6f301f(0xae8)][_0x6f301f(0x46a)][_0x6f301f(0x4ff)]?this['_damagePopupArray'][_0x6f301f(0xaf0)]():this[_0x6f301f(0x9d7)][_0x6f301f(0x958)]();},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x301)]=function(_0x2301f2,_0x1ec96c){const _0xce638e=_0x4376f0;if(!SceneManager['isSceneBattle']())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0xce638e(0x3f1)]())return;if(_0x2301f2[_0xce638e(0xa3a)]<=0x0)return;_0x1ec96c=_0x1ec96c||{},_0x1ec96c[_0xce638e(0x8d2)]=_0x1ec96c['textColor']||_0xce638e(0x196),_0x1ec96c[_0xce638e(0x96f)]=_0x1ec96c[_0xce638e(0x96f)]||[0x0,0x0,0x0,0x0],_0x1ec96c[_0xce638e(0x226)]=_0x1ec96c[_0xce638e(0x226)]||0x0,this[_0xce638e(0x3f1)]()[_0xce638e(0x301)](_0x2301f2,_0x1ec96c);},Game_Battler['prototype'][_0x4376f0(0x20c)]=function(_0x13f85c,_0xb4fdc3,_0x2fdaba){const _0x3f8111=_0x4376f0;if(!SceneManager[_0x3f8111(0x446)]())return;if(BattleManager[_0x3f8111(0xb14)]())return;if(!this[_0x3f8111(0x3f1)]())return;if(_0xb4fdc3[_0x3f8111(0xa3a)]<=0x0)return;_0x2fdaba=_0x2fdaba||{},_0x2fdaba[_0x3f8111(0x8d2)]=_0x2fdaba['textColor']||_0x3f8111(0x196),_0x2fdaba[_0x3f8111(0x96f)]=_0x2fdaba[_0x3f8111(0x96f)]||[0x0,0x0,0x0,0x0],_0x2fdaba[_0x3f8111(0x226)]=_0x2fdaba['flashDuration']||0x0,this[_0x3f8111(0x3f1)]()[_0x3f8111(0x20c)](_0x13f85c,_0xb4fdc3,_0x2fdaba);},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x740)]=function(){const _0x46c1cd=_0x4376f0;if(this['isHidden']())return![];if(this[_0x46c1cd(0x5c4)]()&&this[_0x46c1cd(0x41e)]())return!![];if(this[_0x46c1cd(0x7b4)]()&&this[_0x46c1cd(0x7dc)]()){if(this['isDead']()&&this[_0x46c1cd(0xa4f)]())return![];}else{if(this['isDead']())return![];}return!![];},VisuMZ['BattleCore'][_0x4376f0(0x6ea)]=Game_Battler[_0x4376f0(0x705)]['clearMotion'],Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x9a0)]=function(){const _0x10896f=_0x4376f0;VisuMZ[_0x10896f(0x19c)]['Game_Battler_clearMotion'][_0x10896f(0x34b)](this),this[_0x10896f(0x918)]();},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0xa79)]=function(){return!![];},Game_Battler[_0x4376f0(0x705)]['isBattlerGrounded']=function(){return![];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x572)]=Game_Battler[_0x4376f0(0x705)]['onBattleStart'],Game_Battler[_0x4376f0(0x705)][_0x4376f0(0xbb0)]=function(_0x31f235){const _0x1b5830=_0x4376f0;VisuMZ['BattleCore']['Game_Battler_onBattleStart'][_0x1b5830(0x34b)](this,_0x31f235),this[_0x1b5830(0x286)](_0x31f235),this[_0x1b5830(0x13e)]();},Game_Battler['prototype']['onBattleStartBattleCore']=function(_0x1ff7c5){const _0x44213e=_0x4376f0;this[_0x44213e(0x85b)](![]),this[_0x44213e(0x131)]=undefined,this[_0x44213e(0x1b6)]=undefined;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x308)]=Game_Battler[_0x4376f0(0x705)][_0x4376f0(0xc1c)],Game_Battler[_0x4376f0(0x705)][_0x4376f0(0xc1c)]=function(){const _0x2cca26=_0x4376f0;VisuMZ[_0x2cca26(0x19c)][_0x2cca26(0x308)][_0x2cca26(0x34b)](this),this['onBattleEndBattleCore']();},Game_Battler[_0x4376f0(0x705)]['onBattleEndBattleCore']=function(){const _0x10bba6=_0x4376f0;this[_0x10bba6(0x131)]=undefined,this[_0x10bba6(0x1b6)]=undefined;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa81)]=Game_Battler[_0x4376f0(0x705)]['performActionStart'],Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x1bf)]=function(_0x25db49){const _0x43d61f=_0x4376f0;VisuMZ[_0x43d61f(0x19c)][_0x43d61f(0xa81)]['call'](this,_0x25db49);if(!_0x25db49[_0x43d61f(0xab7)]()){const _0x7a95ca=this[_0x43d61f(0x3f1)]();_0x7a95ca&&_0x7a95ca['stepForward']();}this[_0x43d61f(0x85b)](![]);},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x7e8)]=function(){const _0x367a5a=_0x4376f0;this[_0x367a5a(0x360)]=undefined;const _0x466b03=this['_flinched'];this['_flinched']=![];if(BattleManager[_0x367a5a(0x52d)]()&&this[_0x367a5a(0x671)]()){const _0x1572a8=this[_0x367a5a(0x3f1)]();if(_0x1572a8&&_0x466b03)_0x1572a8[_0x367a5a(0x1be)]();return;}const _0x2a224d=this[_0x367a5a(0x3f1)]();if(_0x2a224d)_0x2a224d[_0x367a5a(0x3da)]();this[_0x367a5a(0x85b)](![]),this['requestMotionRefresh']();},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x3ec)]=function(_0x2ad7fe){const _0x367527=_0x4376f0;if(_0x2ad7fe[_0x367527(0x66c)]())this[_0x367527(0x6df)]();else{if(_0x2ad7fe['isGuard']())this[_0x367527(0x6cf)](_0x367527(0x130));else{if(_0x2ad7fe[_0x367527(0x22c)]())this[_0x367527(0x6cf)]('spell');else{if(_0x2ad7fe['isSkill']())[0x1,0x2,0x5,0x6][_0x367527(0x3e9)](_0x2ad7fe[_0x367527(0x269)]()[_0x367527(0x121)][_0x367527(0x2a6)])?this[_0x367527(0x6df)]():this[_0x367527(0x6cf)](_0x367527(0xbd1));else _0x2ad7fe['isItem']()&&this[_0x367527(0x6cf)](_0x367527(0x269));}}}},Game_Battler['prototype'][_0x4376f0(0xab8)]=function(){const _0xaf9bda=_0x4376f0;return $dataSystem[_0xaf9bda(0x58f)][0x0];},Game_Battler[_0x4376f0(0x705)]['getAttackWeaponAnimationId']=function(){const _0x12bdcd=_0x4376f0,_0x458b5a=this[_0x12bdcd(0xab8)]();return _0x458b5a?_0x458b5a[_0x12bdcd(0x2b0)]:0x0;},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x33e)]=function(_0x1e3219){const _0x233da3=_0x4376f0;if(!$gameSystem['isSideView']())return;const _0x10c6cc=this['battler'](),_0x393b37=_0x1e3219['battler']();if(!_0x10c6cc||!_0x393b37)return;const _0x251150=_0x393b37[_0x233da3(0x4f3)],_0x453a8a=_0x393b37[_0x233da3(0x90f)];this['moveBattlerToPoint'](_0x251150,_0x453a8a,0x0,![],_0x233da3(0x544),-0x1),_0x10c6cc[_0x233da3(0x68f)]();const _0x17f7dc=VisuMZ[_0x233da3(0x19c)][_0x233da3(0xae8)][_0x233da3(0x1e5)];let _0x37e0b6=(_0x393b37[_0x233da3(0x895)]+_0x10c6cc[_0x233da3(0x895)])/0x2;_0x37e0b6*=this[_0x233da3(0xb9d)]()?0x1:-0x1;let _0x492e01=_0x17f7dc[_0x233da3(0x8a6)]*(this[_0x233da3(0xb9d)]()?0x1:-0x1);_0x1e3219[_0x233da3(0x5f9)](_0x37e0b6,_0x492e01,0x0,![],_0x233da3(0x544)),_0x393b37['updatePosition']();},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x6cf)]=function(_0x4e6a6c){const _0x52706f=_0x4376f0;if(SceneManager['isSceneBattle']()){const _0x102d75=this['battler']();_0x102d75&&(_0x102d75[_0x52706f(0xa50)](_0x4e6a6c),[_0x52706f(0x87a),'thrust','missile'][_0x52706f(0x3e9)](_0x4e6a6c)&&this[_0x52706f(0xbd3)]());}this[_0x52706f(0x918)]();},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0xbd3)]=function(){},Game_Battler['prototype'][_0x4376f0(0x8e0)]=function(_0x1f7c2a){if(SceneManager['isSceneBattle']()){const _0x2c83fc=this['battler']();if(_0x2c83fc)_0x2c83fc['forceWeaponAnimation'](_0x1f7c2a);}},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x4aa)]=function(){const _0x3219e0=_0x4376f0;if(SceneManager[_0x3219e0(0x446)]()){const _0xccfbb6=this[_0x3219e0(0x58d)]();this[_0x3219e0(0x8e0)](_0xccfbb6);}},Game_Battler[_0x4376f0(0x705)]['performCastAnimation']=function(_0x331894,_0x2b094b){const _0x16e84f=_0x4376f0;if(!_0x331894)return;if(!_0x331894['item']())return;if(_0x331894[_0x16e84f(0x66c)]())return;if(_0x331894[_0x16e84f(0xab7)]())return;if(_0x331894[_0x16e84f(0x581)]())return;if($gameTemp['_playTestFastMode'])return;let _0x42c53a=0x0;const _0x47b017=VisuMZ[_0x16e84f(0x19c)]['Settings']['ActionSequence'],_0xdeb226=_0x331894[_0x16e84f(0x269)]()[_0x16e84f(0x54f)];if(_0xdeb226[_0x16e84f(0x844)](/<CAST ANIMATION: (\d+)>/i))_0x42c53a=Number(RegExp['$1']);else{if(_0xdeb226[_0x16e84f(0x844)](/<NO CAST ANIMATION>/i))return;else{if(_0x331894[_0x16e84f(0x7d8)]())_0x42c53a=_0x47b017['CastCertain'];else{if(_0x331894[_0x16e84f(0x620)]())_0x42c53a=_0x47b017[_0x16e84f(0x6c5)];else _0x331894[_0x16e84f(0x22c)]()&&(_0x42c53a=_0x47b017[_0x16e84f(0x144)]);}}}_0x42c53a>0x0&&$gameTemp[_0x16e84f(0x9f8)]([this],_0x42c53a,!!_0x2b094b);},Game_Battler[_0x4376f0(0x705)]['performReflection']=function(){const _0xc4238c=_0x4376f0;SoundManager[_0xc4238c(0x7f7)]();let _0x363e20=VisuMZ['BattleCore'][_0xc4238c(0xae8)][_0xc4238c(0x1e5)][_0xc4238c(0x798)];_0x363e20>0x0&&(Imported['VisuMZ_0_CoreEngine']?$gameTemp[_0xc4238c(0x3c9)]([this],_0x363e20):$gameTemp[_0xc4238c(0x9f8)]([this],_0x363e20));},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x575)]=function(){const _0x2b3627=_0x4376f0;if(!$gameSystem[_0x2b3627(0x245)]())return![];if(!BattleManager[_0x2b3627(0x52d)]())return![];if(!this[_0x2b3627(0x5c4)]())return![];if(this[_0x2b3627(0x671)]())return!![];if(this['isTpbReady']())return!![];if(this[_0x2b3627(0x9d3)]>=0x1)return!![];return![];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x90b)]=Game_Battler[_0x4376f0(0x705)][_0x4376f0(0xb77)],Game_Battler[_0x4376f0(0x705)][_0x4376f0(0xb77)]=function(){const _0x5bd734=_0x4376f0;this[_0x5bd734(0x575)]()&&(this[_0x5bd734(0x360)]=!![]),VisuMZ[_0x5bd734(0x19c)][_0x5bd734(0x90b)][_0x5bd734(0x34b)](this),this['performFlinch'](),this[_0x5bd734(0x32d)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xb5d)]=Game_Battler[_0x4376f0(0x705)][_0x4376f0(0xafc)],Game_Battler[_0x4376f0(0x705)][_0x4376f0(0xafc)]=function(){const _0xf34fef=_0x4376f0;this['isActiveTpbReady']()&&(this[_0xf34fef(0x360)]=!![]),VisuMZ[_0xf34fef(0x19c)][_0xf34fef(0xb5d)][_0xf34fef(0x34b)](this),this[_0xf34fef(0x41d)]();},VisuMZ['BattleCore'][_0x4376f0(0xb64)]=Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x721)],Game_Battler['prototype']['performEvasion']=function(){const _0x560868=_0x4376f0;this[_0x560868(0x575)]()&&(this['_performDamageMotion']=!![]),VisuMZ[_0x560868(0x19c)]['Game_Battler_performEvasion'][_0x560868(0x34b)](this),this[_0x560868(0x41d)]();},Game_Battler[_0x4376f0(0x705)]['performFlinch']=function(){const _0x3e09d0=_0x4376f0;if(!$gameSystem[_0x3e09d0(0x245)]())return;if(this[_0x3e09d0(0x878)])return;this['_flinched']=!![];const _0x8dac1d=this[_0x3e09d0(0x3f1)]();if(_0x8dac1d)_0x8dac1d['stepFlinch']();},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x32d)]=function(){const _0x11060c=_0x4376f0;if(!this[_0x11060c(0xa79)]())return;const _0x1c6640=VisuMZ[_0x11060c(0x19c)]['Settings'][_0x11060c(0x41c)];if(!(_0x1c6640[_0x11060c(0x159)]??![]))return;if(!this[_0x11060c(0x5ca)]&&!this[_0x11060c(0x37a)]&&!this[_0x11060c(0x57b)])return;const _0x3e53bb=this['battler']();if(_0x3e53bb){let _0x5b1fda=0x0;if(this['_lastHpDamage']>0x0){const _0x2e63ff=this[_0x11060c(0x5ca)];_0x5b1fda=_0x2e63ff/(this['mhp']||0x1);}else{if(this['_lastMpDamage']>0x0){const _0x5be567=this['_lastMpDamage'];_0x5b1fda=_0x5be567/(this['mmp']||0x1);}else{if(this[_0x11060c(0x57b)]>0x0){const _0xcc535d=this['_lastTpDamage'];_0x5b1fda=_0xcc535d/(this[_0x11060c(0x74d)]()||0x1);}}}_0x5b1fda=_0x5b1fda[_0x11060c(0x745)](0.8,0x1);const _0x966656=_0x1c6640[_0x11060c(0x2a8)]??0x30,_0x1319b4=_0x5b1fda*_0x966656;_0x3e53bb['startShakeFlinch'](_0x1319b4,_0x5b1fda);}},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x486)]=function(){const _0x532fb6=_0x4376f0;if(this[_0x532fb6(0x57e)]()&&this[_0x532fb6(0x3a8)]!==_0x532fb6(0x32c)){this[_0x532fb6(0x6cf)](_0x532fb6(0x32c));return;}if(this[_0x532fb6(0x57e)]()&&this[_0x532fb6(0x3a8)]==='dead')return;if(!!this[_0x532fb6(0x4e6)])return;if(this[_0x532fb6(0x7b4)]()){if(!this[_0x532fb6(0x763)]()&&this!==BattleManager[_0x532fb6(0x3f8)]){if(this[_0x532fb6(0x3f1)]())this['battler']()[_0x532fb6(0x80a)]();}this[_0x532fb6(0x918)]();return;}if(this[_0x532fb6(0x3a8)]===_0x532fb6(0xbbb))return;if(this[_0x532fb6(0x3a8)]===_0x532fb6(0x4ca)&&!BattleManager[_0x532fb6(0x671)]())return;if(this['_motionType']==='guard'&&!BattleManager[_0x532fb6(0x671)]())return;this[_0x532fb6(0x9a0)]();if(BattleManager[_0x532fb6(0x52d)]()&&this===BattleManager['_subject'])return;if(this[_0x532fb6(0x3f1)]()&&BattleManager[_0x532fb6(0x671)]()){this[_0x532fb6(0x3f1)]()[_0x532fb6(0x80a)](),this[_0x532fb6(0x918)]();return;}},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x763)]=function(){const _0x543713=_0x4376f0;if(!this[_0x543713(0x7dc)]())return![];const _0x4b68ad=this['battler']();if(!_0x4b68ad)return![];const _0x52c8d3=_0x4b68ad[_0x543713(0x250)];if(!_0x52c8d3)return![];const _0x5c137a=_0x52c8d3[_0x543713(0x9e2)];return _0x5c137a&&!_0x5c137a[_0x543713(0xa5c)];},Game_Battler['prototype'][_0x4376f0(0x19f)]=function(){return this['_isBattlerFlipped'];},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x85b)]=function(_0x27394b){const _0x33a772=_0x4376f0;if(!$gameSystem['isSideView']())return;this[_0x33a772(0x341)]=_0x27394b;const _0x4ca0a0=this['battler']();if(_0x4ca0a0)_0x4ca0a0[_0x33a772(0x691)]();},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x1ec)]=function(_0x2fdefc,_0x3a46d8,_0x5d2e60){const _0x204cab=_0x4376f0;if(!$gameSystem['isSideView']())return;const _0x2c8179=this[_0x204cab(0x3f1)]();if(!_0x2c8179)return;if(_0x2fdefc===_0x2c8179['_baseX'])return;let _0x22894a=![];if(this[_0x204cab(0xb9d)]()){if(_0x2fdefc>_0x2c8179[_0x204cab(0x4f3)])_0x22894a=!![];if(_0x2fdefc<_0x2c8179['_baseX'])_0x22894a=![];}else{if(this['isEnemy']()){if(_0x2fdefc>_0x2c8179[_0x204cab(0x4f3)])_0x22894a=![];if(_0x2fdefc<_0x2c8179[_0x204cab(0x4f3)])_0x22894a=!![];}};this['setBattlerFlip'](_0x5d2e60?!_0x22894a:_0x22894a),_0x2c8179[_0x204cab(0x691)]();},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x5f9)]=function(_0x4c243a,_0x427d5d,_0x33aeef,_0x3524b4,_0x2349f0){const _0xcad9ed=_0x4376f0;if(!$gameSystem[_0xcad9ed(0x245)]())return;const _0x5470e6=this[_0xcad9ed(0x3f1)]();if(!_0x5470e6)return;if(_0x3524b4)this[_0xcad9ed(0x1ec)](_0x4c243a+_0x5470e6[_0xcad9ed(0x4f3)],_0x427d5d+_0x5470e6[_0xcad9ed(0x90f)],![]);_0x4c243a+=_0x5470e6[_0xcad9ed(0x4f3)]-_0x5470e6['_homeX'],_0x427d5d+=_0x5470e6[_0xcad9ed(0x90f)]-_0x5470e6[_0xcad9ed(0x62b)],_0x5470e6[_0xcad9ed(0xa88)](_0x4c243a,_0x427d5d,_0x33aeef);if(Imported[_0xcad9ed(0x7ba)])_0x5470e6['setMoveEasingType'](_0x2349f0||_0xcad9ed(0x544));},Game_Battler['prototype'][_0x4376f0(0x77d)]=function(_0x239bb0,_0x4a7d00,_0x252db3,_0x5818b4,_0x530292,_0x5719f2){const _0x140b85=_0x4376f0;if(!$gameSystem['isSideView']())return;const _0x1ae485=this['battler']();if(!_0x1ae485)return;if(_0x239bb0===Infinity||_0x4a7d00===Infinity)return;if(isNaN(_0x239bb0)||isNaN(_0x4a7d00))return;_0x5719f2=_0x5719f2||0x0;if(_0x5719f2>0x0){if(_0x1ae485[_0x140b85(0x4f3)]>_0x239bb0)_0x239bb0+=_0x1ae485[_0x140b85(0x895)]/0x2+_0x5719f2;if(_0x1ae485[_0x140b85(0x4f3)]<_0x239bb0)_0x239bb0-=_0x1ae485['width']/0x2+_0x5719f2;}if(_0x5818b4)this[_0x140b85(0x1ec)](_0x239bb0,_0x4a7d00,![]);_0x239bb0-=_0x1ae485['_homeX'],_0x4a7d00-=_0x1ae485[_0x140b85(0x62b)],_0x1ae485[_0x140b85(0xa88)](_0x239bb0,_0x4a7d00,_0x252db3);if(Imported[_0x140b85(0x7ba)])_0x1ae485[_0x140b85(0xbff)](_0x530292||_0x140b85(0x544));},Game_Battler['prototype'][_0x4376f0(0x146)]=function(_0x11f95e,_0x2d9030,_0x359bc5,_0x35e07b,_0x27dda2){const _0x27d198=_0x4376f0;if(!$gameSystem[_0x27d198(0x245)]())return;const _0x2555f7=this[_0x27d198(0x3f1)]();if(!_0x2555f7)return;if(_0x35e07b)this[_0x27d198(0x1ec)](_0x11f95e+_0x2555f7['_baseX'],_0x2d9030+_0x2555f7[_0x27d198(0x90f)],![]);_0x11f95e+=_0x2555f7['_homeX'],_0x2d9030+=_0x2555f7[_0x27d198(0x62b)],_0x2555f7[_0x27d198(0x781)](_0x11f95e,_0x2d9030,_0x359bc5,_0x27dda2),this[_0x27d198(0x131)]=_0x11f95e,this['_forcedHomeY']=_0x2d9030;},Game_Battler[_0x4376f0(0x705)]['moveBattlerHomeToPoint']=function(_0xfbf27f,_0x5f2cec,_0x51808e,_0x51a208,_0x275efb,_0x32df86){const _0x1e0036=_0x4376f0;if(!$gameSystem[_0x1e0036(0x245)]())return;const _0x465595=this[_0x1e0036(0x3f1)]();if(!_0x465595)return;_0x32df86=_0x32df86||0x0;if(_0x32df86>0x0){if(_0x465595[_0x1e0036(0x4f3)]>_0xfbf27f)_0xfbf27f+=_0x465595['width']/0x2+_0x32df86;if(_0x465595[_0x1e0036(0x4f3)]<_0xfbf27f)_0xfbf27f-=_0x465595[_0x1e0036(0x895)]/0x2+_0x32df86;}if(_0x51a208)this[_0x1e0036(0x1ec)](_0xfbf27f,_0x5f2cec,![]);_0x465595[_0x1e0036(0x781)](_0xfbf27f,_0x5f2cec,_0x51808e,_0x275efb),this[_0x1e0036(0x131)]=_0xfbf27f,this['_forcedHomeY']=_0x5f2cec;},Game_Battler['prototype'][_0x4376f0(0x633)]=function(_0x4a6b27,_0x24a3d2,_0x976300){const _0x6255a2=_0x4376f0;if(!$gameSystem['isSideView']())return;const _0x4a42d8=this['battler']();if(!_0x4a42d8)return;_0x4a42d8[_0x6255a2(0x516)](_0x4a6b27,_0x24a3d2,_0x976300);},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x9b3)]=function(_0x3f4704,_0x4cb3d9){const _0x344462=_0x4376f0;if(!$gameSystem['isSideView']())return;const _0x1f46ec=this['battler']();if(!_0x1f46ec)return;_0x1f46ec[_0x344462(0x568)](_0x3f4704,_0x4cb3d9);},Game_Battler[_0x4376f0(0x705)]['spinBattler']=function(_0x3e7be3,_0x14fc4b,_0x708bf0,_0x351ff2){const _0x11c7c6=_0x4376f0;if(!$gameSystem[_0x11c7c6(0x245)]())return;const _0x334f5b=this['battler']();if(!_0x334f5b)return;_0x334f5b['startSpin'](_0x3e7be3,_0x14fc4b,_0x708bf0,_0x351ff2);},Game_Battler['prototype'][_0x4376f0(0xacf)]=function(_0xa8b569,_0x50b244,_0x33d7aa,_0x1044c2){const _0x3df4bd=_0x4376f0;if(!$gameSystem[_0x3df4bd(0x245)]())return;const _0x2191ff=this[_0x3df4bd(0x3f1)]();if(!_0x2191ff)return;this[_0x3df4bd(0xb9d)]()&&(_0xa8b569*=-0x1,_0x50b244*=-0x1),_0x2191ff['startSkew'](_0xa8b569,_0x50b244,_0x33d7aa,_0x1044c2);},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x87e)]=function(_0x5bbcec,_0x29a20d,_0x368db1,_0x556252){const _0xb07698=_0x4376f0;if(!$gameSystem[_0xb07698(0x245)]())return;const _0x17f8b6=this[_0xb07698(0x3f1)]();if(!_0x17f8b6)return;_0x17f8b6['startGrow'](_0x5bbcec,_0x29a20d,_0x368db1,_0x556252);},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x171)]=function(_0x13f1f7,_0x18adfd,_0x34bfce){const _0xac630d=_0x4376f0;if(!$gameSystem[_0xac630d(0x245)]())return;const _0x5890bc=this[_0xac630d(0x3f1)]();if(!_0x5890bc)return;_0x5890bc['startOpacity'](_0x13f1f7,_0x18adfd,_0x34bfce);},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x918)]=function(){const _0x373b21=_0x4376f0,_0x3b08f5=!!this[_0x373b21(0x4e6)];this[_0x373b21(0x4e6)]=undefined,_0x3b08f5&&(this[_0x373b21(0x486)](),this['clearFreezeMotionForWeapons']());},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x893)]=function(){const _0x127a30=_0x4376f0;if(!SceneManager['isSceneBattle']())return;const _0x4fad32=this[_0x127a30(0x3f1)]();if(!_0x4fad32)return;let _0x100c4e=this[_0x127a30(0xb9d)]()?_0x4fad32[_0x127a30(0x9ae)]:_0x4fad32[_0x127a30(0x250)][_0x127a30(0x9ae)];_0x100c4e&&_0x100c4e[_0x127a30(0x578)](0x0);},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x443)]=function(_0x3a6fbb,_0x3c4cc0,_0x33f342){const _0x39770e=_0x4376f0;if(this['isEnemy']()&&!this[_0x39770e(0x7dc)]())return;let _0x5b7e3b=0x0,_0x151568=0x0;_0x3a6fbb[_0x39770e(0x844)](/ATTACK[ ](\d+)/i)&&(_0x151568=Number(RegExp['$1']),_0x151568--);if(this[_0x39770e(0xb9d)]()){const _0x442b22=this[_0x39770e(0xb7d)]();_0x5b7e3b=_0x442b22[_0x151568]?_0x442b22[_0x151568][_0x39770e(0x21f)]:0x0;}else this[_0x39770e(0x7b4)]()&&(_0x5b7e3b=this['svBattlerData']()[_0x39770e(0x21f)]||0x0);const _0x506cf3=$dataSystem[_0x39770e(0x58f)][_0x5b7e3b];_0x3a6fbb[_0x39770e(0x844)](/attack/i)&&(_0x3a6fbb=['thrust',_0x39770e(0x87a),_0x39770e(0x2c8)][_0x506cf3['type']]||_0x39770e(0x87a)),this[_0x39770e(0x4e6)]={'motionType':_0x3a6fbb,'weaponImageId':_0x3c4cc0?_0x506cf3['weaponImageId']:0x0,'pattern':_0x33f342};},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x23d)]=function(_0x4e3a43){const _0x342e0b=_0x4376f0;if(!_0x4e3a43)return![];return _0x4e3a43[_0x342e0b(0x4b9)]()===this[_0x342e0b(0x4b9)]();},Game_Battler['prototype'][_0x4376f0(0x15a)]=function(_0x118506){if(!_0x118506)return![];return _0x118506['opponentsUnit']()===this['friendsUnit']();},Game_Battler[_0x4376f0(0x705)]['hasStaticSvBattler']=function(){return![];},Game_Actor[_0x4376f0(0x705)]['hasStaticSvBattler']=function(){const _0x36e3a5=_0x4376f0;return this[_0x36e3a5(0x4b8)]()[_0x36e3a5(0x844)](/\$/i);},Game_Enemy['prototype'][_0x4376f0(0x7e1)]=function(){const _0x19c776=_0x4376f0;return this['hasSvBattler']()&&this['svBattlerName']()[_0x19c776(0x844)](/\$/i);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x77f)]=Game_Actor['prototype']['setup'],Game_Actor['prototype']['setup']=function(_0x2d48d4){const _0x4bd255=_0x4376f0;VisuMZ[_0x4bd255(0x19c)][_0x4bd255(0x77f)][_0x4bd255(0x34b)](this,_0x2d48d4),this['initBattlePortrait']();},Game_Actor['prototype'][_0x4376f0(0xc20)]=function(){const _0x4297c5=_0x4376f0;this['_battlePortrait']='',this['actor']()&&this[_0x4297c5(0x965)]()[_0x4297c5(0x54f)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x4297c5(0x80e)]=String(RegExp['$1']));},Game_Actor[_0x4376f0(0x705)]['getBattlePortraitFilename']=function(){const _0x509926=_0x4376f0;if(this[_0x509926(0x368)]()!=='')return this[_0x509926(0x368)]();else{if(Imported[_0x509926(0x19a)]&&this['getMenuImage']()!=='')return this[_0x509926(0x2f7)]();}return'';},Game_Actor[_0x4376f0(0x705)][_0x4376f0(0x368)]=function(){const _0x5f3ed1=_0x4376f0;if(this[_0x5f3ed1(0x80e)]===undefined)this['initBattlePortrait']();return this['_battlePortrait'];},Game_Actor['prototype']['setBattlePortrait']=function(_0x5c5154){const _0x183f08=_0x4376f0;if(this[_0x183f08(0x80e)]===undefined)this[_0x183f08(0xc20)]();this[_0x183f08(0x80e)]=_0x5c5154;if(SceneManager[_0x183f08(0x446)]()&&$gameParty[_0x183f08(0x276)]()[_0x183f08(0x3e9)](this)){const _0x5cda82=SceneManager[_0x183f08(0x982)]['_statusWindow'];_0x5cda82&&_0x5cda82['refreshActorPortrait'](this);}},Game_Actor[_0x4376f0(0x705)][_0x4376f0(0x272)]=function(){return!![];},Game_Actor[_0x4376f0(0x705)][_0x4376f0(0xbf3)]=function(){const _0xd21192=_0x4376f0;if(!this[_0xd21192(0x6c4)]()&&BattleManager[_0xd21192(0xa3c)])return!![];return Game_Battler[_0xd21192(0x705)][_0xd21192(0xbf3)][_0xd21192(0x34b)](this);},VisuMZ['BattleCore']['Game_Actor_makeActionList']=Game_Actor['prototype']['makeActionList'],Game_Actor[_0x4376f0(0x705)][_0x4376f0(0x849)]=function(){const _0x5bed16=_0x4376f0;if(BattleManager[_0x5bed16(0xa3c)]&&!ConfigManager[_0x5bed16(0x5c1)])return this['makeActionListAutoAttack']();else{return VisuMZ[_0x5bed16(0x19c)]['Game_Actor_makeActionList']['call'](this);;}},Game_Actor[_0x4376f0(0x705)][_0x4376f0(0xaab)]=function(){const _0x4c4f1c=_0x4376f0,_0x5f047a=[],_0x3248dd=new Game_Action(this);return _0x3248dd[_0x4c4f1c(0x7f5)](),_0x5f047a['push'](_0x3248dd),_0x5f047a;},Game_Actor[_0x4376f0(0x705)]['battleCommands']=function(){const _0x507728=_0x4376f0;return this[_0x507728(0x789)]()['note'][_0x507728(0x844)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):VisuMZ['BattleCore'][_0x507728(0xae8)][_0x507728(0x5d5)][_0x507728(0x7c6)];},Game_Actor['prototype'][_0x4376f0(0x1ac)]=function(){const _0x470342=_0x4376f0;if(this['_cache'][_0x470342(0x4fa)]!==undefined)return this[_0x470342(0x2b5)][_0x470342(0x4fa)];return this['actor']()[_0x470342(0x54f)][_0x470342(0x844)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x470342(0x2b5)][_0x470342(0x4fa)]=eval(RegExp['$1']),this[_0x470342(0x2b5)][_0x470342(0x4cc)]=eval(RegExp['$2'])):this[_0x470342(0x2b5)][_0x470342(0x4fa)]=Game_Battler[_0x470342(0x705)]['svBattlerAnchorX'][_0x470342(0x34b)](this),this[_0x470342(0x2b5)][_0x470342(0x4fa)];},Game_Actor[_0x4376f0(0x705)][_0x4376f0(0x2c2)]=function(){const _0x3e6933=_0x4376f0;if(this['_cache'][_0x3e6933(0x4cc)]!==undefined)return this[_0x3e6933(0x2b5)]['svAnchorY'];return this['actor']()[_0x3e6933(0x54f)][_0x3e6933(0x844)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache']['svAnchorX']=eval(RegExp['$1']),this[_0x3e6933(0x2b5)]['svAnchorY']=eval(RegExp['$2'])):this[_0x3e6933(0x2b5)][_0x3e6933(0x4cc)]=Game_Battler['prototype'][_0x3e6933(0x2c2)][_0x3e6933(0x34b)](this),this[_0x3e6933(0x2b5)][_0x3e6933(0x4cc)];},Game_Actor['prototype'][_0x4376f0(0x257)]=function(){const _0x286de9=_0x4376f0;if(this[_0x286de9(0x2b5)][_0x286de9(0xc36)]!==undefined)return this[_0x286de9(0x2b5)][_0x286de9(0xc36)];if(this[_0x286de9(0x965)]()['note'][_0x286de9(0x844)](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x286de9(0xc36)]=!![];else this[_0x286de9(0x965)]()[_0x286de9(0x54f)][_0x286de9(0x844)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache'][_0x286de9(0xc36)]=![]:this[_0x286de9(0x2b5)][_0x286de9(0xc36)]=Game_Battler['prototype'][_0x286de9(0x257)][_0x286de9(0x34b)](this);return this[_0x286de9(0x2b5)][_0x286de9(0xc36)];},Game_Actor['prototype'][_0x4376f0(0x45b)]=function(){const _0x494fea=_0x4376f0;return VisuMZ['BattleCore'][_0x494fea(0xae8)]['Actor'][_0x494fea(0xab4)];},Game_Actor[_0x4376f0(0x705)][_0x4376f0(0xbd3)]=function(){const _0xf9713c=_0x4376f0,_0x4e480c=this['weapons'](),_0x50b532=_0x4e480c[0x0]?_0x4e480c[0x0][_0xf9713c(0x21f)]:0x0,_0x1117ca=$dataSystem[_0xf9713c(0x58f)][_0x50b532];_0x1117ca&&this[_0xf9713c(0x8e0)](_0x1117ca[_0xf9713c(0x2b0)]);},Game_Actor[_0x4376f0(0x705)][_0x4376f0(0x5ff)]=function(_0x57c5b2){const _0x3fee92=_0x4376f0;Game_Battler[_0x3fee92(0x705)][_0x3fee92(0x5ff)][_0x3fee92(0x34b)](this,_0x57c5b2),this[_0x3fee92(0x3ec)](_0x57c5b2);},Game_Actor[_0x4376f0(0x705)]['getAttackMotion']=function(){const _0x37b4de=_0x4376f0,_0x3c69f0=this[_0x37b4de(0xb7d)](),_0x4c30e7=_0x3c69f0[0x0]?_0x3c69f0[0x0]['wtypeId']:0x0;return $dataSystem[_0x37b4de(0x58f)][_0x4c30e7];},Game_Actor[_0x4376f0(0x705)][_0x4376f0(0x31a)]=function(_0x12b5fa){_0x12b5fa=_0x12b5fa||0x1,_0x12b5fa--;const _0x43939e=this['weapons']();return _0x43939e[_0x12b5fa]?_0x43939e[_0x12b5fa]['animationId']:0x0;},Game_Actor['prototype'][_0x4376f0(0x426)]=function(_0x217425){const _0x9fa36b=_0x4376f0;_0x217425=_0x217425||0x1,_0x217425--;const _0x433333=this[_0x9fa36b(0xb7d)](),_0xc1f7a6=_0x433333[_0x217425]?_0x433333[_0x217425]['wtypeId']:0x0;return $dataSystem[_0x9fa36b(0x58f)][_0xc1f7a6];},Game_Actor[_0x4376f0(0x705)]['performAttackSlot']=function(_0x2bcc39){const _0x408dc4=_0x4376f0;_0x2bcc39=_0x2bcc39||0x1,_0x2bcc39--;const _0x99c1cf=this[_0x408dc4(0xb7d)](),_0x3407b7=_0x99c1cf[_0x2bcc39]?_0x99c1cf[_0x2bcc39]['wtypeId']:0x0,_0x198c6c=$dataSystem[_0x408dc4(0x58f)][_0x3407b7];if(_0x198c6c){if(_0x198c6c[_0x408dc4(0x2a6)]===0x0)this[_0x408dc4(0x6cf)](_0x408dc4(0x483));else{if(_0x198c6c[_0x408dc4(0x2a6)]===0x1)this[_0x408dc4(0x6cf)](_0x408dc4(0x87a));else _0x198c6c[_0x408dc4(0x2a6)]===0x2&&this[_0x408dc4(0x6cf)](_0x408dc4(0x2c8));}this[_0x408dc4(0x8e0)](_0x198c6c['weaponImageId']);}},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0xa68)]=function(_0xb221a7){const _0x1600bb=_0x4376f0;if(this[_0x1600bb(0xb9d)]()){const _0x2095f8=this[_0x1600bb(0xb7d)]();if(_0x2095f8[_0x1600bb(0xa3a)]>0x0){const _0x4229fe=_0x2095f8[_0xb221a7];if(_0x4229fe)_0xb221a7=this[_0x1600bb(0x5de)]()[_0x1600bb(0x68d)](_0x4229fe);}}this[_0x1600bb(0x76e)]=_0xb221a7||0x0,this[_0x1600bb(0x2b5)]={};},Game_Battler[_0x4376f0(0x705)][_0x4376f0(0x284)]=function(){const _0x2f330e=_0x4376f0;this[_0x2f330e(0x76e)]=this[_0x2f330e(0x76e)]||0x0,this[_0x2f330e(0x76e)]++,this['_cache']={};},Game_Battler[_0x4376f0(0x705)]['clearActiveWeaponSlot']=function(){const _0x411c74=_0x4376f0;this[_0x411c74(0x76e)]=undefined,this[_0x411c74(0x2b5)]={};},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x70d)]=Game_Actor[_0x4376f0(0x705)]['equips'],Game_Actor[_0x4376f0(0x705)]['equips']=function(){const _0x17e766=_0x4376f0;let _0x5bd1d8=VisuMZ['BattleCore'][_0x17e766(0x70d)]['call'](this);if(this[_0x17e766(0xbbe)])return _0x5bd1d8;if(this[_0x17e766(0x76e)]!==undefined){this[_0x17e766(0xbbe)]=!![];const _0x2ad2fe=this['equipSlots']();for(let _0x48bf11=0x0;_0x48bf11<_0x2ad2fe['length'];_0x48bf11++){_0x2ad2fe[_0x48bf11]===0x1&&this['_activeWeaponSlot']!==_0x48bf11&&(_0x5bd1d8[_0x48bf11]=null);}this[_0x17e766(0xbbe)]=undefined;}return _0x5bd1d8;},VisuMZ['BattleCore'][_0x4376f0(0x570)]=Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x8b6)],Game_BattlerBase['prototype'][_0x4376f0(0x8b6)]=function(_0x44480f){const _0x275981=_0x4376f0;this['_activeWeaponSlot']!==undefined&&[0x0,0x1][_0x275981(0x3e9)](_0x44480f)&&(this[_0x275981(0xbbe)]=!![]);const _0x24a47f=VisuMZ[_0x275981(0x19c)][_0x275981(0x570)][_0x275981(0x34b)](this,_0x44480f);return this[_0x275981(0x76e)]!==undefined&&[0x0,0x1][_0x275981(0x3e9)](_0x44480f)&&(this[_0x275981(0xbbe)]=![]),_0x24a47f;},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xc49)]=function(_0x3df4ae){const _0x47af70=_0x4376f0;return _0x3df4ae[_0x47af70(0xb9d)]()?_0x3df4ae[_0x47af70(0xb7d)]()[_0x47af70(0xa3a)]||0x1:0x1;},Window_BattleLog['prototype']['setActiveWeaponSet']=function(_0x31568b,_0x280998){const _0x4c57ad=_0x4376f0;_0x31568b&&_0x31568b[_0x4c57ad(0xb9d)]()&&_0x31568b[_0x4c57ad(0xa68)](_0x280998),this[_0x4c57ad(0x8f8)]();},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xc16)]=function(_0x13f523){const _0x2384ca=_0x4376f0;_0x13f523&&_0x13f523['isActor']()&&_0x13f523['clearActiveWeaponSlot'](),this[_0x2384ca(0x8f8)]();},Game_Actor['prototype']['battleUIOffsetX']=function(){const _0x505308=_0x4376f0;let _0x4e5d42=_0x505308(0x89d);if(this[_0x505308(0x6b9)](_0x4e5d42))return this['_cache'][_0x4e5d42];return this[_0x505308(0x2b5)][_0x4e5d42]=this[_0x505308(0x255)](this[_0x505308(0x965)]()),this[_0x505308(0x2b5)][_0x4e5d42];},Game_Actor['prototype'][_0x4376f0(0x69e)]=function(){const _0x111d0a=_0x4376f0;let _0xd8eefe=_0x111d0a(0x69e);if(this[_0x111d0a(0x6b9)](_0xd8eefe))return this['_cache'][_0xd8eefe];return this[_0x111d0a(0x2b5)][_0xd8eefe]=this[_0x111d0a(0x85c)](this[_0x111d0a(0x965)]()),this[_0x111d0a(0x2b5)][_0xd8eefe];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x28b)]=Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x578)],Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x578)]=function(_0x6df226,_0x535220,_0x4c97ac){const _0x4b95d6=_0x4376f0;_0x6df226=DataManager[_0x4b95d6(0x1c2)](_0x6df226),VisuMZ[_0x4b95d6(0x19c)][_0x4b95d6(0x28b)][_0x4b95d6(0x34b)](this,_0x6df226,_0x535220,_0x4c97ac),Imported[_0x4b95d6(0x811)]&&this[_0x4b95d6(0x379)](),this['clearBattleCoreData'](),this[_0x4b95d6(0xc18)](),this['setupBattleCoreAspects'](),Imported[_0x4b95d6(0x811)]&&this['recoverAll']();},Game_Enemy[_0x4376f0(0x705)]['clearBattleCoreData']=function(){const _0x2a467f=_0x4376f0,_0x354a3d=VisuMZ['BattleCore'][_0x2a467f(0xae8)][_0x2a467f(0x653)];this[_0x2a467f(0xbb7)]=_0x354a3d['AttackAnimation'],this[_0x2a467f(0x41b)]={},this[_0x2a467f(0x891)]();},Game_Enemy['prototype'][_0x4376f0(0xc18)]=function(){const _0x17d1ff=_0x4376f0,_0x1850f6=VisuMZ[_0x17d1ff(0x19c)]['Settings']['Enemy'],_0x531531=this[_0x17d1ff(0x9b1)]()[_0x17d1ff(0x54f)];this['_svBattlerData']={'name':'','wtypeId':_0x1850f6[_0x17d1ff(0x7a7)],'collapse':_0x1850f6['AllowCollapse'],'motionIdle':_0x1850f6[_0x17d1ff(0x9ef)],'width':_0x1850f6[_0x17d1ff(0x36d)]||0x40,'height':_0x1850f6['Height']||0x40,'anchorX':_0x1850f6[_0x17d1ff(0x85e)]||0x0,'anchorY':_0x1850f6['AnchorY']||0x0,'shadow':_0x1850f6[_0x17d1ff(0x35c)]};_0x531531[_0x17d1ff(0x844)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x59550d=this[_0x17d1ff(0x41b)];if(_0x531531[_0x17d1ff(0x844)](/<SIDEVIEW BATTLER: (.*)>/i))_0x59550d[_0x17d1ff(0x7d3)]=String(RegExp['$1']);else{if(_0x531531[_0x17d1ff(0x844)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x12afec=String(RegExp['$1'])[_0x17d1ff(0x597)](/[\r\n]+/)['remove']('');_0x59550d[_0x17d1ff(0x7d3)]=DataManager['processRandomizedData'](_0x12afec);}}_0x531531[_0x17d1ff(0x844)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x59550d['anchorX']=eval(RegExp['$1']),_0x59550d[_0x17d1ff(0x742)]=eval(RegExp['$2']));if(_0x531531['match'](/<SIDEVIEW COLLAPSE>/i))_0x59550d[_0x17d1ff(0x441)]=!![];else _0x531531[_0x17d1ff(0x844)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x59550d[_0x17d1ff(0x441)]=![]);if(_0x531531[_0x17d1ff(0x844)](/<SIDEVIEW SHOW SHADOW>/i))_0x59550d[_0x17d1ff(0x4b0)]=!![];else _0x531531[_0x17d1ff(0x844)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x59550d[_0x17d1ff(0x4b0)]=![]);if(_0x531531[_0x17d1ff(0x844)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x59550d['motionIdle']=String(RegExp['$1'])[_0x17d1ff(0x177)]()[_0x17d1ff(0x5cf)]();else{if(_0x531531[_0x17d1ff(0x844)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x38c0dc=String(RegExp['$1'])[_0x17d1ff(0x597)](/[\r\n]+/)[_0x17d1ff(0x246)]('');_0x59550d['motionIdle']=DataManager['processRandomizedData'](_0x38c0dc);}}_0x531531[_0x17d1ff(0x844)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x59550d[_0x17d1ff(0x895)]=Number(RegExp['$1']),_0x59550d[_0x17d1ff(0x399)]=Number(RegExp['$2']));if(_0x531531['match'](/<SIDEVIEW WEAPON: (.*)>/i))_0x59550d[_0x17d1ff(0x21f)]=DataManager[_0x17d1ff(0x9eb)](RegExp['$1']);else{if(_0x531531[_0x17d1ff(0x844)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x5ab9c0=String(RegExp['$1'])[_0x17d1ff(0x597)](/[\r\n]+/)[_0x17d1ff(0x246)](''),_0x11f0d0=DataManager[_0x17d1ff(0xb05)](_0x5ab9c0);_0x59550d[_0x17d1ff(0x21f)]=DataManager[_0x17d1ff(0x9eb)](_0x11f0d0);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x51838e=this[_0x17d1ff(0x216)]();for(const _0xb634fc of _0x51838e){const _0x7207e2=this[_0x17d1ff(0x5f7)](_0xb634fc)['Name']['toUpperCase']()[_0x17d1ff(0x5cf)](),_0x51f518=_0xb634fc['toUpperCase']()['trim']();if(_0x531531[_0x17d1ff(0x844)](VisuMZ['ElementStatusCore'][_0x17d1ff(0x13a)][_0x17d1ff(0x67e)['format'](_0x51f518,_0x7207e2)]))_0x59550d[_0x17d1ff(0x7d3)]=String(RegExp['$1']);else{if(_0x531531['match'](VisuMZ[_0x17d1ff(0x65e)]['RegExp'][_0x17d1ff(0x51b)['format'](_0x51f518,_0x7207e2)])){const _0x4c2132=String(RegExp['$1'])[_0x17d1ff(0x597)](/[\r\n]+/)['remove']('');_0x59550d[_0x17d1ff(0x7d3)]=DataManager[_0x17d1ff(0xb05)](_0x4c2132);}}if(_0x531531['match'](VisuMZ[_0x17d1ff(0x65e)]['RegExp']['SvWeaponSolo-%1-%2'['format'](_0x51f518,_0x7207e2)]))_0x59550d['wtypeId']=DataManager[_0x17d1ff(0x9eb)](RegExp['$1']);else{if(_0x531531['match'](VisuMZ[_0x17d1ff(0x65e)][_0x17d1ff(0x13a)]['SvWeaponMass-%1-%2'[_0x17d1ff(0xa30)](_0x51f518,_0x7207e2)])){const _0x9ea663=String(RegExp['$1'])[_0x17d1ff(0x597)](/[\r\n]+/)[_0x17d1ff(0x246)](''),_0x3dc899=DataManager['processRandomizedData'](_0x9ea663);_0x59550d['wtypeId']=DataManager[_0x17d1ff(0x9eb)](_0x3dc899);}}if(_0x531531[_0x17d1ff(0x844)](VisuMZ[_0x17d1ff(0x65e)][_0x17d1ff(0x13a)]['SvMotionIdleSolo-%1-%2'[_0x17d1ff(0xa30)](_0x51f518,_0x7207e2)]))_0x59550d[_0x17d1ff(0x790)]=String(RegExp['$1'])[_0x17d1ff(0x177)]()[_0x17d1ff(0x5cf)]();else{if(_0x531531[_0x17d1ff(0x844)](VisuMZ[_0x17d1ff(0x65e)][_0x17d1ff(0x13a)]['SvMotionIdleMass-%1-%2'[_0x17d1ff(0xa30)](_0x51f518,_0x7207e2)])){const _0x412ad6=String(RegExp['$1'])[_0x17d1ff(0x597)](/[\r\n]+/)[_0x17d1ff(0x246)]('');_0x59550d[_0x17d1ff(0x790)]=DataManager['processRandomizedData'](_0x412ad6);}}}}},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x403)]=function(){const _0x594271=_0x4376f0;return this[_0x594271(0xbb7)]||0x0;},Game_Enemy['prototype']['attackAnimationId2']=function(){return this['attackAnimationId1']();},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x31a)]=function(_0x23fbd6){const _0x22117f=_0x4376f0;return this[_0x22117f(0x403)]();},Game_Enemy[_0x4376f0(0x705)]['canBattlerMove']=function(){const _0x1f5131=_0x4376f0;if(this[_0x1f5131(0x9b1)]()[_0x1f5131(0x54f)][_0x1f5131(0x844)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x1f5131(0x705)][_0x1f5131(0xa79)][_0x1f5131(0x34b)](this);},Game_Enemy['prototype'][_0x4376f0(0x761)]=function(){const _0x15c2fb=_0x4376f0;if(this[_0x15c2fb(0x9b1)]()[_0x15c2fb(0x54f)][_0x15c2fb(0x844)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x7a9)]=function(){const _0x196660=_0x4376f0,_0x2c2021=[];for(const _0x55fbb5 of this['enemy']()[_0x196660(0x4d2)]){const _0x101edd=$dataSkills[_0x55fbb5['skillId']];if(_0x101edd&&!_0x2c2021[_0x196660(0x3e9)](_0x101edd))_0x2c2021['push'](_0x101edd);}return _0x2c2021;},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x89d)]=function(){const _0x260776=_0x4376f0;let _0x531a28=_0x260776(0x89d);if(this['checkCacheKey'](_0x531a28))return this[_0x260776(0x2b5)][_0x531a28];return this[_0x260776(0x2b5)][_0x531a28]=this['createBattleUIOffsetX'](this[_0x260776(0x9b1)]()),this[_0x260776(0x2b5)][_0x531a28];},Game_Enemy[_0x4376f0(0x705)]['battleUIOffsetY']=function(){const _0x151e04=_0x4376f0;let _0x156682=_0x151e04(0x69e);if(this[_0x151e04(0x6b9)](_0x156682))return this[_0x151e04(0x2b5)][_0x156682];return this[_0x151e04(0x2b5)][_0x156682]=this[_0x151e04(0x85c)](this['enemy']()),this['_cache'][_0x156682];},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x310)]=function(){const _0x296a5c=_0x4376f0;if(this['_svBattlerData']!==undefined)return this[_0x296a5c(0x41b)];return this[_0x296a5c(0xc18)](),this['_svBattlerData'];},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x7dc)]=function(){const _0x16982e=_0x4376f0;return this[_0x16982e(0x310)]()[_0x16982e(0x7d3)]!=='';},Game_Enemy['prototype']['svBattlerName']=function(){const _0x226268=_0x4376f0;return this[_0x226268(0x310)]()[_0x226268(0x7d3)];},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x45b)]=function(){const _0x125702=_0x4376f0;return this['hasSvBattler']()?VisuMZ[_0x125702(0x19c)]['Settings']['Actor'][_0x125702(0xab4)]:VisuMZ['BattleCore']['Settings'][_0x125702(0x653)][_0x125702(0xab4)];},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x5ff)]=function(_0x4a88df){const _0x9e4481=_0x4376f0;Game_Battler[_0x9e4481(0x705)][_0x9e4481(0x5ff)]['call'](this,_0x4a88df);if(this[_0x9e4481(0x7dc)]())this[_0x9e4481(0x3ec)](_0x4a88df);},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x6df)]=function(){const _0x205e70=_0x4376f0,_0x184a07=this[_0x205e70(0x310)]()[_0x205e70(0x21f)]||0x0,_0x19182b=$dataSystem[_0x205e70(0x58f)][_0x184a07];if(_0x19182b){if(_0x19182b[_0x205e70(0x2a6)]===0x0)this[_0x205e70(0x6cf)](_0x205e70(0x483));else{if(_0x19182b[_0x205e70(0x2a6)]===0x1)this['requestMotion'](_0x205e70(0x87a));else _0x19182b[_0x205e70(0x2a6)]===0x2&&this[_0x205e70(0x6cf)](_0x205e70(0x2c8));}}},Game_Enemy['prototype']['performWeaponAnimation']=function(){const _0x10f83a=_0x4376f0,_0x4e4698=this[_0x10f83a(0x310)]()[_0x10f83a(0x21f)]||0x0,_0x35ea31=$dataSystem['attackMotions'][_0x4e4698];_0x35ea31&&this[_0x10f83a(0x8e0)](_0x35ea31[_0x10f83a(0x2b0)]);},Game_Enemy['prototype'][_0x4376f0(0xab8)]=function(){const _0x5b89a2=_0x4376f0,_0xb4f16c=this[_0x5b89a2(0x310)]()['wtypeId']||0x0;return $dataSystem['attackMotions'][_0xb4f16c];},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x426)]=function(_0x5117fc){const _0x4974d0=_0x4376f0;return this[_0x4974d0(0xab8)]();},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0xb77)]=function(){const _0x282a92=_0x4376f0;Game_Battler[_0x282a92(0x705)][_0x282a92(0xb77)][_0x282a92(0x34b)](this),this[_0x282a92(0x272)]()&&this[_0x282a92(0x7dc)]()&&this[_0x282a92(0x6cf)]('damage'),SoundManager['playEnemyDamage']();},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x721)]=function(){const _0x5d72e9=_0x4376f0;Game_Battler[_0x5d72e9(0x705)][_0x5d72e9(0x721)][_0x5d72e9(0x34b)](this),this[_0x5d72e9(0x6cf)](_0x5d72e9(0x7bc));},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x4b5)]=function(){const _0x51c659=_0x4376f0;Game_Battler['prototype'][_0x51c659(0x4b5)]['call'](this),this['requestMotion'](_0x51c659(0x7bc));},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x909)]=function(){const _0x4bc3b8=_0x4376f0;Game_Battler['prototype']['performCounter'][_0x4bc3b8(0x34b)](this),this[_0x4bc3b8(0x6df)]();},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0xa4f)]=function(){const _0xe20f41=_0x4376f0;if(this[_0xe20f41(0x7dc)]()){if(this[_0xe20f41(0x22b)]()>=0x1)return!![];return this['svBattlerData']()[_0xe20f41(0x441)];}else return!![];},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x1ac)]=function(){const _0x385f5e=_0x4376f0;return this['svBattlerData']()[_0x385f5e(0x3bc)];},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x2c2)]=function(){const _0x1e2b88=_0x4376f0;return this['svBattlerData']()[_0x1e2b88(0x742)];},Game_Enemy['prototype']['svBattlerShadowVisible']=function(){const _0x2131d7=_0x4376f0;return this[_0x2131d7(0x310)]()[_0x2131d7(0x4b0)];},VisuMZ['BattleCore'][_0x4376f0(0xbfd)]=Game_Enemy[_0x4376f0(0x705)]['transform'],Game_Enemy['prototype']['transform']=function(_0x14f499){const _0xd81f89=_0x4376f0;VisuMZ[_0xd81f89(0x19c)][_0xd81f89(0xbfd)][_0xd81f89(0x34b)](this,_0x14f499),this[_0xd81f89(0x401)](),this[_0xd81f89(0xc18)]();const _0x23b4d4=this[_0xd81f89(0x3f1)]();_0x23b4d4&&(_0x23b4d4[_0xd81f89(0xb82)]=undefined,_0x23b4d4['setBattler'](this));},Game_Enemy['prototype']['resetNameTempVisibility']=function(){const _0x20cd06=_0x4376f0,_0x4c7156=VisuMZ[_0x20cd06(0x19c)]['Settings'][_0x20cd06(0x653)];this[_0x20cd06(0x793)]=_0x4c7156['NameDamageVisibility']??0x0;},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x4e4)]=function(){const _0x3b3a2b=_0x4376f0;return this[_0x3b3a2b(0x793)]&&this[_0x3b3a2b(0x793)]>0x0;},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x5c7)]=function(){const _0x1d7eaa=_0x4376f0;this[_0x1d7eaa(0x793)]&&this['_nameTempVisibleDuration']>0x0&&this[_0x1d7eaa(0x793)]--;},Game_Enemy['prototype'][_0x4376f0(0x731)]=function(){this['_nameTempVisibleDuration']=0x0;},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x8f2)]=function(){const _0x166eec=_0x4376f0;this[_0x166eec(0x5f8)]();const _0x44d3a6=this[_0x166eec(0x9b1)]()['note']||'';if(_0x44d3a6[_0x166eec(0x844)](/<ASPECT NAME:[ ](.*)>/i)){const _0x357e6c=String(RegExp['$1']);this['getAspectData']()['name']=_0x357e6c[_0x166eec(0xa30)](this['originalName']());}_0x44d3a6[_0x166eec(0x844)](/<ASPECT ICON:[ ](\d+)>/i)&&(this[_0x166eec(0x7d0)]()[_0x166eec(0xc45)]=Number(RegExp['$1'])),_0x44d3a6[_0x166eec(0x844)](/<ASPECT COLOR:[ ](.*)>/i)&&(this[_0x166eec(0x7d0)]()[_0x166eec(0x345)]=String(RegExp['$1'])),_0x44d3a6['match'](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this[_0x166eec(0x7d0)]()['description']=String(RegExp['$1']));},Game_Enemy['prototype'][_0x4376f0(0x5f8)]=function(){const _0x2f650f=_0x4376f0,_0x2d3f03=VisuMZ[_0x2f650f(0x19c)]['Settings'][_0x2f650f(0x653)][_0x2f650f(0x8a7)]??_0x2f650f(0x4c4);this[_0x2f650f(0x640)]={'name':_0x2d3f03[_0x2f650f(0xa30)](this[_0x2f650f(0x14b)]()),'iconIndex':VisuMZ[_0x2f650f(0x19c)][_0x2f650f(0xae8)][_0x2f650f(0x653)][_0x2f650f(0x5b3)]??0x1a,'nameColor':VisuMZ[_0x2f650f(0x19c)][_0x2f650f(0xae8)]['Enemy']['AspectColor']??'2','description':''};},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x7d0)]=function(){const _0x2129aa=_0x4376f0;if(this['_aspectData']===undefined)this[_0x2129aa(0x8f2)]();return this[_0x2129aa(0x640)];},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0x3ad)]=function(){const _0x84cd67=_0x4376f0;return(this[_0x84cd67(0x7d0)]()[_0x84cd67(0x7bd)]||'')[_0x84cd67(0xa3a)]>0x0;},Game_BattlerBase['prototype'][_0x4376f0(0xbe7)]=function(){const _0x2d6b41=_0x4376f0;return VisuMZ[_0x2d6b41(0x19c)][_0x2d6b41(0xae8)][_0x2d6b41(0x46a)]['PopupPosition'];},Game_Enemy[_0x4376f0(0x705)][_0x4376f0(0xbe7)]=function(){const _0x2a99dd=_0x4376f0,_0x595ffe=this[_0x2a99dd(0x9b1)]()?this['enemy']()[_0x2a99dd(0x54f)]||'':'';if(_0x595ffe[_0x2a99dd(0x844)](/<POPUP POSITION: HEAD>/i))return'head';else{if(_0x595ffe[_0x2a99dd(0x844)](/<POPUP POSITION: CENTER>/i))return _0x2a99dd(0xbe8);else{if(_0x595ffe[_0x2a99dd(0x844)](/<POPUP POSITION: BASE>/i))return _0x2a99dd(0x591);}}return Game_BattlerBase[_0x2a99dd(0x705)][_0x2a99dd(0xbe7)][_0x2a99dd(0x34b)](this);},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x7de)]=function(){return 0x0;},Game_Enemy['prototype']['damagePopupOffsetX']=function(){const _0x558d56=_0x4376f0,_0x329d97=this['enemy']()?this['enemy']()[_0x558d56(0x54f)]||'':'';if(_0x329d97[_0x558d56(0x844)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x558d56(0x705)][_0x558d56(0x7de)][_0x558d56(0x34b)](this);},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x530)]=function(){return 0x0;},Game_Enemy[_0x4376f0(0x705)]['damagePopupOffsetY']=function(){const _0x55678c=_0x4376f0,_0x54b10c=this[_0x55678c(0x9b1)]()?this[_0x55678c(0x9b1)]()[_0x55678c(0x54f)]||'':'';if(_0x54b10c[_0x55678c(0x844)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype'][_0x55678c(0x530)]['call'](this);},Game_Unit[_0x4376f0(0x705)][_0x4376f0(0x887)]=function(_0x431aa5){const _0x36ae67=_0x4376f0;for(const _0x422f46 of this['members']()){if(_0x422f46)_0x422f46[_0x36ae67(0x887)](_0x431aa5);}},Game_Unit[_0x4376f0(0x705)][_0x4376f0(0x784)]=function(){const _0x30cbda=_0x4376f0,_0x123eb5=this[_0x30cbda(0x3a7)]();return _0x123eb5[Math[_0x30cbda(0x96e)](_0x123eb5[_0x30cbda(0xa3a)])];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x7eb)]=Game_Party[_0x4376f0(0x705)][_0x4376f0(0x841)],Game_Party[_0x4376f0(0x705)]['addActor']=function(_0x2e62d3){const _0xa9a5a4=_0x4376f0;VisuMZ[_0xa9a5a4(0x19c)][_0xa9a5a4(0x7eb)][_0xa9a5a4(0x34b)](this,_0x2e62d3),BattleManager[_0xa9a5a4(0x232)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x37f)]=Game_Party['prototype'][_0x4376f0(0x622)],Game_Party[_0x4376f0(0x705)]['removeActor']=function(_0x38af78){const _0xc6ecc3=_0x4376f0;VisuMZ[_0xc6ecc3(0x19c)][_0xc6ecc3(0x37f)]['call'](this,_0x38af78),BattleManager[_0xc6ecc3(0x232)]();},VisuMZ['BattleCore'][_0x4376f0(0xa48)]=Game_Troop[_0x4376f0(0x705)][_0x4376f0(0x578)],Game_Troop[_0x4376f0(0x705)][_0x4376f0(0x578)]=function(_0x54253b){const _0x2a799c=_0x4376f0;$gameTemp[_0x2a799c(0x774)](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x54253b),VisuMZ[_0x2a799c(0x19c)]['Game_Troop_setup']['call'](this,_0x54253b),this['extendTroopMembers']();},VisuMZ[_0x4376f0(0x19c)]['Game_Troop_expTotal']=Game_Troop['prototype'][_0x4376f0(0x18d)],Game_Troop[_0x4376f0(0x705)]['expTotal']=function(){const _0x2202f0=_0x4376f0;let _0x5008fc=VisuMZ[_0x2202f0(0x19c)][_0x2202f0(0x5eb)]['call'](this);return this[_0x2202f0(0x642)]&&(_0x5008fc*=this['expRate']()),Math['ceil'](_0x5008fc);},Game_Troop['prototype'][_0x4376f0(0x642)]=function(){return 0x1;},Game_Troop[_0x4376f0(0x705)][_0x4376f0(0x6d5)]=function(){const _0x4373cf=_0x4376f0,_0x48cccc=DataManager[_0x4373cf(0x65c)](this['troop']()['id']);if(_0x48cccc[_0x4373cf(0x844)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x1131a7=RegExp['$1'][_0x4373cf(0x597)](',')['map'](_0x531368=>Number(_0x531368));this[_0x4373cf(0x481)](),this[_0x4373cf(0x65b)](_0x1131a7);}},Game_Troop[_0x4376f0(0x705)]['checkExtendTroopCompatibility']=function(){const _0x3d377b=_0x4376f0;let _0x1f7e15=_0x3d377b(0x759)+'\x0a';_0x1f7e15+='version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.',Imported[_0x3d377b(0x616)]&&(VisuMZ[_0x3d377b(0xb47)][_0x3d377b(0x351)]<1.11&&(alert(_0x1f7e15[_0x3d377b(0xa30)](_0x3d377b(0x766))),SceneManager[_0x3d377b(0x9d4)]())),Imported[_0x3d377b(0x659)]&&(VisuMZ[_0x3d377b(0x52b)][_0x3d377b(0x351)]<1.19&&(alert(_0x1f7e15[_0x3d377b(0xa30)](_0x3d377b(0x7c0))),SceneManager[_0x3d377b(0x9d4)]())),Imported['VisuMZ_2_BattleSystemSTB']&&(VisuMZ[_0x3d377b(0xb19)][_0x3d377b(0x351)]<1.15&&(alert(_0x1f7e15[_0x3d377b(0xa30)](_0x3d377b(0x45a))),SceneManager[_0x3d377b(0x9d4)]()));},Game_Troop[_0x4376f0(0x705)][_0x4376f0(0x65b)]=function(_0x3dcfb5){const _0xb04c43=_0x4376f0;this[_0xb04c43(0x670)]={};for(const _0x35451b of this[_0xb04c43(0x277)]()){if(!_0x35451b)continue;_0x35451b['setLetter']('');}for(const _0x111b04 of _0x3dcfb5){const _0x428e64=$dataTroops[_0x111b04];if(_0x428e64)this['addExtendedTroopMembers'](_0x428e64);}this[_0xb04c43(0x4cb)]();},Game_Troop[_0x4376f0(0x705)][_0x4376f0(0xbaa)]=function(_0x1ee640){const _0x6fd39c=_0x4376f0;for(const _0x30cb92 of _0x1ee640[_0x6fd39c(0x277)]){if($dataEnemies[_0x30cb92[_0x6fd39c(0xaca)]]){const _0x3acf48=_0x30cb92[_0x6fd39c(0xaca)],_0x4d6436=_0x30cb92['x'],_0xd2ee99=_0x30cb92['y'],_0x3c9128=new Game_Enemy(_0x3acf48,_0x4d6436,_0xd2ee99);_0x30cb92['hidden']&&_0x3c9128[_0x6fd39c(0xa38)](),this[_0x6fd39c(0x2e9)][_0x6fd39c(0x6b0)](_0x3c9128);}}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xb7a)]=Game_Map[_0x4376f0(0x705)]['setupBattleback'],Game_Map[_0x4376f0(0x705)][_0x4376f0(0xb8d)]=function(){const _0x47b4eb=_0x4376f0;VisuMZ[_0x47b4eb(0x19c)][_0x47b4eb(0xb7a)][_0x47b4eb(0x34b)](this),this[_0x47b4eb(0x928)]();},Game_Map[_0x4376f0(0x705)]['setupBattlebackBattleCore']=function(){const _0x4dddbe=_0x4376f0;this[_0x4dddbe(0x13b)]={},this[_0x4dddbe(0xad5)]={};if(!$dataMap)return;const _0x18f8fe=$dataMap[_0x4dddbe(0x54f)];if(!_0x18f8fe)return;const _0x1719a6=_0x18f8fe['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x1719a6)for(const _0x1d989c of _0x1719a6){_0x1d989c[_0x4dddbe(0x844)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x38bc25=Number(RegExp['$1']),_0x32862f=Number(RegExp['$2']),_0x5c96b5=_0x32862f===0x1?this['_regionBattleback1']:this[_0x4dddbe(0xad5)],_0x4cbc1b=String(RegExp['$3']);_0x5c96b5[_0x38bc25]=_0x4cbc1b;}},VisuMZ['BattleCore']['Game_Map_battleback1Name']=Game_Map['prototype'][_0x4376f0(0x5fa)],Game_Map[_0x4376f0(0x705)][_0x4376f0(0x5fa)]=function(){const _0x3820a5=_0x4376f0;if(!BattleManager['isBattleTest']()){const _0x429515=$gamePlayer[_0x3820a5(0x237)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3820a5(0x13b)]&&this[_0x3820a5(0x13b)][_0x429515])return this[_0x3820a5(0x13b)][_0x429515];}return VisuMZ[_0x3820a5(0x19c)]['Game_Map_battleback1Name'][_0x3820a5(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xc15)]=Game_Map['prototype'][_0x4376f0(0xb42)],Game_Map[_0x4376f0(0x705)][_0x4376f0(0xb42)]=function(){const _0x3f5d0f=_0x4376f0;if(!BattleManager['isBattleTest']()){const _0x267f3f=$gamePlayer[_0x3f5d0f(0x237)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3f5d0f(0x13b)]&&this[_0x3f5d0f(0xad5)][_0x267f3f])return this['_regionBattleback2'][_0x267f3f];}return VisuMZ[_0x3f5d0f(0x19c)][_0x3f5d0f(0xc15)][_0x3f5d0f(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)]['Game_Map_encounterList']=Game_Map[_0x4376f0(0x705)]['encounterList'],Game_Map[_0x4376f0(0x705)][_0x4376f0(0x1ee)]=function(){const _0x470d93=_0x4376f0;let _0x777a8=JsonEx[_0x470d93(0xa66)](VisuMZ[_0x470d93(0x19c)][_0x470d93(0x7cc)][_0x470d93(0x34b)](this));return VisuMZ[_0x470d93(0x19c)][_0x470d93(0xb46)](_0x777a8);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xb46)]=function(_0x248ce8){const _0x2e9953=_0x4376f0;var _0xe2ad7b,_0x4164f8,_0x3136b1;for(_0x3136b1=_0x248ce8[_0x2e9953(0xa3a)]-0x1;_0x3136b1>0x0;_0x3136b1--){_0xe2ad7b=Math[_0x2e9953(0x627)](Math[_0x2e9953(0x8dd)]()*(_0x3136b1+0x1)),_0x4164f8=_0x248ce8[_0x3136b1],_0x248ce8[_0x3136b1]=_0x248ce8[_0xe2ad7b],_0x248ce8[_0xe2ad7b]=_0x4164f8;}return _0x248ce8;},VisuMZ['BattleCore'][_0x4376f0(0x94a)]=Game_Interpreter['prototype'][_0x4376f0(0x58e)],Game_Interpreter[_0x4376f0(0x705)]['command357']=function(_0x41a8e8){const _0x1058d5=_0x4376f0;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ[_0x1058d5(0x19c)][_0x1058d5(0x94a)][_0x1058d5(0x34b)](this,_0x41a8e8);},VisuMZ['BattleCore'][_0x4376f0(0x747)]=Game_Interpreter[_0x4376f0(0x705)]['updateWaitMode'],Game_Interpreter['prototype'][_0x4376f0(0x856)]=function(){const _0x5588e9=_0x4376f0;if(SceneManager[_0x5588e9(0x446)]())switch(this[_0x5588e9(0x5ac)]){case _0x5588e9(0x153):if(Imported[_0x5588e9(0xae3)]){if($gameScreen['battleCameraData']()['angleDuration']>0x0)return!![];this[_0x5588e9(0x5ac)]='';}break;case _0x5588e9(0x358):if(BattleManager[_0x5588e9(0x86d)][_0x5588e9(0x898)]())return!![];this[_0x5588e9(0x5ac)]='';break;case'battleBalloon':if(BattleManager[_0x5588e9(0x86d)]['isAnyBattleBalloonPlaying']())return!![];this[_0x5588e9(0x5ac)]='';break;case'battleCamera':if(Imported[_0x5588e9(0xae3)]){if($gameScreen[_0x5588e9(0x696)]()['cameraDuration']>0x0)return!![];if($gameScreen[_0x5588e9(0x696)]()[_0x5588e9(0xb2c)]>0x0)return!![];this[_0x5588e9(0x5ac)]='';}break;case _0x5588e9(0xb4e):if(BattleManager[_0x5588e9(0x86d)][_0x5588e9(0x799)]())return!![];this[_0x5588e9(0x5ac)]='';break;case _0x5588e9(0x290):if(BattleManager[_0x5588e9(0x86d)][_0x5588e9(0x91a)]())return!![];this[_0x5588e9(0x5ac)]='';break;case _0x5588e9(0xaa5):if(BattleManager[_0x5588e9(0x86d)][_0x5588e9(0x22a)]())return!![];this[_0x5588e9(0x5ac)]='';break;case _0x5588e9(0x209):if(BattleManager[_0x5588e9(0x127)][_0x5588e9(0xa8b)]())return!![];this[_0x5588e9(0x5ac)]='';break;case'battleMove':if(BattleManager[_0x5588e9(0x86d)][_0x5588e9(0x307)]())return!![];this[_0x5588e9(0x5ac)]='';break;case _0x5588e9(0x43c):if(BattleManager[_0x5588e9(0x86d)][_0x5588e9(0xbcc)]())return!![];this[_0x5588e9(0x5ac)]='';break;case _0x5588e9(0x2cb):if(BattleManager['_spriteset'][_0x5588e9(0x599)]())return!![];this[_0x5588e9(0x5ac)]='';break;case _0x5588e9(0xba6):if(BattleManager[_0x5588e9(0x86d)]['isAnyoneSkewing']())return!![];this['_waitMode']='';break;case _0x5588e9(0xc35):if(Imported[_0x5588e9(0x27d)]){if(BattleManager[_0x5588e9(0x86d)]['isAnyProjectilePresent']())return!![];this[_0x5588e9(0x5ac)]='';}break;case _0x5588e9(0xb00):if(Imported[_0x5588e9(0xae3)]){if($gameScreen[_0x5588e9(0x696)]()[_0x5588e9(0xa61)]>0x0)return!![];this['_waitMode']='';}break;case _0x5588e9(0x703):if(BattleManager[_0x5588e9(0x86d)]['isAnyoneSpinning']())return!![];this[_0x5588e9(0x5ac)]='';break;case _0x5588e9(0x205):if(Imported[_0x5588e9(0xae3)]){if($gameScreen[_0x5588e9(0x696)]()[_0x5588e9(0xc33)]>0x0)return!![];this['_waitMode']='';}break;case'battleInjectPrep':if(Imported['VisuMZ_3_ActSeqImpact']){if(BattleManager[_0x5588e9(0x86d)][_0x5588e9(0x9b2)]){if(BattleManager[_0x5588e9(0x86d)][_0x5588e9(0x9b2)]())return!![];this['_waitMode']='battleInjectAni';}else this[_0x5588e9(0x5ac)]='';break;}break;case'battleInjectAni':if(Imported[_0x5588e9(0xa73)]){if(BattleManager[_0x5588e9(0x86d)][_0x5588e9(0x870)]())return!![];this[_0x5588e9(0x5ac)]='';}break;}return VisuMZ[_0x5588e9(0x19c)][_0x5588e9(0x747)][_0x5588e9(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xaed)]=Game_Interpreter[_0x4376f0(0x705)]['command301'],Game_Interpreter[_0x4376f0(0x705)][_0x4376f0(0x2fb)]=function(_0x4a1454){const _0xb3ea3e=_0x4376f0;return!$gameParty[_0xb3ea3e(0x60f)]()?this['command301_PreBattleEvent'](_0x4a1454):VisuMZ[_0xb3ea3e(0x19c)][_0xb3ea3e(0xaed)][_0xb3ea3e(0x34b)](this,_0x4a1454);},Game_Interpreter[_0x4376f0(0x705)][_0x4376f0(0x97b)]=function(_0x41e95d){const _0x56ab2c=_0x4376f0;return VisuMZ['BattleCore'][_0x56ab2c(0xaed)][_0x56ab2c(0x34b)](this,_0x41e95d),BattleManager[_0x56ab2c(0x983)](_0x82dd63=>{const _0x2c2900=_0x56ab2c;this[_0x2c2900(0x5ea)][this['_indent']]=_0x82dd63;}),!![];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x487)]=function(_0x1521ef){const _0x1db0b2=_0x4376f0,_0x3caa5b=$dataCommonEvents[_0x1521ef];if(!_0x3caa5b)return![];if(_0x3caa5b[_0x1db0b2(0x438)][_0x1db0b2(0xa3a)]<=0x1)return![];return!![];},Game_Interpreter[_0x4376f0(0x705)][_0x4376f0(0x8ae)]=function(_0x1d98e3){const _0x59baf4=_0x4376f0,_0xf11bda=VisuMZ['BattleCore'][_0x59baf4(0xae8)][_0x59baf4(0x956)],_0x424399=_0xf11bda[_0x59baf4(0x213)],_0x3b7c3d=$dataCommonEvents[_0x424399];if(_0x3b7c3d&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x424399)){const _0x14257c=this['isOnCurrentMap']()?this[_0x59baf4(0xbc7)]:0x0,_0xe042e9=_0x3b7c3d[_0x59baf4(0x438)];this['setupChild'](_0xe042e9,_0x14257c),this[_0x59baf4(0x903)]=JsonEx[_0x59baf4(0xa66)](this[_0x59baf4(0x903)]);const _0x279974={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx[_0x59baf4(0xa66)](_0x1d98e3)};return this[_0x59baf4(0x903)][_0x59baf4(0x4f4)](this[_0x59baf4(0x347)]+0x1,0x0,_0x279974),!![];}else return VisuMZ[_0x59baf4(0x19c)]['Game_Interpreter_command301'][_0x59baf4(0x34b)](this,_0x1d98e3);},VisuMZ[_0x4376f0(0x19c)]['BattleManager_onEncounter']=BattleManager[_0x4376f0(0xa62)],BattleManager['onEncounter']=function(){const _0x2110ae=_0x4376f0;VisuMZ[_0x2110ae(0x19c)]['BattleManager_onEncounter'][_0x2110ae(0x34b)](this),this['onEncounterBattleCore']();},BattleManager[_0x4376f0(0x518)]=function(){const _0x69701=_0x4376f0,_0x543cb7=VisuMZ[_0x69701(0x19c)]['Settings'][_0x69701(0x956)],_0x47d13d=_0x543cb7[_0x69701(0x213)];_0x47d13d&&VisuMZ[_0x69701(0x19c)][_0x69701(0x487)](_0x47d13d)&&(this[_0x69701(0x802)]=!![],$gameTemp['reserveCommonEvent'](_0x543cb7[_0x69701(0x213)]),$gameMap['updateInterpreter'](),$gameMap['_interpreter'][_0x69701(0x4be)]=!![]),_0x543cb7[_0x69701(0x2d3)]>0x0&&(this[_0x69701(0x15e)]=!![]);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x8c5)]=Scene_Map[_0x4376f0(0x705)]['updateCallMenu'],Scene_Map[_0x4376f0(0x705)][_0x4376f0(0x3cf)]=function(){const _0x1051a5=_0x4376f0;if(BattleManager[_0x1051a5(0x802)])return;VisuMZ[_0x1051a5(0x19c)]['Scene_Map_updateCallMenu'][_0x1051a5(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xb04)]=Scene_Map['prototype'][_0x4376f0(0x271)],Scene_Map[_0x4376f0(0x705)]['launchBattle']=function(){const _0x38cd49=_0x4376f0;BattleManager[_0x38cd49(0x802)]?this['battleCorePreBattleCommonEvent']():VisuMZ[_0x38cd49(0x19c)]['Scene_Map_launchBattle'][_0x38cd49(0x34b)](this);},Scene_Map['prototype'][_0x4376f0(0x69a)]=function(){const _0x2d787a=_0x4376f0;this[_0x2d787a(0x339)]=!![];},VisuMZ['BattleCore']['SceneManager_isSceneChanging']=SceneManager[_0x4376f0(0x22f)],SceneManager[_0x4376f0(0x22f)]=function(){const _0xc94ec7=_0x4376f0;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ[_0xc94ec7(0x19c)][_0xc94ec7(0x296)]['call'](this);},VisuMZ['BattleCore'][_0x4376f0(0x1fd)]=Game_Interpreter[_0x4376f0(0x705)]['terminate'],Game_Interpreter['prototype']['terminate']=function(){const _0x482b07=_0x4376f0;VisuMZ[_0x482b07(0x19c)][_0x482b07(0x1fd)]['call'](this),this[_0x482b07(0x4be)]&&(this[_0x482b07(0x4be)]=undefined,SceneManager[_0x482b07(0x982)]['battleCoreResumeLaunchBattle']());},Scene_Map[_0x4376f0(0x705)]['battleCoreResumeLaunchBattle']=function(){const _0x2628d7=_0x4376f0;BattleManager[_0x2628d7(0x802)]=undefined,BattleManager[_0x2628d7(0xb51)]=!![],this[_0x2628d7(0x388)]();},VisuMZ[_0x4376f0(0x19c)]['Scene_Map_initializeAfter']=Scene_Map[_0x4376f0(0x705)][_0x4376f0(0x72f)],Scene_Map[_0x4376f0(0x705)][_0x4376f0(0x72f)]=function(){const _0x5aee60=_0x4376f0;VisuMZ[_0x5aee60(0x19c)]['Scene_Map_initializeAfter']['call'](this),BattleManager[_0x5aee60(0xb51)]&&(this[_0x5aee60(0x339)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x82b)]=Scene_Map[_0x4376f0(0x705)][_0x4376f0(0x72f)],Scene_Map['prototype'][_0x4376f0(0x72f)]=function(){const _0x4c28ab=_0x4376f0;VisuMZ[_0x4c28ab(0x19c)][_0x4c28ab(0x82b)]['call'](this),$gameTemp[_0x4c28ab(0x774)]();},VisuMZ[_0x4376f0(0x19c)]['Scene_ItemBase_applyItem']=Scene_ItemBase[_0x4376f0(0x705)][_0x4376f0(0x3f5)],Scene_ItemBase[_0x4376f0(0x705)][_0x4376f0(0x3f5)]=function(){const _0x137af7=_0x4376f0;VisuMZ['BattleCore'][_0x137af7(0x9ff)][_0x137af7(0x34b)](this);if(this['item']()[_0x137af7(0x54f)][_0x137af7(0x844)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()[_0x137af7(0x54f)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp['_commonEventQueue']=[]),DataManager[_0x137af7(0x23e)](this[_0x137af7(0x269)]())&&($gameTemp[_0x137af7(0x2ec)]=[]);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x5af)]=Scene_Options[_0x4376f0(0x705)][_0x4376f0(0x24d)],Scene_Options[_0x4376f0(0x705)]['maxCommands']=function(){const _0x1378be=_0x4376f0;let _0x2d9b2c=VisuMZ[_0x1378be(0x19c)][_0x1378be(0x5af)][_0x1378be(0x34b)](this);const _0x2f3db9=VisuMZ[_0x1378be(0x19c)][_0x1378be(0xae8)];if(_0x2f3db9[_0x1378be(0x6d8)][_0x1378be(0x40a)]&&_0x2f3db9['AutoBattle'][_0x1378be(0x5e5)])_0x2d9b2c+=0x2;if(_0x2f3db9[_0x1378be(0x522)][_0x1378be(0x40a)]&&_0x2f3db9[_0x1378be(0x522)][_0x1378be(0x5e5)])_0x2d9b2c+=0x1;return _0x2d9b2c;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x1b3)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x72f)],Scene_Battle['prototype'][_0x4376f0(0x72f)]=function(){const _0x59f008=_0x4376f0;VisuMZ[_0x59f008(0x19c)][_0x59f008(0x1b3)][_0x59f008(0x34b)](this),this[_0x59f008(0x5b9)]();},VisuMZ['BattleCore'][_0x4376f0(0x43d)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x24f)],Scene_Battle['prototype']['start']=function(){const _0x5767b7=_0x4376f0;SceneManager[_0x5767b7(0x44c)]()?(Scene_Message[_0x5767b7(0x705)][_0x5767b7(0x24f)]['call'](this),this[_0x5767b7(0x86d)]&&this[_0x5767b7(0x86d)][_0x5767b7(0x75b)](),BattleManager[_0x5767b7(0xc1f)]&&BattleManager[_0x5767b7(0x38e)]()):(VisuMZ[_0x5767b7(0x19c)]['Scene_Battle_start']['call'](this),$gameTroop[_0x5767b7(0x29c)]());},VisuMZ[_0x4376f0(0x19c)]['Scene_Battle_stop']=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x388)],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x388)]=function(){const _0x12b94e=_0x4376f0;SceneManager[_0x12b94e(0xbec)]()?Scene_Message[_0x12b94e(0x705)][_0x12b94e(0x388)][_0x12b94e(0x34b)](this):VisuMZ['BattleCore']['Scene_Battle_stop'][_0x12b94e(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)]['Scene_Battle_terminate']=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x398)],Scene_Battle['prototype'][_0x4376f0(0x398)]=function(){const _0x3416f7=_0x4376f0;SceneManager[_0x3416f7(0xbec)]()?Scene_Message[_0x3416f7(0x705)][_0x3416f7(0x398)][_0x3416f7(0x34b)](this):VisuMZ[_0x3416f7(0x19c)][_0x3416f7(0x609)][_0x3416f7(0x34b)](this),$gameTemp[_0x3416f7(0xa1c)](),this['clearOnceParallelInterpreters']();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x380)]=function(){const _0x163eeb=_0x4376f0;if(ConfigManager['uiMenuStyle']&&ConfigManager[_0x163eeb(0xbe9)]!==undefined)return ConfigManager[_0x163eeb(0xbe9)];else{if(this['battleLayoutStyle']()==='border')return![];else{return Scene_Message[_0x163eeb(0x705)]['isRightInputMode'][_0x163eeb(0x34b)](this);;}}},VisuMZ['BattleCore']['Scene_Battle_createCancelButton']=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xa00)],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xa00)]=function(){const _0x4e6bf1=_0x4376f0;VisuMZ[_0x4e6bf1(0x19c)][_0x4e6bf1(0x2ae)]['call'](this),this['battleLayoutStyle']()===_0x4e6bf1(0x937)&&this['repositionCancelButtonBorderStyle']();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x5cd)]=function(_0x309449){const _0x558a9e=_0x4376f0;_0x309449?(this[_0x558a9e(0x3f4)]['x']=(Graphics[_0x558a9e(0x895)]-Graphics[_0x558a9e(0x375)])/0x2,this[_0x558a9e(0x3f4)]['y']=(Graphics[_0x558a9e(0x399)]-Graphics[_0x558a9e(0x21b)])/0x2):(this[_0x558a9e(0x3f4)]['x']=Graphics['width']*0xa,this[_0x558a9e(0x3f4)]['y']=Graphics['height']*0xa);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x8a2)]=Scene_Battle[_0x4376f0(0x705)]['selectNextCommand'],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x4d3)]=function(){const _0xf76359=_0x4376f0,_0x1bacd5=BattleManager[_0xf76359(0x965)]();VisuMZ[_0xf76359(0x19c)][_0xf76359(0x8a2)]['call'](this);if(_0x1bacd5){if(_0x1bacd5===BattleManager[_0xf76359(0x965)]())return;if(_0x1bacd5===BattleManager['_subject'])return;if(_0x1bacd5[_0xf76359(0x3f1)]())_0x1bacd5[_0xf76359(0x3f1)]()['stepBack']();}},VisuMZ[_0x4376f0(0x19c)]['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x4376f0(0x705)]['selectPreviousCommand'],Scene_Battle[_0x4376f0(0x705)]['selectPreviousCommand']=function(){const _0x6d7377=_0x4376f0,_0x57e703=BattleManager[_0x6d7377(0x965)]();if(_0x57e703&&_0x57e703[_0x6d7377(0x3f1)])_0x57e703[_0x6d7377(0x3f1)]()[_0x6d7377(0x3da)]();VisuMZ[_0x6d7377(0x19c)][_0x6d7377(0x911)][_0x6d7377(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)]['Scene_Battle_createAllWindows']=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xb43)],Scene_Battle[_0x4376f0(0x705)]['createAllWindows']=function(){const _0x2e817f=_0x4376f0;this['createEnemyNameContainer'](),VisuMZ['BattleCore'][_0x2e817f(0x1c1)]['call'](this),this[_0x2e817f(0x566)]();},VisuMZ[_0x4376f0(0x19c)]['Scene_Battle_logWindowRect']=Scene_Battle[_0x4376f0(0x705)]['logWindowRect'],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xa9f)]=function(){const _0xb6bfa=_0x4376f0;if(VisuMZ['BattleCore'][_0xb6bfa(0xae8)]['BattleLog'][_0xb6bfa(0x7a5)])return VisuMZ[_0xb6bfa(0x19c)][_0xb6bfa(0xae8)][_0xb6bfa(0xa03)][_0xb6bfa(0x7a5)][_0xb6bfa(0x34b)](this);return VisuMZ[_0xb6bfa(0x19c)]['Scene_Battle_logWindowRect'][_0xb6bfa(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x7bf)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x83d)],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x83d)]=function(){const _0x3dcf89=_0x4376f0;VisuMZ[_0x3dcf89(0x19c)][_0x3dcf89(0x7bf)][_0x3dcf89(0x34b)](this),this[_0x3dcf89(0x373)]();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x373)]=function(){const _0x342aaf=_0x4376f0,_0x284d2a=this['_partyCommandWindow'];_0x284d2a[_0x342aaf(0xb3a)](_0x342aaf(0x846),this['commandAutoBattle'][_0x342aaf(0x54e)](this)),_0x284d2a[_0x342aaf(0xb3a)](_0x342aaf(0x5d0),this[_0x342aaf(0x273)][_0x342aaf(0x54e)](this));const _0x43af17=this[_0x342aaf(0x6c1)]();switch(_0x43af17){case'xp':case _0x342aaf(0xaf9):return this['_partyCommandWindow'][_0x342aaf(0x48d)](0x1);break;}},Scene_Battle['prototype'][_0x4376f0(0x534)]=function(){const _0x264ad3=_0x4376f0;BattleManager['_autoBattle']=!![],$gameParty[_0x264ad3(0x2af)](),this['selectNextCommand'](),BattleManager[_0x264ad3(0x4c7)]()&&(BattleManager[_0x264ad3(0x645)]=![]);},Scene_Battle[_0x4376f0(0x705)]['commandOptions']=function(){const _0x3368a5=_0x4376f0;this[_0x3368a5(0x221)]()?(this[_0x3368a5(0x70f)]=!![],this[_0x3368a5(0x127)][_0x3368a5(0x6b0)](_0x3368a5(0x6e3),VisuMZ[_0x3368a5(0x19c)][_0x3368a5(0xae8)][_0x3368a5(0x863)]['ActiveTpbOptionsMessage'])):this[_0x3368a5(0x7b5)]();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x221)]=function(){const _0x5c4136=_0x4376f0;return BattleManager[_0x5c4136(0x52d)]();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x7b5)]=function(){const _0x32959d=_0x4376f0;this[_0x32959d(0x70f)]=![],this['_spriteset'][_0x32959d(0x75b)](),this[_0x32959d(0x3f4)][_0x32959d(0x42f)]=![];if(BattleManager[_0x32959d(0x6b8)]())($dataSystem[_0x32959d(0x5fa)]||$dataSystem[_0x32959d(0xb42)])&&SceneManager[_0x32959d(0x9f3)]();else($gameMap[_0x32959d(0x5fa)]()||$gameMap[_0x32959d(0xb42)]())&&SceneManager[_0x32959d(0x9f3)]();SceneManager['push'](Scene_Options),BattleManager[_0x32959d(0x4c7)]()&&(BattleManager[_0x32959d(0xc1f)]=BattleManager[_0x32959d(0x965)]());},VisuMZ['BattleCore'][_0x4376f0(0xb38)]=Scene_Battle[_0x4376f0(0x705)]['updateBattleProcess'],Scene_Battle['prototype'][_0x4376f0(0x5d1)]=function(){const _0x37d634=_0x4376f0;VisuMZ[_0x37d634(0x19c)][_0x37d634(0xb38)][_0x37d634(0x34b)](this);if(this['_callSceneOptions']&&!BattleManager[_0x37d634(0x3f8)])this[_0x37d634(0x7b5)]();},VisuMZ['BattleCore']['Scene_Battle_update']=Scene_Battle['prototype']['update'],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x75b)]=function(){const _0x22a3b9=_0x4376f0;VisuMZ[_0x22a3b9(0x19c)][_0x22a3b9(0x553)]['call'](this),this[_0x22a3b9(0x256)]();},Scene_Battle['prototype']['createAutoBattleWindow']=function(){const _0x184138=_0x4376f0,_0x171822=this[_0x184138(0x889)]();this[_0x184138(0xa6f)]=new Window_AutoBattleCancel(_0x171822),this[_0x184138(0xa6f)][_0x184138(0xa38)](),this[_0x184138(0x3e4)](this['_autoBattleWindow']);},Scene_Battle[_0x4376f0(0x705)]['autoBattleWindowRect']=function(){const _0x5b9586=_0x4376f0;return VisuMZ[_0x5b9586(0x19c)]['Settings']['AutoBattle']['AutoBattleRect'][_0x5b9586(0x34b)](this);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x5b9)]=function(){const _0x313e23=_0x4376f0;this[_0x313e23(0x2aa)]=[];},Scene_Battle['prototype']['updateOnceParallelInterpreters']=function(){const _0x5c7c13=_0x4376f0;if(!this[_0x5c7c13(0x2aa)])return;for(const _0x3d828d of this[_0x5c7c13(0x2aa)]){_0x3d828d&&_0x3d828d['update']();}},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xbb4)]=function(_0x3b0440){const _0x2e4135=_0x4376f0,_0x41cbc5=$dataCommonEvents[_0x3b0440];if(!_0x41cbc5)return;const _0x1d7a2c=new Game_BattleOnceParallelInterpreter();this[_0x2e4135(0x45d)](_0x1d7a2c),_0x1d7a2c[_0x2e4135(0x7ea)](_0x3b0440);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x45d)]=function(_0x2b1c63){const _0x787615=_0x4376f0;this['_onceParallelInterpreters']=this[_0x787615(0x2aa)]||[],this[_0x787615(0x2aa)][_0x787615(0x6b0)](_0x2b1c63);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xb91)]=function(_0x246c3a){const _0x20624b=_0x4376f0;this[_0x20624b(0x2aa)]=this['_onceParallelInterpreters']||[],this[_0x20624b(0x2aa)][_0x20624b(0x246)](_0x246c3a);},Game_Troop[_0x4376f0(0x705)]['onBattleStartOnceParallels']=function(){const _0x4e9e7d=_0x4376f0;for(const _0x1dbd8a of this['troop']()[_0x4e9e7d(0x493)]){if(!this[_0x4e9e7d(0x463)](_0x1dbd8a))continue;SceneManager[_0x4e9e7d(0x982)][_0x4e9e7d(0x5d4)](_0x1dbd8a);}},Game_Troop[_0x4376f0(0x705)]['doesPageHaveOnceParallelStart']=function(_0x3e773d){const _0x37d698=_0x4376f0;if(!_0x3e773d)return;for(const _0x449e17 of _0x3e773d[_0x37d698(0x438)]){if([0x6c,0x198]['includes'](_0x449e17['code'])){const _0x21330b=_0x449e17[_0x37d698(0x3fd)][0x0];if(_0x21330b[_0x37d698(0x844)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle['prototype']['playOnceParallelTroopPage']=function(_0x595e1f){const _0x46d3bf=_0x4376f0;if(!_0x595e1f)return;const _0x452c1d=new Game_BattleOnceParallelInterpreter();this[_0x46d3bf(0x45d)](_0x452c1d),_0x452c1d['setTroopPage'](_0x595e1f);};function Game_BattleOnceParallelInterpreter(){const _0x25b1e2=_0x4376f0;this[_0x25b1e2(0x72f)](...arguments);}Game_BattleOnceParallelInterpreter[_0x4376f0(0x705)]=Object['create'](Game_Interpreter[_0x4376f0(0x705)]),Game_BattleOnceParallelInterpreter['prototype'][_0x4376f0(0xa32)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype']['setCommonEvent']=function(_0x48fb3c){const _0x89d5b7=_0x4376f0,_0x533284=$dataCommonEvents[_0x48fb3c];_0x533284?this[_0x89d5b7(0x578)](_0x533284[_0x89d5b7(0x438)],0x0):this[_0x89d5b7(0x398)]();},Game_BattleOnceParallelInterpreter[_0x4376f0(0x705)][_0x4376f0(0x398)]=function(){const _0x367a83=_0x4376f0;if(!SceneManager[_0x367a83(0x446)]())return;SceneManager['_scene'][_0x367a83(0xb91)](this),Game_Interpreter[_0x367a83(0x705)][_0x367a83(0x398)]['call'](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x4376f0(0x36c)]=function(_0x4c8b70){const _0x545cb1=_0x4376f0;_0x4c8b70?this[_0x545cb1(0x578)](_0x4c8b70[_0x545cb1(0x438)],0x0):this[_0x545cb1(0x398)]();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x38b)]=function(){const _0x910af7=_0x4376f0;return VisuMZ[_0x910af7(0x19c)]['Settings'][_0x910af7(0x863)][_0x910af7(0x884)];},VisuMZ['BattleCore'][_0x4376f0(0x3df)]=Scene_Battle[_0x4376f0(0x705)]['startPartyCommandSelection'],Scene_Battle['prototype'][_0x4376f0(0x224)]=function(){const _0x384b6f=_0x4376f0;this[_0x384b6f(0x38b)]()?this[_0x384b6f(0x6e4)]():VisuMZ[_0x384b6f(0x19c)][_0x384b6f(0x3df)][_0x384b6f(0x34b)](this);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x6e4)]=function(){const _0x130af7=_0x4376f0;if(BattleManager[_0x130af7(0x32a)]())this[_0x130af7(0x4d3)]();else BattleManager[_0x130af7(0x4c7)]()&&VisuMZ['BattleCore'][_0x130af7(0x3df)][_0x130af7(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x55c)]=Scene_Battle[_0x4376f0(0x705)]['commandFight'],Scene_Battle['prototype']['commandFight']=function(){const _0x19f932=_0x4376f0;BattleManager['isTpb']()?(this[_0x19f932(0x2d8)](),this[_0x19f932(0x515)]()):VisuMZ[_0x19f932(0x19c)][_0x19f932(0x55c)][_0x19f932(0x34b)](this);},Scene_Battle['prototype'][_0x4376f0(0x2d8)]=function(){const _0xa2c0a6=_0x4376f0;if(!VisuMZ[_0xa2c0a6(0x19c)][_0xa2c0a6(0xb70)])return;if(Imported[_0xa2c0a6(0x659)]&&BattleManager['isCTB']())return;const _0x2d1595=$gameParty[_0xa2c0a6(0x3a7)]()[_0xa2c0a6(0x4bd)](_0xfee708=>_0xfee708[_0xa2c0a6(0x7db)]()&&_0xfee708[_0xa2c0a6(0x34e)]());BattleManager[_0xa2c0a6(0xb79)]=_0x2d1595[0x0]||null,BattleManager[_0xa2c0a6(0xb79)]&&BattleManager[_0xa2c0a6(0xb79)]['setActionState'](_0xa2c0a6(0x320));},VisuMZ['BattleCore'][_0x4376f0(0x17d)]=Scene_Battle[_0x4376f0(0x705)]['commandEscape'],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xae5)]=function(){const _0x16ac65=_0x4376f0;VisuMZ['BattleCore']['Scene_Battle_commandEscape'][_0x16ac65(0x34b)](this);if(!BattleManager[_0x16ac65(0x4c7)]())BattleManager[_0x16ac65(0xb79)]=null;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x820)]=Scene_Battle['prototype'][_0x4376f0(0x4ed)],Scene_Battle['prototype']['createActorCommandWindow']=function(){const _0x378d26=_0x4376f0;VisuMZ[_0x378d26(0x19c)]['Scene_Battle_createActorCommandWindow'][_0x378d26(0x34b)](this),this[_0x378d26(0x7fa)]();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x7fa)]=function(){const _0x2ddcd3=_0x4376f0,_0x1f9ea0=this[_0x2ddcd3(0x912)];_0x1f9ea0[_0x2ddcd3(0xb3a)](_0x2ddcd3(0x4ca),this['actorCommandEscape'][_0x2ddcd3(0x54e)](this)),_0x1f9ea0['setHandler'](_0x2ddcd3(0x846),this['actorCommandAutoBattle'][_0x2ddcd3(0x54e)](this)),_0x1f9ea0[_0x2ddcd3(0xb3a)]('singleSkill',this[_0x2ddcd3(0x11a)]['bind'](this)),BattleManager[_0x2ddcd3(0x4c7)]()&&(this['isPartyCommandWindowDisabled']()?delete _0x1f9ea0[_0x2ddcd3(0x2a2)][_0x2ddcd3(0x67b)]:_0x1f9ea0[_0x2ddcd3(0xb3a)](_0x2ddcd3(0x67b),this[_0x2ddcd3(0x8ca)][_0x2ddcd3(0x54e)](this)));},Scene_Battle['prototype'][_0x4376f0(0xace)]=function(){const _0x353c90=_0x4376f0;this[_0x353c90(0xae5)]();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xc01)]=function(){const _0x1aef34=_0x4376f0;BattleManager[_0x1aef34(0x965)]()[_0x1aef34(0x9cd)](),BattleManager[_0x1aef34(0x72e)](),BattleManager['selectNextActor'](),this[_0x1aef34(0xb62)]();},Scene_Battle[_0x4376f0(0x705)]['actorCommandSingleSkill']=function(){const _0x15c008=_0x4376f0,_0x360b7b=BattleManager[_0x15c008(0x8af)](),_0x1c948b=this[_0x15c008(0x912)]['currentExt']();_0x360b7b[_0x15c008(0x338)](_0x1c948b),BattleManager[_0x15c008(0x965)]()[_0x15c008(0x249)]($dataSkills[_0x1c948b]),this[_0x15c008(0x3d3)]();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x8ca)]=function(){const _0x39dee1=_0x4376f0;this[_0x39dee1(0x8b4)]()?this['performTpbActiveCheckSwitch']():this[_0x39dee1(0x6ef)]();},VisuMZ['BattleCore']['TpbActiveChangeEnabled']=![],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x8b4)]=function(){const _0x3538a0=_0x4376f0;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager['isCTB']())return![];else{if(!VisuMZ[_0x3538a0(0x19c)]['TpbActiveChangeEnabled'])return![];const _0x3f3966=$gameParty[_0x3538a0(0x3a7)]()[_0x3538a0(0x4bd)](_0x20d5aa=>_0x20d5aa[_0x3538a0(0x7db)]()&&_0x20d5aa[_0x3538a0(0x34e)]());return _0x3f3966[_0x3538a0(0xa3a)]>0x0&&BattleManager[_0x3538a0(0x965)]()!==_0x3f3966[_0x3f3966['length']-0x1];}},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x646)]=function(){const _0x3a1564=_0x4376f0,_0x1a5f55=BattleManager['actor'](),_0x152f81=_0x1a5f55[_0x3a1564(0x3f1)]();if(_0x152f81)_0x152f81[_0x3a1564(0x3da)]();const _0x42f80b=$gameParty[_0x3a1564(0x3a7)]()[_0x3a1564(0x4bd)](_0x27dae3=>_0x27dae3[_0x3a1564(0x7db)]()&&_0x27dae3[_0x3a1564(0x34e)]()),_0x26911b=_0x42f80b[_0x3a1564(0x68d)](_0x1a5f55),_0x1ad6a1=_0x42f80b[_0x26911b+0x1];BattleManager[_0x3a1564(0xb79)]=_0x1ad6a1||null;if(_0x1ad6a1)_0x1ad6a1[_0x3a1564(0x949)]('inputting');_0x1a5f55[_0x3a1564(0x949)](_0x3a1564(0x70e)),this[_0x3a1564(0xb62)]();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x6ef)]=function(){const _0x1e4967=_0x4376f0;this[_0x1e4967(0xc48)][_0x1e4967(0x578)](),this[_0x1e4967(0x912)]['close']();if(!VisuMZ['BattleCore'][_0x1e4967(0xb70)])return;if(Imported[_0x1e4967(0x659)]&&BattleManager[_0x1e4967(0x3a4)]())return;if(BattleManager[_0x1e4967(0xb79)]){BattleManager[_0x1e4967(0xb79)][_0x1e4967(0x949)](_0x1e4967(0x70e));const _0x1fd25=BattleManager[_0x1e4967(0xb79)]['battler']();if(_0x1fd25)_0x1fd25[_0x1e4967(0x3da)]();}BattleManager[_0x1e4967(0xb79)]=null;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x190)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x223)],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x223)]=function(){const _0x4d381e=_0x4376f0;VisuMZ['BattleCore'][_0x4d381e(0x190)][_0x4d381e(0x34b)](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x163)]=function(){const _0x30b697=_0x4376f0;this[_0x30b697(0x912)][_0x30b697(0x3e3)](this[_0x30b697(0xaea)]),this['_partyCommandWindow'][_0x30b697(0x3e3)](this[_0x30b697(0xaea)]);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x613)]=function(){const _0x5933f8=_0x4376f0;if(!VisuMZ[_0x5933f8(0x19c)][_0x5933f8(0xae8)][_0x5933f8(0x653)][_0x5933f8(0x9ab)])return;this[_0x5933f8(0xbd0)]=new Sprite(),this[_0x5933f8(0xbd0)]['x']=this['_windowLayer']['x'],this[_0x5933f8(0xbd0)]['y']=this[_0x5933f8(0x3f4)]['y'];const _0x32d3ab=this[_0x5933f8(0x617)][_0x5933f8(0x68d)](this[_0x5933f8(0x3f4)]);this['addChildAt'](this[_0x5933f8(0xbd0)],_0x32d3ab);for(let _0x269d4a=0x0;_0x269d4a<0x8;_0x269d4a++){const _0x544c30=new Window_EnemyName(_0x269d4a);this[_0x5933f8(0xbd0)][_0x5933f8(0x3e4)](_0x544c30);}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x74b)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xa78)],Scene_Battle['prototype'][_0x4376f0(0xa78)]=function(){const _0x4cf4ad=_0x4376f0;VisuMZ['BattleCore']['Scene_Battle_createEnemyWindow']['call'](this),this[_0x4cf4ad(0x576)]();},Scene_Battle['prototype'][_0x4376f0(0x576)]=function(){const _0x3b8289=_0x4376f0;this[_0x3b8289(0x322)](!![]),this[_0x3b8289(0x322)](![]);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x225)]=function(_0x1d32bc){const _0x237376=_0x4376f0,_0x20a15c=Window_BattleMultiTarget[_0x237376(0x5bf)],_0x2955e1=this[_0x237376(0xb48)](0x1,!![]);let _0x42ef7a=_0x1d32bc?Graphics[_0x237376(0x375)]-_0x20a15c:0x0;_0x42ef7a+=_0x1d32bc?Window_BattleMultiTarget['ACTOR_OFFSET_X']:Window_BattleMultiTarget['ENEMY_OFFSET_X'];const _0x4b9a76=[_0x237376(0x404)][_0x237376(0x3e9)](this[_0x237376(0x6c1)]())?0x0:this['_statusWindow']['height'];let _0xf44700=Graphics[_0x237376(0x21b)]-_0x4b9a76-_0x2955e1;return _0xf44700+=_0x1d32bc?Window_BattleMultiTarget[_0x237376(0x7b1)]:Window_BattleMultiTarget[_0x237376(0x594)],new Rectangle(_0x42ef7a,_0xf44700,_0x20a15c,_0x2955e1);},Scene_Battle['prototype']['createMultiTargetWindow']=function(_0x4ba059){const _0x5ae332=_0x4376f0,_0x356428=this['multiTargetWindowRect'](_0x4ba059),_0x15e738=new Window_BattleMultiTarget(_0x356428,_0x4ba059);this[_0x5ae332(0x854)](_0x15e738),_0x4ba059?this[_0x5ae332(0x944)]=_0x15e738:this[_0x5ae332(0xb16)]=_0x15e738;},VisuMZ['BattleCore']['Scene_Battle_needsInputWindowChangeIBS']=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x40e)],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x40e)]=function(){const _0x518690=_0x4376f0;if(this['_inBattleStatusMode'])return![];return VisuMZ[_0x518690(0x19c)][_0x518690(0x838)][_0x518690(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x4e7)]=Scene_Battle['prototype'][_0x4376f0(0x9a5)],Scene_Battle['prototype'][_0x4376f0(0x9a5)]=function(){const _0x381f2e=_0x4376f0;if(this[_0x381f2e(0xc24)]&&this['_inBattleStatusMode']){this[_0x381f2e(0xc24)][_0x381f2e(0x42f)]=!![];return;}VisuMZ[_0x381f2e(0x19c)][_0x381f2e(0x4e7)][_0x381f2e(0x34b)](this);},VisuMZ['BattleCore']['Scene_Battle_isTimeActiveIBS']=Scene_Battle[_0x4376f0(0x705)]['isTimeActive'],Scene_Battle['prototype']['isTimeActive']=function(){const _0xfd181c=_0x4376f0;if(this[_0xfd181c(0xae2)])return![];return VisuMZ['BattleCore'][_0xfd181c(0xab5)]['call'](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x52a)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xb43)],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xb43)]=function(){const _0x49f8a8=_0x4376f0;VisuMZ[_0x49f8a8(0x19c)][_0x49f8a8(0x52a)][_0x49f8a8(0x34b)](this),this[_0x49f8a8(0x2a0)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x757)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x83d)],Scene_Battle[_0x4376f0(0x705)]['createPartyCommandWindow']=function(){const _0x344778=_0x4376f0;VisuMZ[_0x344778(0x19c)][_0x344778(0x757)]['call'](this);const _0x4c79e0=this[_0x344778(0xc48)];_0x4c79e0[_0x344778(0xb3a)](_0x344778(0x383),this['startInBattleStatus']['bind'](this,_0x4c79e0));},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xbda)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x4ed)],Scene_Battle['prototype'][_0x4376f0(0x4ed)]=function(){const _0x3c972e=_0x4376f0;VisuMZ[_0x3c972e(0x19c)]['Scene_Battle_createActorCommandWindowIBS'][_0x3c972e(0x34b)](this);const _0x14c328=this['_actorCommandWindow'];_0x14c328[_0x3c972e(0xb3a)](_0x3c972e(0x383),this[_0x3c972e(0x2eb)]['bind'](this,_0x14c328));},Scene_Battle['prototype']['createInBattleStatusWindow']=function(){const _0x5565c2=_0x4376f0,_0x18df33=this[_0x5565c2(0x4d9)](),_0x17e3f8=new Window_InBattleStatus(_0x18df33);this['addWindow'](_0x17e3f8),_0x17e3f8[_0x5565c2(0xa38)](),_0x17e3f8[_0x5565c2(0x836)](),this[_0x5565c2(0xbb1)]=_0x17e3f8;},Scene_Battle['prototype'][_0x4376f0(0x4d9)]=function(){const _0x3d2e96=_0x4376f0;if(VisuMZ[_0x3d2e96(0x19c)][_0x3d2e96(0xae8)][_0x3d2e96(0x526)][_0x3d2e96(0xada)])return VisuMZ[_0x3d2e96(0x19c)][_0x3d2e96(0xae8)][_0x3d2e96(0x526)][_0x3d2e96(0xada)][_0x3d2e96(0x34b)](this);const _0x103955=Graphics['boxWidth']>0x3e8?0x78:0x0,_0x1ade09=this[_0x3d2e96(0xaea)]['y']+this[_0x3d2e96(0xaea)][_0x3d2e96(0x399)],_0x4ef60f=Graphics[_0x3d2e96(0x375)]-_0x103955*0x2,_0x14e49b=Graphics[_0x3d2e96(0x21b)]-_0x1ade09-this[_0x3d2e96(0x501)]();return new Rectangle(_0x103955,_0x1ade09,_0x4ef60f,_0x14e49b);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x2eb)]=function(_0x178b54){const _0x3b9bdf=_0x4376f0;this[_0x3b9bdf(0x854)](this[_0x3b9bdf(0xbb1)]),this[_0x3b9bdf(0xae2)]=!![],this['_helpWindow']['show']();const _0x54dd12=['xp',_0x3b9bdf(0xaf9),_0x3b9bdf(0x937),'sideview_ui','frontview_ui'];let _0x286ba4=_0x54dd12[_0x3b9bdf(0x3e9)](this[_0x3b9bdf(0x6c1)]());_0x286ba4&&(_0x178b54[_0x3b9bdf(0xa38)](),_0x178b54[_0x3b9bdf(0x836)]()),this[_0x3b9bdf(0xbb1)]['setBattler'](BattleManager[_0x3b9bdf(0x965)]()||$gameParty[_0x3b9bdf(0x276)]()[0x0]),this[_0x3b9bdf(0xbb1)][_0x3b9bdf(0x2bc)](_0x178b54),this['_inBattleStatusWindow'][_0x3b9bdf(0x330)](),this[_0x3b9bdf(0xbb1)][_0x3b9bdf(0x48e)]();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x635)]=function(){const _0x35dd67=_0x4376f0;this['_inBattleStatusMode']=![],this[_0x35dd67(0xaea)][_0x35dd67(0xa38)]();const _0x55bfc5=this[_0x35dd67(0xbb1)][_0x35dd67(0x7e4)]();_0x55bfc5[_0x35dd67(0x330)](),_0x55bfc5['open'](),_0x55bfc5[_0x35dd67(0x42e)](),this['_inBattleStatusWindow'][_0x35dd67(0xa38)](),this[_0x35dd67(0xbb1)][_0x35dd67(0x836)]();},Scene_Battle['prototype'][_0x4376f0(0x6c1)]=function(){const _0x3cbf0b=_0x4376f0;if($gameTemp[_0x3cbf0b(0xc2f)]!==undefined)return $gameTemp[_0x3cbf0b(0xc2f)];if(this[_0x3cbf0b(0x1b7)])return this['_battleLayoutStyle'];return this['_battleLayoutStyle']=VisuMZ[_0x3cbf0b(0x19c)][_0x3cbf0b(0xae8)][_0x3cbf0b(0x1a6)][_0x3cbf0b(0x12b)][_0x3cbf0b(0x177)]()[_0x3cbf0b(0x5cf)](),this[_0x3cbf0b(0x1b7)]===_0x3cbf0b(0x7b6)&&!Imported['VisuMZ_3_SideviewBattleUI']&&(this[_0x3cbf0b(0x1b7)]=_0x3cbf0b(0x847)),this[_0x3cbf0b(0x1b7)]===_0x3cbf0b(0x404)&&!Imported[_0x3cbf0b(0x764)]&&(this[_0x3cbf0b(0x1b7)]='default'),this[_0x3cbf0b(0x1b7)];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x7ef)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x501)],Scene_Battle['prototype'][_0x4376f0(0x501)]=function(){const _0x2e8106=_0x4376f0,_0x573b55=this[_0x2e8106(0x6c1)]();switch(_0x573b55){case _0x2e8106(0x438):return this[_0x2e8106(0xb48)](Math[_0x2e8106(0xa63)](0x1,$gameParty['maxBattleMembers']()),!![]);break;case _0x2e8106(0x937):return this[_0x2e8106(0xb48)](0x4,!![]);break;default:return VisuMZ['BattleCore'][_0x2e8106(0x7ef)][_0x2e8106(0x34b)](this);break;}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x604)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x668)],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x668)]=function(){const _0x39d71f=_0x4376f0,_0x250077=this[_0x39d71f(0x6c1)]();switch(_0x250077){case _0x39d71f(0x937):return this[_0x39d71f(0xa69)]();break;case'default':case'list':case'xp':case _0x39d71f(0xaf9):default:return VisuMZ[_0x39d71f(0x19c)][_0x39d71f(0x604)]['call'](this);break;}},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x750)]=function(){const _0x45adb2=_0x4376f0,_0x1316f0=this[_0x45adb2(0x6c1)]();switch(_0x1316f0){case'xp':case'portrait':return this[_0x45adb2(0x4a3)]();break;case _0x45adb2(0x937):return this['statusWindowRectBorderStyle']();break;case _0x45adb2(0x847):case _0x45adb2(0x438):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x4376f0(0x19c)]['Scene_Battle_partyCommandWindowRect']=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x198)],Scene_Battle[_0x4376f0(0x705)]['partyCommandWindowRect']=function(){const _0x48738d=_0x4376f0,_0x3d0aeb=this[_0x48738d(0x6c1)]();switch(_0x3d0aeb){case'xp':case _0x48738d(0xaf9):return this[_0x48738d(0xb0a)]();break;case'border':return this[_0x48738d(0x335)]();case _0x48738d(0x847):case'list':default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x942)]=function(){const _0x3deb35=_0x4376f0,_0x460808=VisuMZ[_0x3deb35(0x19c)][_0x3deb35(0xae8)]['BattleLayout'],_0x12f7f2=_0x460808[_0x3deb35(0x6f4)]||0xc0,_0x470a58=this[_0x3deb35(0x501)](),_0x4aa6d5=this[_0x3deb35(0x380)]()?Graphics[_0x3deb35(0x375)]-_0x12f7f2:0x0,_0x5944bb=Graphics[_0x3deb35(0x21b)]-_0x470a58;return new Rectangle(_0x4aa6d5,_0x5944bb,_0x12f7f2,_0x470a58);},Scene_Battle[_0x4376f0(0x705)]['actorCommandWindowRect']=function(){const _0x3b145b=_0x4376f0;return this[_0x3b145b(0x198)]();},VisuMZ['BattleCore'][_0x4376f0(0x240)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xbfa)],Scene_Battle[_0x4376f0(0x705)]['updateStatusWindowPosition']=function(){const _0x397488=_0x4376f0;if(this[_0x397488(0xae2)])return;const _0xb74355=this['battleLayoutStyle']();switch(_0xb74355){case'xp':case'portrait':case'border':break;case _0x397488(0x847):case _0x397488(0x438):default:VisuMZ[_0x397488(0x19c)][_0x397488(0x240)]['call'](this);break;}},Scene_Battle['prototype']['statusWindowRectDefaultStyle']=function(){const _0x7b872f=_0x4376f0,_0x5d21ef=VisuMZ[_0x7b872f(0x19c)][_0x7b872f(0xae8)][_0x7b872f(0x1a6)],_0x1840d9=Window_BattleStatus[_0x7b872f(0x705)][_0x7b872f(0x80b)](),_0x255b45=Graphics[_0x7b872f(0x375)]-(_0x5d21ef[_0x7b872f(0x6f4)]||0xc0),_0x4dcab4=this[_0x7b872f(0x501)]()+_0x1840d9,_0x5f1bd2=this[_0x7b872f(0x380)]()?0x0:Graphics[_0x7b872f(0x375)]-_0x255b45,_0x4f0ea7=Graphics[_0x7b872f(0x21b)]-_0x4dcab4+_0x1840d9;return new Rectangle(_0x5f1bd2,_0x4f0ea7,_0x255b45,_0x4dcab4);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x4a3)]=function(){const _0x31db75=_0x4376f0,_0x5cbe9d=Window_BattleStatus[_0x31db75(0x705)]['extraHeight'](),_0x3ddb23=Graphics[_0x31db75(0x375)],_0x5846d8=this[_0x31db75(0x501)]()+_0x5cbe9d,_0x29616e=0x0,_0x40f406=Graphics[_0x31db75(0x21b)]-_0x5846d8+_0x5cbe9d;return new Rectangle(_0x29616e,_0x40f406,_0x3ddb23,_0x5846d8);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xb0a)]=function(){const _0x9cf3a8=_0x4376f0,_0x402f7a=Graphics[_0x9cf3a8(0x375)]/0x2,_0x38fb40=this['calcWindowHeight'](VisuMZ[_0x9cf3a8(0x19c)][_0x9cf3a8(0xae8)][_0x9cf3a8(0x1a6)][_0x9cf3a8(0x7c4)],!![]),_0x1aa21c=Math[_0x9cf3a8(0x1c6)]((Graphics['boxWidth']-_0x402f7a)/0x2),_0xaf6fe8=Graphics[_0x9cf3a8(0x21b)]-_0x38fb40-this[_0x9cf3a8(0x4a3)]()[_0x9cf3a8(0x399)];return new Rectangle(_0x1aa21c,_0xaf6fe8,_0x402f7a,_0x38fb40);},Scene_Battle['prototype'][_0x4376f0(0xa69)]=function(){const _0x2b55e6=_0x4376f0,_0x508b89=Graphics[_0x2b55e6(0x895)],_0x4b2063=Math[_0x2b55e6(0x1c6)]((Graphics['boxWidth']-_0x508b89)/0x2),_0x1b2efe=this[_0x2b55e6(0x4a7)](),_0x499e82=(Graphics[_0x2b55e6(0x399)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x4b2063,_0x499e82,_0x508b89,_0x1b2efe);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x482)]=function(){const _0x40f720=_0x4376f0,_0x24c967=Graphics[_0x40f720(0x895)],_0x885d44=Math['round']((Graphics[_0x40f720(0x375)]-_0x24c967)/0x2),_0x2794b9=this[_0x40f720(0xb48)](0x4,!![]),_0x3904aa=Graphics[_0x40f720(0x21b)]-_0x2794b9+(Graphics[_0x40f720(0x399)]-Graphics['boxHeight'])/0x2;return new Rectangle(_0x885d44,_0x3904aa,_0x24c967,_0x2794b9);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x335)]=function(){const _0x35b0fd=_0x4376f0,_0x292784=Math['floor'](Graphics[_0x35b0fd(0x895)]/0x3),_0xd8dd08=this['isRightInputMode']()?(Graphics[_0x35b0fd(0x895)]+Graphics['boxWidth'])/0x2-_0x292784:(Graphics[_0x35b0fd(0x895)]-Graphics[_0x35b0fd(0x375)])/-0x2,_0x1304a6=this[_0x35b0fd(0xa69)](),_0x46803f=_0x1304a6['y']+_0x1304a6[_0x35b0fd(0x399)],_0xb3963a=this[_0x35b0fd(0x482)](),_0x50fcae=_0xb3963a['y']-_0x46803f;return new Rectangle(_0xd8dd08,_0x46803f,_0x292784,_0x50fcae);},Scene_Battle['prototype']['skillItemWindowRectBorderStyle']=function(){const _0x419ac8=_0x4376f0,_0x806fc7=Math['ceil'](Graphics[_0x419ac8(0x895)]/0x3),_0x497f98=Math[_0x419ac8(0x1c6)]((Graphics[_0x419ac8(0x375)]-_0x806fc7)/0x2),_0x3778ec=this[_0x419ac8(0x335)](),_0x498376=_0x3778ec['y'],_0x5b3daf=_0x3778ec['height'];return new Rectangle(_0x497f98,_0x498376,_0x806fc7,_0x5b3daf);},Scene_Battle['prototype'][_0x4376f0(0xa49)]=function(){const _0x11fcdf=_0x4376f0;this[_0x11fcdf(0xc24)]['y']=this[_0x11fcdf(0xaea)]['y']+this['_helpWindow']['height'],this['isRightInputMode']()?this['battleLayoutStyle']()==='border'?this[_0x11fcdf(0xc24)]['x']=0x8:this[_0x11fcdf(0xc24)]['x']=-this[_0x11fcdf(0xc24)][_0x11fcdf(0x895)]-0x4:this[_0x11fcdf(0xc24)]['x']=Graphics['width']-(Graphics['width']-Graphics[_0x11fcdf(0x375)])/0x2-this[_0x11fcdf(0xc24)][_0x11fcdf(0x895)]-0x4;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x6db)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x834)],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x834)]=function(){const _0x7588af=_0x4376f0;if(this['battleLayoutStyle']()==='border')return this[_0x7588af(0xbe3)]();else return this[_0x7588af(0xbd5)]()?this[_0x7588af(0x685)]():VisuMZ[_0x7588af(0x19c)]['Scene_Battle_skillWindowRect']['call'](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x282)]=Scene_Battle['prototype'][_0x4376f0(0x37d)],Scene_Battle['prototype'][_0x4376f0(0x37d)]=function(){const _0x5f480c=_0x4376f0;if(this[_0x5f480c(0x6c1)]()===_0x5f480c(0x937))return this[_0x5f480c(0xbe3)]();else return this['isSkillItemWindowsMiddle']()?this[_0x5f480c(0x685)]():VisuMZ[_0x5f480c(0x19c)][_0x5f480c(0x282)][_0x5f480c(0x34b)](this);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xbd5)]=function(){const _0x545195=_0x4376f0;return VisuMZ['BattleCore']['Settings'][_0x545195(0x1a6)]['SkillItemMiddleLayout'];},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x685)]=function(){const _0x120c1b=_0x4376f0,_0x352727=Sprite_Button[_0x120c1b(0x705)][_0x120c1b(0x54a)]()*0x2+0x4;let _0x28e464=Graphics[_0x120c1b(0x375)]-_0x352727;Imported[_0x120c1b(0x7ba)]&&SceneManager[_0x120c1b(0xa20)]()&&(_0x28e464+=_0x352727);const _0x3e7106=this[_0x120c1b(0x4f0)](),_0x485d79=Graphics[_0x120c1b(0x21b)]-_0x3e7106-this[_0x120c1b(0x750)]()['height']+Window_BattleStatus[_0x120c1b(0x705)][_0x120c1b(0x80b)](),_0x21972f=0x0;return new Rectangle(_0x21972f,_0x3e7106,_0x28e464,_0x485d79);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x242)]=Scene_Battle['prototype'][_0x4376f0(0xa0f)],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xa0f)]=function(){const _0x28ccb0=_0x4376f0;VisuMZ[_0x28ccb0(0x19c)][_0x28ccb0(0x242)][_0x28ccb0(0x34b)](this),this[_0x28ccb0(0xa9e)]();},VisuMZ[_0x4376f0(0x19c)]['Scene_Battle_startEnemySelection']=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x6a7)],Scene_Battle['prototype'][_0x4376f0(0x6a7)]=function(){const _0x1696e7=_0x4376f0;VisuMZ[_0x1696e7(0x19c)][_0x1696e7(0x543)][_0x1696e7(0x34b)](this),this[_0x1696e7(0x1d8)][_0x1696e7(0x3dd)](),this[_0x1696e7(0xa9e)]();},Scene_Battle['prototype'][_0x4376f0(0xa9e)]=function(){const _0x5c5e17=_0x4376f0,_0x2e6425=this['battleLayoutStyle']();['xp',_0x5c5e17(0xaf9),_0x5c5e17(0x937)][_0x5c5e17(0x3e9)](_0x2e6425)&&this[_0x5c5e17(0x912)][_0x5c5e17(0x836)](),(_0x2e6425===_0x5c5e17(0x937)||this[_0x5c5e17(0xbd5)]())&&(this['_skillWindow'][_0x5c5e17(0x836)](),this[_0x5c5e17(0xb2e)][_0x5c5e17(0x836)]());},VisuMZ[_0x4376f0(0x19c)]['Scene_Battle_onActorOk']=Scene_Battle['prototype'][_0x4376f0(0x861)],Scene_Battle['prototype'][_0x4376f0(0x861)]=function(){const _0xab8aa2=_0x4376f0;VisuMZ[_0xab8aa2(0x19c)][_0xab8aa2(0x70a)][_0xab8aa2(0x34b)](this),this[_0xab8aa2(0x932)]();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x567)]=function(){const _0x5575cd=_0x4376f0;return[_0x5575cd(0x31d),_0x5575cd(0x130),'singleSkill'][_0x5575cd(0x3e9)](this['_actorCommandWindow'][_0x5575cd(0x68b)]());},VisuMZ[_0x4376f0(0x19c)]['Scene_Battle_onActorCancel']=Scene_Battle[_0x4376f0(0x705)]['onActorCancel'],Scene_Battle[_0x4376f0(0x705)]['onActorCancel']=function(){const _0x133aae=_0x4376f0;this[_0x133aae(0x567)]()?(this[_0x133aae(0xad4)]['show'](),this['_actorWindow']['hide'](),this[_0x133aae(0x912)][_0x133aae(0x42e)]()):VisuMZ['BattleCore']['Scene_Battle_onActorCancel']['call'](this),this[_0x133aae(0x9c4)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x21e)]=Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x772)],Scene_Battle[_0x4376f0(0x705)]['onEnemyOk']=function(){const _0x3f7139=_0x4376f0;if(!this[_0x3f7139(0x1d8)]['enemy']()){this[_0x3f7139(0x1d8)][_0x3f7139(0x42e)]();return;}const _0x1a5de4=BattleManager[_0x3f7139(0x8af)]();_0x1a5de4[_0x3f7139(0x370)](this[_0x3f7139(0x1d8)][_0x3f7139(0x9b1)]()),this['_enemyWindow'][_0x3f7139(0x124)](),VisuMZ[_0x3f7139(0x19c)][_0x3f7139(0x21e)]['call'](this),this[_0x3f7139(0x932)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x361)]=Scene_Battle['prototype']['onEnemyCancel'],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xac8)]=function(){const _0x56063c=_0x4376f0;this[_0x56063c(0x567)]()?(this[_0x56063c(0xad4)][_0x56063c(0x330)](),this[_0x56063c(0x1d8)][_0x56063c(0xa38)](),this[_0x56063c(0x912)][_0x56063c(0x42e)]()):VisuMZ[_0x56063c(0x19c)]['Scene_Battle_onEnemyCancel'][_0x56063c(0x34b)](this),this[_0x56063c(0x9c4)](),this[_0x56063c(0x1d8)][_0x56063c(0x124)]();},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x932)]=function(){const _0x5cbd0c=_0x4376f0,_0x4f460c=this['battleLayoutStyle']();(_0x4f460c===_0x5cbd0c(0x937)||this[_0x5cbd0c(0xbd5)]())&&(this[_0x5cbd0c(0x669)][_0x5cbd0c(0x48e)](),this['_skillWindow'][_0x5cbd0c(0xb71)]&&this[_0x5cbd0c(0x669)]['show'](),this[_0x5cbd0c(0xb2e)][_0x5cbd0c(0x48e)](),this[_0x5cbd0c(0xb2e)][_0x5cbd0c(0xb71)]&&this['_itemWindow'][_0x5cbd0c(0x330)]());},Scene_Battle['prototype'][_0x4376f0(0x9c4)]=function(){const _0x11b18e=_0x4376f0,_0x2ef433=this['battleLayoutStyle']();['xp',_0x11b18e(0xaf9),_0x11b18e(0x937)]['includes'](_0x2ef433)&&this[_0x11b18e(0x912)][_0x11b18e(0x48e)](),this[_0x11b18e(0x932)]();},Sprite_Battler[_0x4376f0(0x8c1)]=VisuMZ['BattleCore'][_0x4376f0(0xae8)][_0x4376f0(0x41c)][_0x4376f0(0x49f)],VisuMZ['BattleCore'][_0x4376f0(0x8e5)]=Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x5e8)],Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x5e8)]=function(){const _0x2dcabf=_0x4376f0;VisuMZ[_0x2dcabf(0x19c)][_0x2dcabf(0x8e5)][_0x2dcabf(0x34b)](this),this[_0x2dcabf(0x427)]();if(this['constructor']===Sprite_Enemy)this[_0x2dcabf(0xc06)]();this[_0x2dcabf(0xb83)]();},Sprite_Battler['prototype'][_0x4376f0(0x427)]=function(){const _0xfbc314=_0x4376f0;this['_baseX']=0x0,this[_0xfbc314(0x90f)]=0x0,this['_floatHeight']=0x0,this['_targetFloatHeight']=0x0,this[_0xfbc314(0x477)]=0x0,this['_floatWholeDuration']=0x0,this[_0xfbc314(0xa2f)]=_0xfbc314(0x544),this[_0xfbc314(0x75a)]=0x0,this[_0xfbc314(0xb93)]=0x0,this[_0xfbc314(0x6a8)]=0x0,this[_0xfbc314(0x536)]=0x0,this[_0xfbc314(0x989)]=0xff,this[_0xfbc314(0x3b4)]=0x0,this[_0xfbc314(0x2a5)]=0x0,this[_0xfbc314(0x32b)]='Linear',this[_0xfbc314(0x158)]=0x0,this[_0xfbc314(0x9f5)]=0x0,this[_0xfbc314(0xc03)]=0x0,this[_0xfbc314(0x940)]=0x0,this[_0xfbc314(0x6fb)]=_0xfbc314(0x544),this[_0xfbc314(0x1de)]=!![],this[_0xfbc314(0x8cb)]=0x0,this[_0xfbc314(0x91d)]=0x0,this[_0xfbc314(0x54b)]=0x0,this[_0xfbc314(0x716)]=0x0,this[_0xfbc314(0xae6)]=0x0,this[_0xfbc314(0x831)]=0x0,this[_0xfbc314(0x867)]='Linear',this[_0xfbc314(0x752)]=0x1,this[_0xfbc314(0x550)]=0x1,this[_0xfbc314(0x4da)]=0x1,this[_0xfbc314(0x823)]=0x1,this['_growDuration']=0x0,this[_0xfbc314(0x4c8)]=0x0,this[_0xfbc314(0x4d7)]=_0xfbc314(0x544),this[_0xfbc314(0x2c6)]=0x1,this[_0xfbc314(0x87b)]=0x0,this[_0xfbc314(0x6f7)]=0x0,this['_homeDuration']=0x0,this[_0xfbc314(0x6be)]=0x0,this['_homeEasing']='Linear',this[_0xfbc314(0x3ea)]=0x0,this[_0xfbc314(0x57d)]=0x0;},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xc06)]=function(){const _0x26f1ae=_0x4376f0;this[_0x26f1ae(0xb25)]=new Sprite(),this['_shadowSprite'][_0x26f1ae(0x1e6)]=ImageManager[_0x26f1ae(0xadc)](_0x26f1ae(0xb0b)),this[_0x26f1ae(0xb25)][_0x26f1ae(0x1e6)][_0x26f1ae(0xb0e)]=VisuMZ[_0x26f1ae(0x19c)]['Settings'][_0x26f1ae(0x41c)][_0x26f1ae(0xab4)],this[_0x26f1ae(0xb25)]['anchor']['x']=0.5,this[_0x26f1ae(0xb25)][_0x26f1ae(0x7cf)]['y']=0.5,this[_0x26f1ae(0xb25)]['y']=-0x2,this['_shadowSprite'][_0x26f1ae(0x42f)]=![],this[_0x26f1ae(0x3e4)](this[_0x26f1ae(0xb25)]);},Sprite_Battler[_0x4376f0(0x705)]['createDistortionSprite']=function(){const _0x33c9e1=_0x4376f0;this[_0x33c9e1(0x98c)]=new Sprite(),this[_0x33c9e1(0x98c)][_0x33c9e1(0x7cf)]['x']=0.5,this[_0x33c9e1(0x98c)][_0x33c9e1(0x7cf)]['y']=0.5,this['addChild'](this['_distortionSprite']);},Sprite_Battler[_0x4376f0(0x705)]['_updateColorFilter']=function(){const _0x2bd21c=_0x4376f0;if(this['getDragonbones']&&this[_0x2bd21c(0x11c)]()){Sprite[_0x2bd21c(0x705)]['_updateColorFilter'][_0x2bd21c(0x34b)](this);return;}const _0x1070f3=this[_0x2bd21c(0x98c)];if(!_0x1070f3)return;!_0x1070f3['_colorFilter']&&_0x1070f3['_createColorFilter'](),_0x1070f3[_0x2bd21c(0x824)][_0x2bd21c(0x503)](this[_0x2bd21c(0xbe4)]),_0x1070f3[_0x2bd21c(0x824)]['setBlendColor'](this['_blendColor']),_0x1070f3[_0x2bd21c(0x824)][_0x2bd21c(0x678)](this['_colorTone']);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xbfc)]=function(){const _0x279301=_0x4376f0;if(!this[_0x279301(0x98c)])return;if(this[_0x279301(0xb25)]){const _0xc2097e=this['getChildIndex'](this[_0x279301(0x98c)]);this[_0x279301(0x858)](this[_0x279301(0xb25)],_0xc2097e),this['updateShadowVisibility']();}this['_svBattlerSprite']&&this[_0x279301(0x98c)][_0x279301(0x3e4)](this[_0x279301(0x250)]),this[_0x279301(0x9ae)]&&this[_0x279301(0x98c)]['addChild'](this[_0x279301(0x9ae)]),this[_0x279301(0x662)]&&this[_0x279301(0x98c)]['addChild'](this[_0x279301(0x662)]),this[_0x279301(0xaa3)]&&this[_0x279301(0x98c)][_0x279301(0x3e4)](this['_injectAnimationSprite']),this[_0x279301(0xaee)]&&this['_distortionSprite']['addChild'](this[_0x279301(0xaee)]);},Sprite_Battler[_0x4376f0(0x705)]['updateShadowVisibility']=function(){const _0x2037f0=_0x4376f0;if(!this[_0x2037f0(0xb25)])return;if(this[_0x2037f0(0x39a)]&&this['_battler'][_0x2037f0(0x257)]()){const _0x5c2e39=this[_0x2037f0(0xb25)]['bitmap'];this[_0x2037f0(0xb25)]['setFrame'](0x0,0x0,_0x5c2e39[_0x2037f0(0x895)],_0x5c2e39[_0x2037f0(0x399)]);}else this[_0x2037f0(0xb25)][_0x2037f0(0xa89)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x4376f0(0x705)]['damageContainer']=function(){const _0x48744b=_0x4376f0;return SceneManager[_0x48744b(0x446)]()?SceneManager[_0x48744b(0x982)]['_spriteset'][_0x48744b(0x4b7)]:this[_0x48744b(0x4ec)];},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x301)]=function(_0x4bbb03,_0x4a3518){const _0x2beba7=_0x4376f0;if(!this[_0x2beba7(0x39a)][_0x2beba7(0x272)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x32f9c0=VisuMZ[_0x2beba7(0x19c)]['Settings'][_0x2beba7(0x46a)],_0x2fdbe4=new Sprite_Damage();_0x2fdbe4[_0x2beba7(0xb24)]=_0x32f9c0[_0x2beba7(0x7d2)],this[_0x2beba7(0x430)](_0x2fdbe4),_0x2fdbe4[_0x2beba7(0x301)](_0x4bbb03,_0x4a3518),this[_0x2beba7(0x936)](_0x2fdbe4);},Sprite_Battler[_0x4376f0(0x705)]['setupIconTextPopup']=function(_0x1bf5d0,_0x8e57a5,_0x23465c){const _0x5d5e0e=_0x4376f0;if(!this[_0x5d5e0e(0x39a)][_0x5d5e0e(0x272)]())return;if(BattleManager[_0x5d5e0e(0xb14)]())return;const _0x236681=VisuMZ[_0x5d5e0e(0x19c)][_0x5d5e0e(0xae8)][_0x5d5e0e(0x46a)],_0x3f93ff=new Sprite_Damage();_0x3f93ff[_0x5d5e0e(0xb24)]=_0x236681['PopupDuration'],this['sortDamageSprites'](_0x3f93ff),_0x3f93ff[_0x5d5e0e(0x20c)](_0x1bf5d0,_0x8e57a5,_0x23465c),this[_0x5d5e0e(0x936)](_0x3f93ff);},Sprite_Battler['prototype']['setupDamagePopup']=function(){const _0x4ccc08=_0x4376f0;if(!this[_0x4ccc08(0x39a)][_0x4ccc08(0x988)]())return;while(this[_0x4ccc08(0x39a)][_0x4ccc08(0x988)]()){this[_0x4ccc08(0x39a)]['isSpriteVisible']()&&this['createDamageSprite']();}this[_0x4ccc08(0x39a)][_0x4ccc08(0x13e)](),this[_0x4ccc08(0x39a)][_0x4ccc08(0x6a6)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x957)]=function(){const _0x3f99ca=_0x4376f0;if(BattleManager[_0x3f99ca(0xb14)]())return;const _0x13429d=VisuMZ['BattleCore'][_0x3f99ca(0xae8)][_0x3f99ca(0x46a)],_0x3f165b=new Sprite_Damage();_0x3f165b[_0x3f99ca(0xb24)]=_0x13429d[_0x3f99ca(0x7d2)],this['sortDamageSprites'](_0x3f165b),_0x3f165b[_0x3f99ca(0x578)](this[_0x3f99ca(0x39a)]),_0x3f165b[_0x3f99ca(0x637)](this[_0x3f99ca(0x39a)]),this[_0x3f99ca(0x936)](_0x3f165b);},Sprite_Battler['prototype'][_0x4376f0(0x936)]=function(_0x33ee32){const _0x58aa3e=_0x4376f0;this[_0x58aa3e(0x4c3)][_0x58aa3e(0x6b0)](_0x33ee32);if(this['isShownOnBattlePortrait']()){const _0x2ea657=SceneManager[_0x58aa3e(0x982)][_0x58aa3e(0xad4)];if(_0x2ea657)_0x2ea657[_0x58aa3e(0x936)](_0x33ee32,this[_0x58aa3e(0x39a)]);}else{this[_0x58aa3e(0x25b)]()[_0x58aa3e(0x3e4)](_0x33ee32);if(SceneManager[_0x58aa3e(0x20d)]())_0x33ee32[_0x58aa3e(0xc02)]['x']=-0x1;}},Sprite_Battler[_0x4376f0(0x705)]['isShownOnBattlePortrait']=function(){const _0x7ca3d=_0x4376f0;return!$gameSystem['isSideView']()&&this[_0x7ca3d(0x39a)]&&this[_0x7ca3d(0x39a)]['isActor']();return!$gameSystem[_0x7ca3d(0x245)]()&&this[_0x7ca3d(0x39a)]&&this[_0x7ca3d(0x39a)][_0x7ca3d(0xb9d)]()&&Window_BattleStatus[_0x7ca3d(0x705)][_0x7ca3d(0x6c1)]()===_0x7ca3d(0xaf9);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x430)]=function(_0x1cfa9d){const _0x55d45b=_0x4376f0;this[_0x55d45b(0xbea)](_0x1cfa9d,!![]);const _0x27166b=VisuMZ[_0x55d45b(0x19c)][_0x55d45b(0xae8)][_0x55d45b(0x46a)],_0x475229=SceneManager[_0x55d45b(0x20d)]()?-0x1:0x1;if(_0x27166b[_0x55d45b(0x4ff)])for(const _0xf16564 of this[_0x55d45b(0x4c3)]){_0xf16564['x']+=_0x27166b[_0x55d45b(0x996)]*_0x475229,_0xf16564['y']+=_0x27166b[_0x55d45b(0x33d)];}else{const _0x113489=this[_0x55d45b(0x4c3)][this[_0x55d45b(0x4c3)][_0x55d45b(0xa3a)]-0x1];_0x113489&&(_0x1cfa9d['x']=_0x113489['x']+_0x27166b[_0x55d45b(0x996)]*_0x475229,_0x1cfa9d['y']=_0x113489['y']+_0x27166b['PopupShiftY']);}},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xbea)]=function(_0x31b19b,_0x13f14e){const _0x3eee0d=_0x4376f0,_0x547822=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0xcc062f=this[_0x3eee0d(0x4f3)];_0xcc062f+=this['extraPositionX']();let _0x49672c=this[_0x3eee0d(0x90f)];const _0x2b566b=this[_0x3eee0d(0x98c)][_0x3eee0d(0xc02)]['y'];_0x49672c+=this[_0x3eee0d(0x3be)]();const _0x4441a2=SceneManager['_scene']['_statusWindow'];if(_0x4441a2&&this['parent']===_0x4441a2){_0xcc062f+=_0x4441a2['x']-this[_0x3eee0d(0xb1e)]();const _0x1a033e=_0x4441a2['lineHeight']()*0x3/0x4;_0x49672c=_0x4441a2['y']+_0x1a033e,_0x49672c=Math[_0x3eee0d(0x136)](_0x49672c,_0x4441a2['y']+this['y']-this[_0x3eee0d(0x399)]+_0x1a033e);}_0x31b19b['x']=Math[_0x3eee0d(0x1c6)](_0xcc062f+this[_0x3eee0d(0xb1e)]()*_0x547822),_0x31b19b['y']=Math[_0x3eee0d(0x1c6)](_0x49672c+this['damageOffsetY']());},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xb65)]=Sprite_Battler['prototype'][_0x4376f0(0xb1e)],Sprite_Battler['prototype'][_0x4376f0(0xb1e)]=function(){const _0x20d26b=_0x4376f0;let _0x51c930=VisuMZ[_0x20d26b(0x19c)][_0x20d26b(0xb65)][_0x20d26b(0x34b)](this),_0x452b45=VisuMZ[_0x20d26b(0x19c)][_0x20d26b(0xae8)]['Damage'][_0x20d26b(0x2f8)]||0x0;return _0x452b45+=this['_battler'][_0x20d26b(0x7de)](),Math[_0x20d26b(0x1c6)](_0x51c930+_0x452b45);},VisuMZ['BattleCore'][_0x4376f0(0x592)]=Sprite_Battler[_0x4376f0(0x705)]['damageOffsetY'],Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x56c)]=function(){const _0x2b559e=_0x4376f0;let _0x29d1e3=VisuMZ[_0x2b559e(0x19c)]['Sprite_Battler_damageOffsetY'][_0x2b559e(0x34b)](this);switch(this['_battler'][_0x2b559e(0xbe7)]()){case _0x2b559e(0x73e):_0x29d1e3-=this[_0x2b559e(0x399)]*this[_0x2b559e(0xc02)]['y'];break;case _0x2b559e(0xbe8):_0x29d1e3-=this['height']*this[_0x2b559e(0xc02)]['y']*0.5;break;}let _0x455a2e=VisuMZ[_0x2b559e(0x19c)]['Settings']['Damage'][_0x2b559e(0x1dc)]||0x0;return _0x455a2e+=this[_0x2b559e(0x39a)][_0x2b559e(0x530)](),Math['round'](_0x29d1e3+_0x455a2e);},Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0xb1e)]=function(){const _0x3dae74=_0x4376f0;return Sprite_Battler[_0x3dae74(0x705)][_0x3dae74(0xb1e)]['call'](this);},Sprite_Actor['prototype'][_0x4376f0(0x56c)]=function(){const _0x323f73=_0x4376f0;return Sprite_Battler[_0x323f73(0x705)][_0x323f73(0x56c)][_0x323f73(0x34b)](this);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x7f4)]=function(_0x2b0dd2){const _0xd3551e=_0x4376f0;this[_0xd3551e(0x3ee)]()?SceneManager[_0xd3551e(0x982)][_0xd3551e(0xad4)][_0xd3551e(0x588)](_0x2b0dd2):(this[_0xd3551e(0x25b)]()[_0xd3551e(0x9e3)](_0x2b0dd2),this[_0xd3551e(0x4c3)][_0xd3551e(0x246)](_0x2b0dd2),_0x2b0dd2[_0xd3551e(0x450)]());},VisuMZ['BattleCore'][_0x4376f0(0xc46)]=Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x3c5)],Sprite_Battler[_0x4376f0(0x705)]['setHome']=function(_0x4bf586,_0x155477){const _0x11d99b=_0x4376f0,_0x15cc31=VisuMZ[_0x11d99b(0x19c)]['Settings'];if(this[_0x11d99b(0xa32)]===Sprite_Actor)_0x4bf586+=_0x15cc31[_0x11d99b(0x41c)][_0x11d99b(0x1d2)]||0x0,_0x155477+=_0x15cc31[_0x11d99b(0x41c)][_0x11d99b(0x692)]||0x0;else this[_0x11d99b(0xa32)]===Sprite_Enemy&&(_0x4bf586+=_0x15cc31[_0x11d99b(0x653)][_0x11d99b(0x1d2)]||0x0,_0x155477+=_0x15cc31[_0x11d99b(0x653)][_0x11d99b(0x692)]||0x0);this['_battler']&&(_0x4bf586=this[_0x11d99b(0x39a)][_0x11d99b(0x131)]??_0x4bf586,_0x155477=this[_0x11d99b(0x39a)]['_forcedHomeY']??_0x155477),VisuMZ['BattleCore'][_0x11d99b(0xc46)][_0x11d99b(0x34b)](this,_0x4bf586,_0x155477),this[_0x11d99b(0x87b)]=this[_0x11d99b(0x6e9)],this[_0x11d99b(0x6f7)]=this[_0x11d99b(0x62b)],this['_homeDuration']=0x0,this[_0x11d99b(0x6be)]=0x0,this[_0x11d99b(0x30e)]=_0x11d99b(0x544);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x3d2)]=Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x75b)],Sprite_Battler[_0x4376f0(0x705)]['update']=function(){const _0x8a5b1b=_0x4376f0;VisuMZ[_0x8a5b1b(0x19c)]['Sprite_Battler_update'][_0x8a5b1b(0x34b)](this),!this['_battler']&&this['_hpGaugeSprite']&&(this[_0x8a5b1b(0x3f3)][_0x8a5b1b(0x42f)]=![]);},VisuMZ['BattleCore'][_0x4376f0(0x365)]=Sprite_Battler[_0x4376f0(0x705)]['updateMain'],Sprite_Battler[_0x4376f0(0x705)]['updateMain']=function(){const _0xce3584=_0x4376f0;this[_0xce3584(0x6dd)](),this[_0xce3584(0x5bc)](),this[_0xce3584(0x258)](),this[_0xce3584(0x691)](),VisuMZ['BattleCore']['Sprite_Battler_updateMain']['call'](this),this[_0xce3584(0x7ab)](),this[_0xce3584(0x9f0)]();if(this[_0xce3584(0xa32)]===Sprite_Enemy)this[_0xce3584(0x6bb)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x2e5)]=Sprite_Battler['prototype'][_0x4376f0(0x68f)],Sprite_Battler[_0x4376f0(0x705)]['updatePosition']=function(){const _0x1a6a9f=_0x4376f0;this[_0x1a6a9f(0x3bf)](),VisuMZ[_0x1a6a9f(0x19c)][_0x1a6a9f(0x2e5)][_0x1a6a9f(0x34b)](this),this[_0x1a6a9f(0x44e)](),this[_0x1a6a9f(0xc47)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x3d5)]=function(){const _0x52d231=_0x4376f0,_0xa015d3=this['mainSprite']();if(this[_0x52d231(0x39a)][_0x52d231(0x90c)]())this[_0x52d231(0x88f)]++,Graphics[_0x52d231(0xa44)]%0x1e<0xf?_0xa015d3['setBlendColor']([0xff,0xff,0xff,0x40]):_0xa015d3[_0x52d231(0x8fa)]([0x0,0x0,0x0,0x0]);else this[_0x52d231(0x88f)]>0x0&&(this['_selectionEffectCount']=0x0,_0xa015d3['setBlendColor']([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xbe2)]=function(_0x3ed116,_0x43baab){const _0x4847ae=_0x4376f0,_0x3340d1=VisuMZ[_0x4847ae(0x19c)][_0x4847ae(0xae8)];if(this[_0x4847ae(0xa32)]===Sprite_Actor)_0x3ed116+=_0x3340d1['Actor'][_0x4847ae(0x1d2)]||0x0,_0x43baab+=_0x3340d1[_0x4847ae(0x41c)][_0x4847ae(0x692)]||0x0;else this[_0x4847ae(0xa32)]===Sprite_Enemy&&(_0x3ed116+=_0x3340d1[_0x4847ae(0x653)][_0x4847ae(0x1d2)]||0x0,_0x43baab+=_0x3340d1[_0x4847ae(0x653)][_0x4847ae(0x692)]||0x0);const _0x527b43=_0x3ed116-this[_0x4847ae(0x6e9)],_0x46a3f6=_0x43baab-this['_homeY'];this[_0x4847ae(0x6e9)]=_0x3ed116,this['_homeY']=_0x43baab,this[_0x4847ae(0x48a)]-=_0x527b43,this['_offsetY']-=_0x46a3f6,this[_0x4847ae(0x2a9)]-=_0x527b43,this[_0x4847ae(0x5a0)]-=_0x46a3f6,this[_0x4847ae(0x68f)]();},Sprite_Battler['prototype'][_0x4376f0(0x781)]=function(_0x2d7e08,_0x343446,_0x39c3ca,_0x5be77e){const _0x9f63b4=_0x4376f0,_0xa3d8bc=VisuMZ[_0x9f63b4(0x19c)]['Settings'];if(this[_0x9f63b4(0xa32)]===Sprite_Actor)_0x2d7e08+=_0xa3d8bc[_0x9f63b4(0x41c)][_0x9f63b4(0x1d2)]||0x0,_0x343446+=_0xa3d8bc[_0x9f63b4(0x41c)][_0x9f63b4(0x692)]||0x0;else this[_0x9f63b4(0xa32)]===Sprite_Enemy&&(_0x2d7e08+=_0xa3d8bc['Enemy'][_0x9f63b4(0x1d2)]||0x0,_0x343446+=_0xa3d8bc['Enemy'][_0x9f63b4(0x692)]||0x0);(this['_targetHomeX']!==_0x2d7e08||this['_targetHomeY']!==_0x343446)&&(this[_0x9f63b4(0x87b)]=_0x2d7e08,this[_0x9f63b4(0x6f7)]=_0x343446,this['_homeDuration']=_0x39c3ca,this[_0x9f63b4(0x6be)]=_0x39c3ca,this['_homeEasing']=_0x5be77e,_0x39c3ca<=0x0&&this[_0x9f63b4(0xbf8)]());},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x3bf)]=function(){const _0x452a40=_0x4376f0;if(this[_0x452a40(0x4b4)]<=0x0)return;const _0x4a60b5=this[_0x452a40(0x4b4)],_0x485569=this[_0x452a40(0x6be)],_0x35dec6=this['_homeEasing'];Imported['VisuMZ_0_CoreEngine']?(this[_0x452a40(0x6e9)]=this[_0x452a40(0x191)](this[_0x452a40(0x6e9)],this[_0x452a40(0x87b)],_0x4a60b5,_0x485569,_0x35dec6),this[_0x452a40(0x62b)]=this[_0x452a40(0x191)](this[_0x452a40(0x62b)],this[_0x452a40(0x6f7)],_0x4a60b5,_0x485569,_0x35dec6)):(this['_homeX']=(this[_0x452a40(0x6e9)]*(_0x4a60b5-0x1)+this[_0x452a40(0x87b)])/_0x4a60b5,this[_0x452a40(0x62b)]=(this[_0x452a40(0x62b)]*(_0x4a60b5-0x1)+this[_0x452a40(0x6f7)])/_0x4a60b5);this[_0x452a40(0x4b4)]--;if(this[_0x452a40(0x4b4)]<=0x0)this[_0x452a40(0xbf8)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xbf8)]=function(){const _0x33da1f=_0x4376f0;this['_homeX']=this['_targetHomeX'],this['_homeY']=this[_0x33da1f(0x6f7)];},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x44e)]=function(){const _0x4ce83c=_0x4376f0;this[_0x4ce83c(0x4f3)]=this['x'],this[_0x4ce83c(0x90f)]=this['y'],this[_0x4ce83c(0xa2b)](),this[_0x4ce83c(0x1ad)](),this['x']+=this[_0x4ce83c(0x4b1)](),this['y']+=this[_0x4ce83c(0x3be)](),this['y']+=this['extraPositionScaledY'](),this['x']=Math[_0x4ce83c(0x627)](this['x']),this['y']=Math[_0x4ce83c(0x627)](this['y']);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x4b1)]=function(){let _0xdd38fd=0x0;return _0xdd38fd;},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x3be)]=function(){const _0x58444c=_0x4376f0;let _0x570038=0x0;return this[_0x58444c(0x39a)]&&!this[_0x58444c(0x39a)][_0x58444c(0x761)]()&&(_0x570038-=this[_0x58444c(0x9ed)],_0x570038-=this[_0x58444c(0x75a)]),_0x570038;},Sprite_Battler['prototype'][_0x4376f0(0x80d)]=function(){const _0xc0a624=_0x4376f0;let _0x125a55=0x0;if(this['_distortionSprite']&&this[_0xc0a624(0xa32)]!==Sprite_SvEnemy){const _0x314838=this[_0xc0a624(0x98c)][_0xc0a624(0xc02)]['y'];_0x125a55-=(_0x314838-0x1)*this[_0xc0a624(0x399)];}return _0x125a55;},Sprite_Battler[_0x4376f0(0x705)]['updateFlip']=function(){const _0x558f53=_0x4376f0,_0x44a249=this['_battler']&&this['_battler']['isBattlerFlipped']();this[_0x558f53(0x2c6)]=(_0x44a249?-0x1:0x1)*Math[_0x558f53(0x54d)](this[_0x558f53(0xc02)]['x']);},Sprite_Battler['prototype'][_0x4376f0(0x516)]=function(_0x42b68e,_0x20a8fb,_0x157c3a){const _0x5358d8=_0x4376f0;if(!this[_0x5358d8(0x687)]())return;if(this[_0x5358d8(0xa16)]===_0x42b68e)return;this[_0x5358d8(0xa16)]=_0x42b68e,this['_floatDuration']=_0x20a8fb,this['_floatWholeDuration']=_0x20a8fb,this['_floatEasing']=_0x157c3a||_0x5358d8(0x544);if(_0x20a8fb<=0x0)this[_0x5358d8(0x9ed)]=_0x42b68e;},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xa2b)]=function(){const _0x220964=_0x4376f0;if(this[_0x220964(0x477)]<=0x0)return;const _0x4e36cf=this[_0x220964(0x477)],_0x3bea6d=this[_0x220964(0x6de)],_0x4caa8a=this[_0x220964(0xa2f)];Imported[_0x220964(0x7ba)]?this[_0x220964(0x9ed)]=this[_0x220964(0x191)](this[_0x220964(0x9ed)],this[_0x220964(0xa16)],_0x4e36cf,_0x3bea6d,_0x4caa8a):this[_0x220964(0x9ed)]=(this['_floatHeight']*(_0x4e36cf-0x1)+this['_targetFloatHeight'])/_0x4e36cf;this[_0x220964(0x477)]--;if(this[_0x220964(0x477)]<=0x0)this[_0x220964(0x7af)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x7af)]=function(){const _0x5033c2=_0x4376f0;this['_floatHeight']=this[_0x5033c2(0xa16)];},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x4e0)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x568)]=function(_0x14a940,_0x2707f2){const _0x2ef0fa=_0x4376f0;if(!this['canMove']())return;if(_0x2707f2<=0x0)return;this[_0x2ef0fa(0xb93)]=_0x14a940,this[_0x2ef0fa(0x6a8)]=_0x2707f2,this[_0x2ef0fa(0x536)]=_0x2707f2;},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x1ad)]=function(){const _0x5a6b20=_0x4376f0;if(this['_jumpDuration']<=0x0)return;const _0x5f17fa=this['_jumpWholeDuration']-this['_jumpDuration'],_0x1adbb7=this['_jumpWholeDuration']/0x2,_0x398776=this[_0x5a6b20(0xb93)],_0x17ea32=-_0x398776/Math[_0x5a6b20(0xbba)](_0x1adbb7,0x2);this['_jumpHeight']=_0x17ea32*Math[_0x5a6b20(0xbba)](_0x5f17fa-_0x1adbb7,0x2)+_0x398776,this[_0x5a6b20(0x6a8)]--;if(this[_0x5a6b20(0x6a8)]<=0x0)return this[_0x5a6b20(0xc3d)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xc3d)]=function(){const _0x56e95b=_0x4376f0;this[_0x56e95b(0x75a)]=0x0;},Sprite_Battler[_0x4376f0(0x705)]['isJumping']=function(){return this['_jumpDuration']>0x0;},Sprite_Battler[_0x4376f0(0x705)]['startOpacity']=function(_0x6b96b0,_0x540cbe,_0x321c36){const _0x23798d=_0x4376f0;if(this[_0x23798d(0x989)]===_0x6b96b0)return;this[_0x23798d(0x989)]=_0x6b96b0,this[_0x23798d(0x3b4)]=_0x540cbe,this[_0x23798d(0x2a5)]=_0x540cbe,this[_0x23798d(0x32b)]=_0x321c36||_0x23798d(0x544);if(_0x540cbe<=0x0)this[_0x23798d(0x945)]=_0x6b96b0;},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xc47)]=function(){const _0x6e8e11=_0x4376f0;if(this[_0x6e8e11(0xa32)][_0x6e8e11(0x7d3)]===_0x6e8e11(0x9b5))return;if(this[_0x6e8e11(0x3b4)]<=0x0)return;const _0x230988=this[_0x6e8e11(0x3b4)],_0x1eb60c=this[_0x6e8e11(0x2a5)],_0x59f391=this[_0x6e8e11(0x32b)];Imported[_0x6e8e11(0x7ba)]?this['opacity']=this[_0x6e8e11(0x191)](this['opacity'],this[_0x6e8e11(0x989)],_0x230988,_0x1eb60c,_0x59f391):this['opacity']=(this[_0x6e8e11(0x945)]*(_0x230988-0x1)+this['_targetOpacity'])/_0x230988;this[_0x6e8e11(0x3b4)]--;if(this['_opacityDuration']<=0x0)this[_0x6e8e11(0xb08)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xb08)]=function(){const _0xa95707=_0x4376f0;this[_0xa95707(0x945)]=this[_0xa95707(0x989)];},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x806)]=function(){const _0x2977c9=_0x4376f0;return this[_0x2977c9(0x3b4)]>0x0;},Sprite_Battler['prototype'][_0x4376f0(0x6bb)]=function(){const _0x5622f5=_0x4376f0;this[_0x5622f5(0xb25)][_0x5622f5(0x42f)]=this['_battler']['hasSvBattler'](),this[_0x5622f5(0x7e5)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x7e5)]=function(){const _0x3dce74=_0x4376f0;if(!this[_0x3dce74(0xb25)])return;this[_0x3dce74(0xb25)]['y']=this[_0x3dce74(0x90f)]-this['y']-0x2;},Sprite_Battler[_0x4376f0(0x705)]['updateShadowScale']=function(){const _0x129465=_0x4376f0;if(!this[_0x129465(0x39a)])return;this[_0x129465(0x25a)]=this[_0x129465(0x39a)][_0x129465(0x1cd)](),this['_shadowScaleY']=this[_0x129465(0x39a)][_0x129465(0x4d6)]();},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x1cd)]=function(){const _0x514d9b=_0x4376f0,_0x1c5a5e=this[_0x514d9b(0xb9d)]()?this[_0x514d9b(0x965)]():this[_0x514d9b(0x9b1)]();if(_0x1c5a5e){const _0x1d5176=_0x1c5a5e[_0x514d9b(0x54f)];if(_0x1d5176['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x1d5176[_0x514d9b(0x844)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x4376f0(0x705)][_0x4376f0(0x4d6)]=function(){const _0x2a744e=_0x4376f0,_0x537717=this['isActor']()?this[_0x2a744e(0x965)]():this[_0x2a744e(0x9b1)]();if(_0x537717){const _0xd802f0=_0x537717[_0x2a744e(0x54f)];if(_0xd802f0['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0xd802f0[_0x2a744e(0x844)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x4376f0(0x705)]['updateScale']=function(){const _0x2e4def=_0x4376f0;if(this[_0x2e4def(0xa32)]===Sprite_SvEnemy)return;this[_0x2e4def(0x674)](),this[_0x2e4def(0x4d5)]();},Sprite_Battler['prototype'][_0x4376f0(0x4d5)]=function(){const _0x5add81=_0x4376f0,_0x6d0f05=this['_distortionSprite'];_0x6d0f05&&(_0x6d0f05[_0x5add81(0xc02)]['x']=this[_0x5add81(0xa5d)](),_0x6d0f05['scale']['y']=this[_0x5add81(0x97a)]());},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xa5d)]=function(){const _0x7179ac=_0x4376f0;let _0x5e8e12=0x1;return _0x5e8e12*=this[_0x7179ac(0x2c6)],_0x5e8e12*=this[_0x7179ac(0x752)],_0x5e8e12;},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x97a)]=function(){const _0x537269=_0x4376f0;let _0x129aac=0x1;return _0x129aac*=this[_0x537269(0x550)],_0x129aac;},Sprite_Battler[_0x4376f0(0x705)]['mainSpriteWidth']=function(){const _0x5e5ae2=_0x4376f0;return this['width']*this[_0x5e5ae2(0xa5d)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x832)]=function(){const _0x5441c7=_0x4376f0;return this[_0x5441c7(0x399)]*this[_0x5441c7(0x97a)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x56a)]=function(_0x48abdb,_0x6d8d07,_0x19a979,_0x33ea2f){const _0x1e5354=_0x4376f0;if(!this[_0x1e5354(0x687)]())return;if(!this[_0x1e5354(0x98c)])return;if(this[_0x1e5354(0x4da)]===_0x48abdb&&this[_0x1e5354(0x823)]===_0x6d8d07)return;this[_0x1e5354(0x4da)]=_0x48abdb,this['_targetGrowY']=_0x6d8d07,this[_0x1e5354(0x22e)]=_0x19a979,this['_growWholeDuration']=_0x19a979,this[_0x1e5354(0x4d7)]=_0x33ea2f||_0x1e5354(0x544),_0x19a979<=0x0&&(this[_0x1e5354(0x752)]=this['_targetGrowX'],this[_0x1e5354(0x550)]=this[_0x1e5354(0x823)]);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x674)]=function(){const _0x73af94=_0x4376f0;if(this[_0x73af94(0x22e)]<=0x0)return;if(!this[_0x73af94(0x98c)])return;const _0x38752c=this['_growDuration'],_0x494f50=this[_0x73af94(0x4c8)],_0x58911b=this['_growEasing'];Imported[_0x73af94(0x7ba)]?(this[_0x73af94(0x752)]=this['applyEasing'](this[_0x73af94(0x752)],this[_0x73af94(0x4da)],_0x38752c,_0x494f50,_0x58911b),this['_growY']=this[_0x73af94(0x191)](this[_0x73af94(0x550)],this[_0x73af94(0x823)],_0x38752c,_0x494f50,_0x58911b)):(this['_growX']=(this[_0x73af94(0x752)]*(_0x38752c-0x1)+this[_0x73af94(0x4da)])/_0x38752c,this[_0x73af94(0x550)]=(this[_0x73af94(0x550)]*(_0x38752c-0x1)+this[_0x73af94(0x823)])/_0x38752c);this[_0x73af94(0x22e)]--;if(this[_0x73af94(0x22e)]<=0x0)this[_0x73af94(0xa41)]();},Sprite_Battler[_0x4376f0(0x705)]['onGrowEnd']=function(){const _0x1cb94e=_0x4376f0;this[_0x1cb94e(0x752)]=this[_0x1cb94e(0x4da)],this[_0x1cb94e(0x550)]=this[_0x1cb94e(0x823)];},Sprite_Battler[_0x4376f0(0x705)]['isGrowing']=function(){const _0x273623=_0x4376f0;return this[_0x273623(0x22e)]>0x0;},Sprite_Battler['prototype']['startSkew']=function(_0x4c93b3,_0x1f0a6d,_0x136997,_0x20b379){const _0x3243ca=_0x4376f0;if(!this[_0x3243ca(0x687)]())return;if(!this[_0x3243ca(0x98c)])return;if(this['_targetSkewX']===_0x4c93b3&&this['_targetSkewY']===_0x1f0a6d)return;this[_0x3243ca(0x54b)]=_0x4c93b3,this[_0x3243ca(0x716)]=_0x1f0a6d,this[_0x3243ca(0xae6)]=_0x136997,this[_0x3243ca(0x831)]=_0x136997,this[_0x3243ca(0x867)]=_0x20b379||_0x3243ca(0x544),_0x136997<=0x0&&(this[_0x3243ca(0x98c)][_0x3243ca(0x608)]['x']=this['_targetSkewX'],this['_distortionSprite'][_0x3243ca(0x608)]['y']=this[_0x3243ca(0x716)]);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x5bc)]=function(){const _0x88919c=_0x4376f0;if(this[_0x88919c(0xae6)]<=0x0)return;if(!this[_0x88919c(0x98c)])return;const _0x3b5469=this[_0x88919c(0xae6)],_0x9f940d=this[_0x88919c(0x831)],_0x5605d7=this[_0x88919c(0x867)],_0x4f8ef2=this['_distortionSprite'];Imported['VisuMZ_0_CoreEngine']?(_0x4f8ef2[_0x88919c(0x608)]['x']=this[_0x88919c(0x191)](_0x4f8ef2[_0x88919c(0x608)]['x'],this['_targetSkewX'],_0x3b5469,_0x9f940d,_0x5605d7),_0x4f8ef2[_0x88919c(0x608)]['y']=this['applyEasing'](_0x4f8ef2[_0x88919c(0x608)]['y'],this[_0x88919c(0x716)],_0x3b5469,_0x9f940d,_0x5605d7)):(_0x4f8ef2[_0x88919c(0x608)]['x']=(_0x4f8ef2['skew']['x']*(_0x3b5469-0x1)+this['_targetSkewX'])/_0x3b5469,_0x4f8ef2[_0x88919c(0x608)]['y']=(_0x4f8ef2[_0x88919c(0x608)]['y']*(_0x3b5469-0x1)+this['_targetSkewY'])/_0x3b5469);this[_0x88919c(0xae6)]--;if(this[_0x88919c(0xae6)]<=0x0)this[_0x88919c(0xb8a)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xb8a)]=function(){const _0x5d9499=_0x4376f0;this[_0x5d9499(0x98c)][_0x5d9499(0x608)]['x']=this[_0x5d9499(0x54b)],this[_0x5d9499(0x98c)]['skew']['y']=this[_0x5d9499(0x716)];},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x500)]=function(){const _0xfc30dc=_0x4376f0;return this[_0xfc30dc(0xae6)]>0x0;},Sprite_Battler[_0x4376f0(0x705)]['startSpin']=function(_0x5c33d0,_0xbf2ace,_0x429f7a,_0x15a2d5){const _0x5a7b53=_0x4376f0;if(!this[_0x5a7b53(0x687)]())return;if(!this[_0x5a7b53(0x98c)])return;if(this[_0x5a7b53(0x9f5)]===_0x5c33d0)return;this[_0x5a7b53(0x9f5)]=_0x5c33d0,this['_angleDuration']=_0xbf2ace,this[_0x5a7b53(0x940)]=_0xbf2ace,this['_angleEasing']=_0x429f7a||_0x5a7b53(0x544),this['_angleRevertOnFinish']=_0x15a2d5,this[_0x5a7b53(0x1de)]===undefined&&(this[_0x5a7b53(0x1de)]=!![]),_0xbf2ace<=0x0&&(this['_currentAngle']=_0x5c33d0,this['_angleRevertOnFinish']&&(this[_0x5a7b53(0x9f5)]=0x0,this[_0x5a7b53(0x158)]=0x0));},Sprite_Battler[_0x4376f0(0x705)]['updateSpin']=function(){this['updateAngleCalculations'](),this['applyAngleChange']();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x451)]=function(){const _0x59db2f=_0x4376f0;if(this[_0x59db2f(0xc03)]<=0x0)return;const _0x6d563a=this['_angleDuration'],_0x4ecd83=this[_0x59db2f(0x940)],_0x5d0b7c=this[_0x59db2f(0x6fb)];Imported[_0x59db2f(0x7ba)]?this[_0x59db2f(0x158)]=this[_0x59db2f(0x191)](this[_0x59db2f(0x158)],this['_targetAngle'],_0x6d563a,_0x4ecd83,_0x5d0b7c):this[_0x59db2f(0x158)]=(this[_0x59db2f(0x158)]*(_0x6d563a-0x1)+this[_0x59db2f(0x9f5)])/_0x6d563a;this[_0x59db2f(0xc03)]--;if(this[_0x59db2f(0xc03)]<=0x0)this[_0x59db2f(0xbd7)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xbd7)]=function(){const _0x34c376=_0x4376f0;this[_0x34c376(0x158)]=this[_0x34c376(0x9f5)],this[_0x34c376(0x1de)]&&(this[_0x34c376(0x9f5)]=0x0,this['_currentAngle']=0x0);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x489)]=function(){const _0x14b1e2=_0x4376f0;return this[_0x14b1e2(0xc03)]>0x0;},Sprite_Battler['prototype'][_0x4376f0(0x14c)]=function(){const _0x550ad6=_0x4376f0;if(!this[_0x550ad6(0x98c)])return;const _0x4664f8=this['_currentAngle'],_0x338714=this[_0x550ad6(0xc02)]['x'],_0x14dc95=this['_battler'][_0x550ad6(0xb9d)]()?-0x1:0x1;this['_distortionSprite']['angle']=_0x4664f8*_0x338714*_0x14dc95;const _0x2a24b7=this[_0x550ad6(0x98c)][_0x550ad6(0xc02)]['y'];this['_distortionSprite']['y']=this['height']*-0.5*(0x2-_0x2a24b7),this['_distortionSprite']['y']=Math[_0x550ad6(0x554)](this[_0x550ad6(0x98c)]['y']);const _0x26c05a=[this[_0x550ad6(0x662)],this[_0x550ad6(0x250)],this[_0x550ad6(0xaee)]];for(const _0x2ced62 of _0x26c05a){if(!_0x2ced62)continue;_0x2ced62['y']=this[_0x550ad6(0x399)]*0.5;}this[_0x550ad6(0xb25)]&&(this[_0x550ad6(0x25a)]=this[_0x550ad6(0x25a)]??0x1,this[_0x550ad6(0x133)]=this[_0x550ad6(0x133)]??0x1,this['_shadowSprite'][_0x550ad6(0xc02)]['x']=this[_0x550ad6(0x98c)][_0x550ad6(0xc02)]['x']*this[_0x550ad6(0x25a)],this[_0x550ad6(0xb25)][_0x550ad6(0xc02)]['y']=this[_0x550ad6(0x98c)][_0x550ad6(0xc02)]['y']*this['_shadowScaleY']);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xbf4)]=Sprite_Actor[_0x4376f0(0x705)]['createStateSprite'],Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x5e1)]=function(){const _0x4f3a84=_0x4376f0;VisuMZ[_0x4f3a84(0x19c)][_0x4f3a84(0xbf4)]['call'](this),VisuMZ[_0x4f3a84(0x19c)][_0x4f3a84(0xae8)][_0x4f3a84(0x522)]['ShowActorGauge']&&this[_0x4f3a84(0x96c)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x528)]=Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x551)],Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x551)]=function(){const _0x5f0ecd=_0x4376f0;VisuMZ[_0x5f0ecd(0x19c)][_0x5f0ecd(0xae8)][_0x5f0ecd(0x522)][_0x5f0ecd(0xc25)]&&this[_0x5f0ecd(0x96c)](),VisuMZ[_0x5f0ecd(0x19c)][_0x5f0ecd(0x528)][_0x5f0ecd(0x34b)](this);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x96c)]=function(){const _0xb4ef3c=_0x4376f0;if(!ConfigManager[_0xb4ef3c(0x259)])return;if(this[_0xb4ef3c(0xa32)]===Sprite_SvEnemy)return;const _0x509088=VisuMZ[_0xb4ef3c(0x19c)]['Settings']['HpGauge'],_0x4d512b=new Sprite_HpGauge();_0x4d512b['anchor']['x']=_0x509088['AnchorX'],_0x4d512b[_0xb4ef3c(0x7cf)]['y']=_0x509088[_0xb4ef3c(0x524)],_0x4d512b[_0xb4ef3c(0xc02)]['x']=_0x4d512b[_0xb4ef3c(0xc02)]['y']=_0x509088[_0xb4ef3c(0x7d9)],this[_0xb4ef3c(0x3f3)]=_0x4d512b,this[_0xb4ef3c(0x3e4)](this[_0xb4ef3c(0x3f3)]),Spriteset_Battle['ANTI_TINT_UI']&&BattleManager['addChildToUiContainer'](this[_0xb4ef3c(0x3f3)]);},VisuMZ['BattleCore'][_0x4376f0(0x6c8)]=Sprite_Battler['prototype']['setBattler'],Sprite_Battler[_0x4376f0(0x705)]['setBattler']=function(_0x3f37ff){const _0x457ee7=_0x4376f0,_0x369f7a=this['_battler'];VisuMZ[_0x457ee7(0x19c)][_0x457ee7(0x6c8)][_0x457ee7(0x34b)](this,_0x3f37ff),this[_0x457ee7(0xabe)](_0x3f37ff);if(_0x369f7a!==_0x3f37ff)this['updateShadowScale']();},Sprite_Battler[_0x4376f0(0x705)]['setupHpGaugeSprite']=function(_0x3b3938){const _0x1dda6f=_0x4376f0;if(!_0x3b3938)return;if(!this['_hpGaugeSprite'])return;if(_0x3b3938[_0x1dda6f(0xb9d)]()){}else{if(_0x3b3938[_0x1dda6f(0x7b4)]()){if(this[_0x1dda6f(0xa32)]===Sprite_SvEnemy&&!_0x3b3938['hasSvBattler']())return;}}this[_0x1dda6f(0x3f3)][_0x1dda6f(0x578)](_0x3b3938,'hp');},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x7e1)]=function(){const _0x4d18fe=_0x4376f0;return this['_battler']&&this[_0x4d18fe(0x39a)][_0x4d18fe(0x7e1)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x295)]=function(){const _0x2c2d00=_0x4376f0,_0x8458c4=this[_0x2c2d00(0x662)][_0x2c2d00(0x1e6)];if(!_0x8458c4)return;const _0x533618=_0x8458c4[_0x2c2d00(0x895)];let _0x20c0a8=_0x8458c4['height'];if(this['_battler'][_0x2c2d00(0x57e)]()){if(this[_0x2c2d00(0x418)])_0x20c0a8=Math[_0x2c2d00(0xa63)](0x0,this[_0x2c2d00(0x418)][_0x2c2d00(0x399)]-0x4);}this[_0x2c2d00(0x662)][_0x2c2d00(0xa89)](0x0,0x0,_0x533618,_0x20c0a8),this[_0x2c2d00(0xa89)](0x0,0x0,_0x533618,_0x20c0a8);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x7ab)]=function(){const _0x3c8ddb=_0x4376f0;if(!this[_0x3c8ddb(0x39a)])return;if(!this[_0x3c8ddb(0x3f3)])return;const _0x38f079=VisuMZ[_0x3c8ddb(0x19c)][_0x3c8ddb(0xae8)]['HpGauge'],_0x3433cf=this[_0x3c8ddb(0x3f3)];_0x3433cf[_0x3c8ddb(0x42f)]=this[_0x3c8ddb(0x2de)]();const _0x5277e2=_0x38f079[_0x3c8ddb(0x1d2)],_0x3ac162=_0x38f079[_0x3c8ddb(0x692)];_0x3433cf['x']=_0x5277e2,_0x3433cf['x']+=this[_0x3c8ddb(0x39a)]['battleUIOffsetX'](),_0x3433cf['y']=-this['height']+_0x3ac162,_0x3433cf['y']+=this[_0x3c8ddb(0x39a)][_0x3c8ddb(0x69e)](),Spriteset_Battle[_0x3c8ddb(0x356)]&&SceneManager[_0x3c8ddb(0x982)][_0x3c8ddb(0x86d)]&&(_0x3433cf['x']+=this['x'],_0x3433cf['y']+=this['y']);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x2de)]=function(){const _0x10f120=_0x4376f0;if(!this[_0x10f120(0x39a)])return![];if(this['_battler'][_0x10f120(0xb9d)]())return!![];if(this['_battler'][_0x10f120(0x36a)]())return![];if(this[_0x10f120(0x945)]<=0x0)return![];const _0x3ebe58=this[_0x10f120(0x39a)][_0x10f120(0x9b1)]()[_0x10f120(0x54f)];if(_0x3ebe58[_0x10f120(0x844)](/<SHOW HP GAUGE>/i))return!![];if(_0x3ebe58['match'](/<HIDE HP GAUGE>/i))return![];const _0xc4a3e8=VisuMZ[_0x10f120(0x19c)][_0x10f120(0xae8)]['HpGauge'];if(_0xc4a3e8[_0x10f120(0x77a)]){if(_0xc4a3e8['BTestBypass']&&BattleManager[_0x10f120(0x6b8)]())return!![];if(this['_battler'][_0x10f120(0x923)])return![];return this[_0x10f120(0x39a)][_0x10f120(0x8f1)]();}return!![];},VisuMZ['BattleCore'][_0x4376f0(0xb13)]=Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x459)],Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x459)]=function(){const _0x2e66a4=_0x4376f0;if(!this[_0x2e66a4(0x39a)])return![];if(this[_0x2e66a4(0x4b4)]>0x0)return!![];return VisuMZ[_0x2e66a4(0x19c)]['Sprite_Battler_isMoving'][_0x2e66a4(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)]['Sprite_Battler_startMove']=Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xa88)],Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xa88)]=function(_0x58d56e,_0x11f9ce,_0x27713c){const _0x41ca20=_0x4376f0;this[_0x41ca20(0x687)]()&&VisuMZ[_0x41ca20(0x19c)][_0x41ca20(0x827)][_0x41ca20(0x34b)](this,_0x58d56e,_0x11f9ce,_0x27713c);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x687)]=function(){const _0x54f88c=_0x4376f0;if(this[_0x54f88c(0x39a)]&&this['_battler'][_0x54f88c(0x57e)]())return![];if(this[_0x54f88c(0x39a)]&&!this[_0x54f88c(0x39a)]['canBattlerMove']())return![];return $gameSystem[_0x54f88c(0x245)]();},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x1be)]=function(){},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x3da)]=function(){const _0x2d5da1=_0x4376f0;this[_0x2d5da1(0xa88)](0x0,0x0,0xc);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x369)]=function(){},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x8ee)]=function(){const _0x40113d=_0x4376f0,_0x57d969=VisuMZ[_0x40113d(0x19c)]['Settings']['Actor'],_0x2df8d2=this[_0x40113d(0x39a)]&&this[_0x40113d(0x39a)]['isActor']()?0x1:-0x1,_0x5f531d=this[_0x40113d(0x4f3)]-this['_homeX']+_0x2df8d2*_0x57d969[_0x40113d(0xabc)],_0x4a6fc8=this[_0x40113d(0x90f)]-this[_0x40113d(0x62b)]+_0x2df8d2*_0x57d969[_0x40113d(0x47b)],_0x54e4a0=_0x57d969[_0x40113d(0xb4d)];this[_0x40113d(0xa88)](_0x5f531d,_0x4a6fc8,_0x54e4a0);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0xb18)]=function(_0x7efb3,_0x1c89b7){const _0x3169a1=_0x4376f0,_0x2b6c67=VisuMZ[_0x3169a1(0x19c)][_0x3169a1(0xae8)][_0x3169a1(0x41c)];this[_0x3169a1(0x3ea)]=Math['ceil']((_0x2b6c67[_0x3169a1(0xa99)]??0x18)*_0x1c89b7),this[_0x3169a1(0x57d)]=Math['max'](this[_0x3169a1(0x57d)],_0x7efb3);},Sprite_Battler[_0x4376f0(0x705)][_0x4376f0(0x9f0)]=function(){const _0x3cfe91=_0x4376f0,_0x1e317e=VisuMZ[_0x3cfe91(0x19c)][_0x3cfe91(0xae8)][_0x3cfe91(0x41c)];if(!(_0x1e317e[_0x3cfe91(0x159)]??![]))return;if(this[_0x3cfe91(0x3ea)]>0x0){const _0x31cdba=this[_0x3cfe91(0x3ea)];this[_0x3cfe91(0x57d)]=this[_0x3cfe91(0x57d)]*(_0x31cdba-0x1)/_0x31cdba,this[_0x3cfe91(0x3ea)]--,this[_0x3cfe91(0x3ea)]<=0x0&&(this[_0x3cfe91(0x57d)]=0x0);}let _0x3779b4=this[_0x3cfe91(0x662)];this[_0x3cfe91(0x39a)]&&this['_battler'][_0x3cfe91(0x7b4)]()&&(this['_battler'][_0x3cfe91(0x7dc)]()&&this['_svBattlerSprite']&&(_0x3779b4=this[_0x3cfe91(0x250)])),this['_shakeFlinchPower']>0x0?(_0x3779b4['x']=Math[_0x3cfe91(0x96e)](this[_0x3cfe91(0x57d)])*(Math['random']()<0.5?-0x1:0x1),this[_0x3cfe91(0x90f)]!==this['y']&&(_0x3779b4['y']=this[_0x3cfe91(0x399)]*0.5,_0x3779b4['y']+=Math[_0x3cfe91(0x96e)](this[_0x3cfe91(0x57d)])*(Math[_0x3cfe91(0x8dd)]()<0.5?-0x1:0x1))):(_0x3779b4['x']=0x0,_0x3779b4['y']=this[_0x3cfe91(0x399)]*0.5);},VisuMZ['BattleCore'][_0x4376f0(0x20b)]=Sprite_Actor['prototype']['initMembers'],Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x5e8)]=function(){const _0x5f3249=_0x4376f0;VisuMZ[_0x5f3249(0x19c)][_0x5f3249(0x20b)][_0x5f3249(0x34b)](this),this[_0x5f3249(0xbfc)]();},Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x5a9)]=function(){const _0x12f3b7=_0x4376f0;return this[_0x12f3b7(0x98c)]||this['_mainSprite']||this;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x5c3)]=Sprite_Actor[_0x4376f0(0x705)]['moveToStartPosition'],Sprite_Actor['prototype']['moveToStartPosition']=function(){},Sprite_Actor[_0x4376f0(0x705)]['moveToStartPositionBattleCore']=function(_0x52f918){const _0x142cff=_0x4376f0;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x52f918)return;if(!_0x52f918[_0x142cff(0x687)]())return;VisuMZ[_0x142cff(0x19c)][_0x142cff(0x5c3)][_0x142cff(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x12a)]=Sprite_Actor['prototype'][_0x4376f0(0x38a)],Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x38a)]=function(_0x55b233){const _0xe77d86=_0x4376f0;VisuMZ['BattleCore'][_0xe77d86(0xae8)][_0xe77d86(0x41c)]['HomePosJS']?VisuMZ['BattleCore'][_0xe77d86(0xae8)][_0xe77d86(0x41c)][_0xe77d86(0xab9)][_0xe77d86(0x34b)](this,_0x55b233):VisuMZ[_0xe77d86(0x19c)][_0xe77d86(0x12a)][_0xe77d86(0x34b)](this,_0x55b233);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x80c)]=Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x6e8)],Sprite_Actor[_0x4376f0(0x705)]['setBattler']=function(_0xd2c202){const _0x115a8f=_0x4376f0;VisuMZ[_0x115a8f(0x19c)]['Sprite_Actor_setBattler'][_0x115a8f(0x34b)](this,_0xd2c202),this[_0x115a8f(0x132)](_0xd2c202);},Sprite_Actor[_0x4376f0(0x705)]['setBattlerBattleCore']=function(_0xd01650){const _0xaf510f=_0x4376f0;if(!_0xd01650)return;if(!this[_0xaf510f(0x662)])return;this['_mainSprite'][_0xaf510f(0x7cf)]['x']=this[_0xaf510f(0x1a1)][_0xaf510f(0x1ac)](),this[_0xaf510f(0x662)][_0xaf510f(0x7cf)]['y']=this[_0xaf510f(0x1a1)][_0xaf510f(0x2c2)](),this[_0xaf510f(0x202)]();},VisuMZ[_0x4376f0(0x19c)]['Sprite_Actor_update']=Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x75b)],Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x75b)]=function(){const _0x1f633f=_0x4376f0;VisuMZ[_0x1f633f(0x19c)]['Sprite_Actor_update']['call'](this),this[_0x1f633f(0x1a1)]&&(this['updateStateSprite'](),this[_0x1f633f(0xacd)]());},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x6fe)]=Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x50a)],Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x50a)]=function(){const _0x38635f=_0x4376f0;VisuMZ[_0x38635f(0x19c)][_0x38635f(0x6fe)][_0x38635f(0x34b)](this),this[_0x38635f(0x662)]&&this['_mainSprite'][_0x38635f(0x1e6)]&&this[_0x38635f(0x39a)]&&(this['_mainSprite'][_0x38635f(0x1e6)][_0x38635f(0xb0e)]!==this[_0x38635f(0x39a)]['battlerSmoothImage']()&&(this[_0x38635f(0x662)][_0x38635f(0x1e6)]['smooth']=this[_0x38635f(0x39a)][_0x38635f(0x45b)]()));},VisuMZ[_0x4376f0(0x19c)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x6bb)],Sprite_Actor['prototype']['updateShadow']=function(){const _0x1913b3=_0x4376f0;VisuMZ[_0x1913b3(0x19c)][_0x1913b3(0x760)][_0x1913b3(0x34b)](this),this['updateShadowBattleCore']();},Sprite_Actor['prototype']['updateShadowBattleCore']=function(){const _0x513992=_0x4376f0;if(!this[_0x513992(0x662)])return;if(!this[_0x513992(0xb25)])return;this['updateShadowVisibility'](),this['updateShadowPosition']();},Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x367)]=function(){const _0xba82b8=_0x4376f0;{this[_0xba82b8(0xbf6)]['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0xba82b8(0xbf6)][_0xba82b8(0xc02)]['y']=0x1/(this['scale']['y']||0.001);}{this['_stateSprite']['x']=0x0,this[_0xba82b8(0xbf6)]['y']=-this[_0xba82b8(0x399)]-0x20+0x60;const _0x42a838=VisuMZ['BattleCore']['Settings'][_0xba82b8(0x41c)];this['_stateSprite']['x']+=_0x42a838[_0xba82b8(0x6b3)]??0x0,this['_stateSprite']['y']+=_0x42a838['StateOverlayOffsetY']??0x0;}},Sprite_Actor['prototype'][_0x4376f0(0xacd)]=function(){const _0x4d777d=_0x4376f0;if(!$gameSystem['isSideView']()&&this[_0x4d777d(0xa32)]===Sprite_Actor){const _0x5d5dce=Scene_Battle['prototype'][_0x4d777d(0x6c1)]();[_0x4d777d(0x847),'list',_0x4d777d(0xaf9),_0x4d777d(0x937)][_0x4d777d(0x3e9)](_0x5d5dce)&&(this['opacity']=0x0);}},Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x80a)]=function(){const _0xcf97e9=_0x4376f0,_0x4c4e80=this['_actor'];if(_0x4c4e80){if(_0x4c4e80[_0xcf97e9(0x360)])return;const _0x5c9fef=_0x4c4e80['stateMotionIndex']();if(_0x4c4e80['isInputting']()||_0x4c4e80[_0xcf97e9(0xa4e)]())this[_0xcf97e9(0x99c)](_0xcf97e9(0x175));else{if(_0x5c9fef===0x3)this['startMotion']('dead');else{if(_0x5c9fef===0x2)this['startMotion'](_0xcf97e9(0x6e1));else{if(this[_0xcf97e9(0x5cc)])this['startMotion'](_0xcf97e9(0x4ca));else{if(_0x4c4e80[_0xcf97e9(0x4c1)]())this['startMotion'](_0xcf97e9(0xc3e));else{if(_0x4c4e80['isChanting']())this[_0xcf97e9(0x99c)]('chant');else{if(_0x4c4e80['isGuard']()||_0x4c4e80[_0xcf97e9(0xc2c)]())this[_0xcf97e9(0x99c)](_0xcf97e9(0x130));else{if(_0x5c9fef===0x1)this[_0xcf97e9(0x99c)](_0xcf97e9(0x454));else{if(_0x4c4e80['isDying']())this[_0xcf97e9(0x99c)]('dying');else{if(_0x4c4e80[_0xcf97e9(0x876)]())this[_0xcf97e9(0x99c)](_0xcf97e9(0x175));else _0x4c4e80[_0xcf97e9(0x8ad)]()?this['startMotion'](_0xcf97e9(0xc3e)):this[_0xcf97e9(0x99c)](_0xcf97e9(0x175));}}}}}}}}}}},Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x369)]=function(){const _0x3cfa10=0xa,_0x5157eb=0x12c*_0x3cfa10,_0x29b056=0x1e*_0x3cfa10;this['startMove'](_0x5157eb,0x0,_0x29b056);},Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x23f)]=function(){const _0x1f23b6=_0x4376f0;Sprite_Battler[_0x1f23b6(0x705)]['onMoveEnd']['call'](this);},Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x2c4)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon[_0x4376f0(0x705)][_0x4376f0(0x33c)]=function(){const _0x1e7faa=_0x4376f0;return Sprite_Battler[_0x1e7faa(0x8c1)];},Sprite_Actor['prototype'][_0x4376f0(0x488)]=function(){},Sprite_Actor['prototype'][_0x4376f0(0xb2f)]=function(){},Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x1dd)]=function(){const _0x46b09e=_0x4376f0;if(this['_motion']&&++this[_0x46b09e(0x9ad)]>=this[_0x46b09e(0x2c4)]()){if(this[_0x46b09e(0x9e2)][_0x46b09e(0xa5c)])this['_pattern']=(this[_0x46b09e(0x8cf)]+0x1)%0x4;else{if(this[_0x46b09e(0x8cf)]<0x2)this[_0x46b09e(0x8cf)]++;else{const _0x15c856=this[_0x46b09e(0x1a1)];if(_0x15c856)_0x15c856[_0x46b09e(0x360)]=undefined;this[_0x46b09e(0x80a)]();}}this['_motionCount']=0x0;}},Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0xa50)]=function(_0xb1d55e){const _0x423262=_0x4376f0;if(this[_0x423262(0x39a)]&&this[_0x423262(0x39a)][_0x423262(0x57e)]()){this[_0x423262(0x9e2)]=Sprite_Actor['MOTIONS']['dead'];return;}const _0x4fcaeb=Sprite_Actor[_0x423262(0x4f6)][_0xb1d55e];this[_0x423262(0x9e2)]=_0x4fcaeb,this[_0x423262(0x9ad)]=0x0,this[_0x423262(0x8cf)]=0x0;},Sprite_Actor[_0x4376f0(0x705)]['forceWeaponAnimation']=function(_0x41e8d8){const _0x3add04=_0x4376f0;if(this[_0x3add04(0x7e1)]())return;this[_0x3add04(0x3fe)](),this['_weaponSprite'][_0x3add04(0x578)](_0x41e8d8),this[_0x3add04(0x1a1)][_0x3add04(0x235)]();},Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x3fe)]=function(){const _0x4c0f18=_0x4376f0;let _0xf9b7c5=-0x10,_0x26ce1f=this['height']*0.5;const _0x402b82=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x429872=this[_0x4c0f18(0x39a)][_0x4c0f18(0x91b)]()['map'](_0x2a2864=>_0x2a2864&&_0x2a2864[_0x4c0f18(0x54f)][_0x4c0f18(0x844)](_0x402b82)?Number(RegExp['$1']):0x0),_0x472a28=this[_0x4c0f18(0x39a)][_0x4c0f18(0x91b)]()[_0x4c0f18(0x424)](_0x58ca6f=>_0x58ca6f&&_0x58ca6f[_0x4c0f18(0x54f)][_0x4c0f18(0x844)](_0x402b82)?Number(RegExp['$2']):0x0);_0xf9b7c5=_0x429872['reduce']((_0x4642c4,_0x1c31a1)=>_0x4642c4+_0x1c31a1,_0xf9b7c5),_0x26ce1f=_0x472a28[_0x4c0f18(0x207)]((_0x1f4e9b,_0x43a607)=>_0x1f4e9b+_0x43a607,_0x26ce1f),this[_0x4c0f18(0x9ae)]['x']=_0xf9b7c5,this['_weaponSprite']['y']=_0x26ce1f,this[_0x4c0f18(0x9ae)][_0x4c0f18(0x75b)]();},Sprite_Weapon[_0x4376f0(0x705)][_0x4376f0(0x578)]=function(_0x12fc13){const _0x50a94d=_0x4376f0;this[_0x50a94d(0x999)]=_0x12fc13,this[_0x50a94d(0x797)]=-0x1,this[_0x50a94d(0x8cf)]=0x0,this[_0x50a94d(0xc2e)](),this[_0x50a94d(0x170)]();},Sprite_Actor[_0x4376f0(0x705)]['updateTargetPosition']=function(){},Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x1be)]=function(){const _0x3f2c01=_0x4376f0,_0x1fb421=VisuMZ['BattleCore']['Settings'][_0x3f2c01(0x1e5)],_0x1a4102=_0x1fb421[_0x3f2c01(0x55a)],_0xdee7f8=_0x1fb421[_0x3f2c01(0x8a6)],_0x5d1847=_0x1fb421['StepDuration'];this['startMove'](-_0x1a4102,-_0xdee7f8,_0x5d1847);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x680)]=Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x170)],Sprite_Actor[_0x4376f0(0x705)][_0x4376f0(0x170)]=function(){const _0x5600ec=_0x4376f0;this[_0x5600ec(0x7e1)]()?this[_0x5600ec(0x295)]():(this['applyFreezeMotionFrames'](),VisuMZ[_0x5600ec(0x19c)]['Sprite_Actor_updateFrame'][_0x5600ec(0x34b)](this));},Sprite_Actor['prototype'][_0x4376f0(0x780)]=function(){const _0x26607c=_0x4376f0;if(this[_0x26607c(0x39a)]&&this[_0x26607c(0x39a)][_0x26607c(0x4e6)]){const _0x40cd3c=this[_0x26607c(0x39a)]['_freezeMotionData'];this['_motion']=Sprite_Actor[_0x26607c(0x4f6)][_0x40cd3c[_0x26607c(0x374)]],this[_0x26607c(0x8cf)]=_0x40cd3c[_0x26607c(0x81b)];const _0x44f6e0=this[_0x26607c(0x9ae)];_0x44f6e0[_0x26607c(0x632)](_0x40cd3c[_0x26607c(0x2b0)],_0x40cd3c[_0x26607c(0x81b)]),this[_0x26607c(0x3fe)]();}},Sprite_Weapon[_0x4376f0(0x705)][_0x4376f0(0x632)]=function(_0x6cce7e,_0x4558c6){const _0x3c0c00=_0x4376f0;this[_0x3c0c00(0x999)]=_0x6cce7e,this[_0x3c0c00(0x797)]=-Infinity,this['_pattern']=_0x4558c6,this[_0x3c0c00(0xc2e)](),this[_0x3c0c00(0x170)]();},Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x5e8)]=function(){const _0x18d351=_0x4376f0;Sprite_Battler['prototype'][_0x18d351(0x5e8)][_0x18d351(0x34b)](this),this[_0x18d351(0xbf2)]=null,this['_appeared']=![],this[_0x18d351(0xb82)]='',this[_0x18d351(0x2d9)]=0x0,this['_effectType']=null,this[_0x18d351(0x574)]=0x0,this[_0x18d351(0xbed)]=0x0,this[_0x18d351(0x606)](),this[_0x18d351(0x551)]();},VisuMZ[_0x4376f0(0x19c)]['Sprite_Enemy_update']=Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x75b)],Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x75b)]=function(){const _0x2b4028=_0x4376f0;VisuMZ['BattleCore']['Sprite_Enemy_update'][_0x2b4028(0x34b)](this),this[_0x2b4028(0x202)](),this[_0x2b4028(0x5c7)]();},Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x606)]=function(){const _0x4ce421=_0x4376f0;this[_0x4ce421(0x662)]=new Sprite(),this[_0x4ce421(0x662)][_0x4ce421(0x7cf)]['x']=0.5,this[_0x4ce421(0x662)][_0x4ce421(0x7cf)]['y']=0x1,this[_0x4ce421(0x3e4)](this[_0x4ce421(0x662)]),this[_0x4ce421(0xbfc)]();},Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x5a9)]=function(){const _0x125d88=_0x4376f0;return this[_0x125d88(0x98c)]||this[_0x125d88(0x662)]||this;},Sprite_Enemy['prototype'][_0x4376f0(0xc2e)]=function(_0x338543){const _0x1d2eb9=_0x4376f0;this[_0x1d2eb9(0x1e6)]=new Bitmap(0x1,0x1);if(this['hasSvBattler']()){const _0x4bb8da=this[_0x1d2eb9(0xbf2)][_0x1d2eb9(0x310)]();this[_0x1d2eb9(0x1e6)]=new Bitmap(_0x4bb8da[_0x1d2eb9(0x895)],_0x4bb8da[_0x1d2eb9(0x399)]),this[_0x1d2eb9(0x662)]['bitmap']=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x1d2eb9(0x245)]()){const _0x39e334=ImageManager[_0x1d2eb9(0x643)](_0x338543);_0x39e334['addLoadListener'](this[_0x1d2eb9(0x9a8)]['bind'](this,_0x39e334));}else{const _0x460b54=ImageManager[_0x1d2eb9(0xbb3)](_0x338543);_0x460b54[_0x1d2eb9(0x6ff)](this[_0x1d2eb9(0x9a8)][_0x1d2eb9(0x54e)](this,_0x460b54));}}},Sprite_Enemy['prototype'][_0x4376f0(0x9a8)]=function(_0x4593f3){const _0xc199a9=_0x4376f0;this[_0xc199a9(0x662)]['bitmap']=_0x4593f3,this[_0xc199a9(0x1e6)]=new Bitmap(_0x4593f3[_0xc199a9(0x895)],_0x4593f3['height']);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x9fb)]=Sprite_Enemy[_0x4376f0(0x705)]['setHue'],Sprite_Enemy['prototype'][_0x4376f0(0x503)]=function(_0x23f2c1){const _0x43b609=_0x4376f0;this[_0x43b609(0x662)]&&this[_0x43b609(0x662)]['setHue'](_0x23f2c1);},VisuMZ['BattleCore'][_0x4376f0(0x8ef)]=Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0xac0)],Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0xac0)]=function(){const _0x1e811f=_0x4376f0;this['allowCollapse']()?VisuMZ[_0x1e811f(0x19c)][_0x1e811f(0x8ef)][_0x1e811f(0x34b)](this):(this[_0x1e811f(0x6ba)]=!this[_0x1e811f(0xbf2)][_0x1e811f(0x36a)](),!this[_0x1e811f(0x6ba)]&&(this[_0x1e811f(0x945)]=0x0));},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x80f)]=Sprite_Enemy['prototype'][_0x4376f0(0xc17)],Sprite_Enemy[_0x4376f0(0x705)]['updateCollapse']=function(){const _0x143185=_0x4376f0;if(this['allowCollapse']())VisuMZ[_0x143185(0x19c)][_0x143185(0x80f)]['call'](this);},Sprite_Enemy[_0x4376f0(0x705)]['updateFrame']=function(){const _0x2f4de8=_0x4376f0;Sprite_Battler[_0x2f4de8(0x705)][_0x2f4de8(0x170)]['call'](this);const _0x51e634=this[_0x2f4de8(0x5a9)]()||this;if(!_0x51e634)return;!_0x51e634[_0x2f4de8(0x1e6)]&&(_0x51e634[_0x2f4de8(0x1e6)]=new Bitmap(this[_0x2f4de8(0x895)]||0x1,this['height']||0x1));if(this[_0x2f4de8(0x241)]===_0x2f4de8(0xaa6))this['_mainSprite'][_0x2f4de8(0xa89)](0x0,0x0,this[_0x2f4de8(0x662)]['width']||0x1,this['_effectDuration']);else{let _0x457605=0x1;if(_0x51e634&&_0x51e634['bitmap'])_0x457605=_0x51e634['bitmap'][_0x2f4de8(0x895)];let _0x278ae6=0x1;if(this[_0x2f4de8(0x1e6)])_0x278ae6=this[_0x2f4de8(0x1e6)][_0x2f4de8(0x399)];_0x51e634['setFrame'](0x0,0x0,_0x457605,_0x278ae6);}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x557)]=Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x59b)],Sprite_Enemy[_0x4376f0(0x705)]['updateBossCollapse']=function(){const _0x54e451=_0x4376f0;if(this[_0x54e451(0xa4f)]())VisuMZ[_0x54e451(0x19c)][_0x54e451(0x557)][_0x54e451(0x34b)](this);},Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x459)]=function(){const _0x216c1d=_0x4376f0;return Sprite_Battler[_0x216c1d(0x705)][_0x216c1d(0x459)][_0x216c1d(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xafe)]=Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x367)],Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x367)]=function(){const _0x22137f=_0x4376f0;VisuMZ[_0x22137f(0x19c)]['Sprite_Enemy_updateStateSprite'][_0x22137f(0x34b)](this),this['updateStateSpriteBattleCore']();},Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x7f8)]=function(){const _0x2e1feb=_0x4376f0,_0x981714=VisuMZ[_0x2e1feb(0x19c)][_0x2e1feb(0xae8)]['Enemy'];if(_0x981714[_0x2e1feb(0x394)]&&!_0x981714[_0x2e1feb(0x9ab)]){this['_stateIconSprite'][_0x2e1feb(0x945)]=0x0;return;}this['_stateIconSprite']['x']=0x0,this[_0x2e1feb(0x49d)]['x']+=this[_0x2e1feb(0x39a)]['battleUIOffsetX']();let _0x261d3b=0x1;if(this['bitmap'])_0x261d3b=this['bitmap']['height'];this['_stateIconSprite']['y']=-_0x261d3b-this[_0x2e1feb(0x49d)]['height']-0x4,this[_0x2e1feb(0x49d)]['y']+=this[_0x2e1feb(0x39a)][_0x2e1feb(0x69e)](),this['_stateIconSprite'][_0x2e1feb(0xc02)]['x']=0x1/(this[_0x2e1feb(0xc02)]['x']||0.001),this[_0x2e1feb(0x49d)][_0x2e1feb(0xc02)]['y']=0x1/(this['scale']['y']||0.001),this[_0x2e1feb(0x7dc)]()&&(this[_0x2e1feb(0x250)][_0x2e1feb(0xbf6)]['scale']['x']=-0x1/(this[_0x2e1feb(0xc02)]['x']||0.001),this[_0x2e1feb(0x250)][_0x2e1feb(0xbf6)]['scale']['y']=0x1/(this[_0x2e1feb(0xc02)]['y']||0.001));},Sprite_Enemy['prototype']['updateNameTempVisibility']=function(){const _0x36d635=_0x4376f0;this[_0x36d635(0x39a)]&&this[_0x36d635(0x39a)]['updateNameTempVisibility']();},VisuMZ['BattleCore']['Sprite_Enemy_setBattler']=Sprite_Enemy['prototype'][_0x4376f0(0x6e8)],Sprite_Enemy['prototype'][_0x4376f0(0x6e8)]=function(_0x5a5c73){const _0x350499=_0x4376f0;VisuMZ[_0x350499(0x19c)][_0x350499(0x88b)][_0x350499(0x34b)](this,_0x5a5c73),this[_0x350499(0x2c7)](_0x5a5c73);},Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x2c7)]=function(_0x1207d4){const _0x2c138d=_0x4376f0;!this[_0x2c138d(0x250)]&&(this[_0x2c138d(0x250)]=new Sprite_SvEnemy(_0x1207d4),this[_0x2c138d(0xbfc)]()),this[_0x2c138d(0x250)][_0x2c138d(0x6e8)](_0x1207d4);},Sprite_Enemy['prototype'][_0x4376f0(0x7dc)]=function(){const _0x12bd0c=_0x4376f0;return this[_0x12bd0c(0xbf2)]&&this[_0x12bd0c(0xbf2)][_0x12bd0c(0x7dc)]();},Sprite_Enemy['prototype'][_0x4376f0(0xa4f)]=function(){const _0x53bec7=_0x4376f0;return this[_0x53bec7(0x7dc)]()?this[_0x53bec7(0xbf2)][_0x53bec7(0xa4f)]():!![];},Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x80a)]=function(){const _0x2a64e1=_0x4376f0;this[_0x2a64e1(0x7dc)]()&&this[_0x2a64e1(0x250)][_0x2a64e1(0x80a)]();},Sprite_Enemy['prototype'][_0x4376f0(0xa50)]=function(_0x35f8e7){const _0x4455ae=_0x4376f0;if(this[_0x4455ae(0x7dc)]())this[_0x4455ae(0x250)][_0x4455ae(0xa50)](_0x35f8e7);},Sprite_Enemy[_0x4376f0(0x705)]['forceWeaponAnimation']=function(_0x1d30ea){const _0x75a24d=_0x4376f0;if(this[_0x75a24d(0x7dc)]())this[_0x75a24d(0x250)]['forceWeaponAnimation'](_0x1d30ea);},Sprite_Enemy[_0x4376f0(0x705)][_0x4376f0(0x1be)]=function(){const _0x3bb815=_0x4376f0,_0x4d4613=VisuMZ['BattleCore'][_0x3bb815(0xae8)][_0x3bb815(0x1e5)],_0x19706f=_0x4d4613[_0x3bb815(0x55a)],_0x5b95b3=_0x4d4613[_0x3bb815(0x8a6)],_0x54dc52=_0x4d4613[_0x3bb815(0x580)];this[_0x3bb815(0xa88)](_0x19706f,_0x5b95b3,_0x54dc52);};function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy[_0x4376f0(0x705)]=Object[_0x4376f0(0xbdd)](Sprite_Actor[_0x4376f0(0x705)]),Sprite_SvEnemy[_0x4376f0(0x705)][_0x4376f0(0xa32)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x4376f0(0x705)][_0x4376f0(0x72f)]=function(_0x35cfb6){const _0x19bbe4=_0x4376f0;Sprite_Actor[_0x19bbe4(0x705)][_0x19bbe4(0x72f)][_0x19bbe4(0x34b)](this,_0x35cfb6),this[_0x19bbe4(0xc02)]['x']=-0x1,this[_0x19bbe4(0xbf6)][_0x19bbe4(0xc02)]['x']=-0x1;},Sprite_SvEnemy[_0x4376f0(0x705)][_0x4376f0(0xc06)]=function(){},Sprite_SvEnemy[_0x4376f0(0x705)]['moveToStartPosition']=function(){},Sprite_SvEnemy[_0x4376f0(0x705)][_0x4376f0(0x38a)]=function(_0x11b88e){},Sprite_SvEnemy[_0x4376f0(0x705)]['updateShadow']=function(){},Sprite_SvEnemy['prototype'][_0x4376f0(0x7e5)]=function(){},Sprite_SvEnemy[_0x4376f0(0x705)][_0x4376f0(0x367)]=function(){const _0x551edb=_0x4376f0;this[_0x551edb(0xbf6)][_0x551edb(0x42f)]=![];},Sprite_SvEnemy[_0x4376f0(0x705)][_0x4376f0(0x50a)]=function(){const _0x29a118=_0x4376f0;Sprite_Battler[_0x29a118(0x705)][_0x29a118(0x50a)]['call'](this);const _0x3cf53c=this[_0x29a118(0x1a1)][_0x29a118(0xa02)]();this[_0x29a118(0xb82)]!==_0x3cf53c&&(this[_0x29a118(0xb82)]=_0x3cf53c,this[_0x29a118(0x662)][_0x29a118(0x1e6)]=ImageManager[_0x29a118(0x925)](_0x3cf53c)),this['_mainSprite']&&this['_mainSprite'][_0x29a118(0x1e6)]&&this[_0x29a118(0x39a)]&&(this[_0x29a118(0x662)][_0x29a118(0x1e6)]['smooth']!==this['_battler'][_0x29a118(0x45b)]()&&(this[_0x29a118(0x662)][_0x29a118(0x1e6)]['smooth']=this[_0x29a118(0x39a)][_0x29a118(0x45b)]()));},Sprite_SvEnemy[_0x4376f0(0x705)][_0x4376f0(0x369)]=function(){},Sprite_SvEnemy[_0x4376f0(0x705)][_0x4376f0(0xa88)]=function(_0xe457a5,_0xa71e1f,_0x4c2a2d){const _0x435b09=_0x4376f0;if(this['parent'])this[_0x435b09(0x4ec)][_0x435b09(0xa88)](_0xe457a5,_0xa71e1f,_0x4c2a2d);},Sprite_SvEnemy['prototype'][_0x4376f0(0x80a)]=function(){const _0x4c4574=_0x4376f0,_0x424c71=this['_actor'];if(_0x424c71){const _0x1072d8=_0x424c71['stateMotionIndex']();if(_0x424c71['isInputting']()||_0x424c71[_0x4c4574(0xa4e)]())this[_0x4c4574(0x99c)](_0x4c4574(0x175));else{if(_0x1072d8===0x3)this['startMotion'](_0x4c4574(0x32c));else{if(_0x1072d8===0x2)this['startMotion'](_0x4c4574(0x6e1));else{if(_0x424c71[_0x4c4574(0x1fe)]())this[_0x4c4574(0x99c)](_0x4c4574(0x6fa));else{if(_0x424c71['isGuard']()||_0x424c71[_0x4c4574(0xc2c)]())this['startMotion']('guard');else{if(_0x1072d8===0x1)this['startMotion'](_0x4c4574(0x454));else{if(_0x424c71[_0x4c4574(0x4ba)]())this[_0x4c4574(0x99c)](_0x4c4574(0xb9e));else _0x424c71[_0x4c4574(0x876)]()?this[_0x4c4574(0x99c)](_0x424c71['svBattlerData']()[_0x4c4574(0x790)]||_0x4c4574(0x175)):this[_0x4c4574(0x99c)](_0x424c71[_0x4c4574(0x310)]()[_0x4c4574(0x790)]||'walk');}}}}}}}},Sprite_SvEnemy[_0x4376f0(0x705)][_0x4376f0(0x51c)]=function(){const _0x2012bb=_0x4376f0;return this['parent']?this['parent'][_0x2012bb(0x48a)]===0x0&&this['parent'][_0x2012bb(0xbc9)]===0x0:!![];},Sprite_SvEnemy[_0x4376f0(0x705)][_0x4376f0(0x691)]=function(){},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x9a4)]=Sprite_Animation[_0x4376f0(0x705)][_0x4376f0(0x70c)],Sprite_Animation[_0x4376f0(0x705)][_0x4376f0(0x70c)]=function(_0x449ce1){const _0x23ad57=_0x4376f0;return _0x449ce1[_0x23ad57(0x98c)]?this['targetDistortionSpritePosition'](_0x449ce1):VisuMZ[_0x23ad57(0x19c)][_0x23ad57(0x9a4)][_0x23ad57(0x34b)](this,_0x449ce1);},Sprite_Animation[_0x4376f0(0x705)][_0x4376f0(0x350)]=function(_0x3f1fe7){const _0x4c3ecc=_0x4376f0;let _0x59b40e=_0x3f1fe7['x'],_0x4a2f61=_0x3f1fe7['y'],_0x5b90d4=_0x3f1fe7['height'],_0x472b6e=_0x3f1fe7[_0x4c3ecc(0x98c)]['scale']['y'];_0x3f1fe7['x']=_0x3f1fe7[_0x4c3ecc(0x4f3)]+_0x3f1fe7['extraPositionX'](),_0x3f1fe7['y']=_0x3f1fe7['_baseY']+_0x3f1fe7[_0x4c3ecc(0x3be)](),_0x3f1fe7['height']*=_0x472b6e;let _0xfbaf21=VisuMZ[_0x4c3ecc(0x19c)][_0x4c3ecc(0x9a4)][_0x4c3ecc(0x34b)](this,_0x3f1fe7);return _0x3f1fe7['x']=_0x59b40e,_0x3f1fe7['y']=_0x4a2f61,_0x3f1fe7['height']=_0x5b90d4,_0xfbaf21;},Sprite_Animation[_0x4376f0(0x705)]['isUnderAnimation']=function(){const _0x430648=_0x4376f0;if(this[_0x430648(0x85d)])return![];return this[_0x430648(0x62e)]&&this[_0x430648(0x62e)][_0x430648(0x7d3)]&&this[_0x430648(0x62e)][_0x430648(0x7d3)]['match'](/<UNDER>/gi);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xaf5)]=Sprite_AnimationMV[_0x4376f0(0x705)][_0x4376f0(0x68f)],Sprite_AnimationMV[_0x4376f0(0x705)]['updatePosition']=function(){const _0x4f638f=_0x4376f0;VisuMZ['BattleCore'][_0x4f638f(0xaf5)][_0x4f638f(0x34b)](this);if(!SceneManager[_0x4f638f(0x446)]())return;if(this[_0x4f638f(0x62e)]['position']===0x3)this['x']=Math[_0x4f638f(0x1c6)](Graphics[_0x4f638f(0x375)]/0x2),this['y']=Math['round'](Graphics[_0x4f638f(0x21b)]/0x2);else{if(this[_0x4f638f(0x87f)])return;}},Sprite_AnimationMV[_0x4376f0(0x705)][_0x4376f0(0x6eb)]=function(){const _0x12f463=_0x4376f0;if(this[_0x12f463(0x85d)])return![];return this['_animation']&&this[_0x12f463(0x62e)][_0x12f463(0x7d3)]&&this['_animation'][_0x12f463(0x7d3)][_0x12f463(0x844)](/<UNDER>/gi);},Sprite_Damage['prototype'][_0x4376f0(0x637)]=function(_0x3b69d5){const _0x54dcc6=_0x4376f0,_0x3d7d3c=_0x3b69d5[_0x54dcc6(0x138)]()||_0x3b69d5[_0x54dcc6(0xbb6)]();if(_0x3d7d3c['missed']||_0x3d7d3c[_0x54dcc6(0x3b0)])this[_0x54dcc6(0x89f)]=0x0,this[_0x54dcc6(0x9d9)]();else{if(_0x3d7d3c['hpAffected'])this['_colorType']=_0x3d7d3c[_0x54dcc6(0x8c0)]>=0x0?0x0:0x1,this['createDigits'](_0x3d7d3c[_0x54dcc6(0x8c0)]);else _0x3b69d5['isAlive']()&&_0x3d7d3c['mpDamage']!==0x0&&(this[_0x54dcc6(0x89f)]=_0x3d7d3c[_0x54dcc6(0xb22)]>=0x0?0x2:0x3,this[_0x54dcc6(0x6f8)](_0x3d7d3c[_0x54dcc6(0xb22)]));}_0x3d7d3c[_0x54dcc6(0x2f0)]&&this[_0x54dcc6(0x425)]();},Sprite_Damage[_0x4376f0(0x705)][_0x4376f0(0x578)]=function(_0x53eeb3){},Sprite_Damage[_0x4376f0(0x705)][_0x4376f0(0x6f8)]=function(_0x97ff34){const _0xb6760d=_0x4376f0;let _0x5ebbc8=this[_0xb6760d(0x1a9)](_0x97ff34);const _0x4f5ebf=this['fontSize'](),_0x3d3356=Math[_0xb6760d(0x627)](_0x4f5ebf*0.75);for(let _0xdab66a=0x0;_0xdab66a<_0x5ebbc8[_0xb6760d(0xa3a)];_0xdab66a++){const _0x477e63=this[_0xb6760d(0xc34)](_0x3d3356,_0x4f5ebf);_0x477e63[_0xb6760d(0x1e6)]['drawText'](_0x5ebbc8[_0xdab66a],0x0,0x0,_0x3d3356,_0x4f5ebf,_0xb6760d(0xbe8)),_0x477e63['x']=(_0xdab66a-(_0x5ebbc8[_0xb6760d(0xa3a)]-0x1)/0x2)*_0x3d3356,_0x477e63['dy']=-_0xdab66a;}},Sprite_Damage[_0x4376f0(0x705)][_0x4376f0(0x1a9)]=function(_0x175cee){const _0x390044=_0x4376f0;let _0x107bf4=Math[_0x390044(0x54d)](_0x175cee)[_0x390044(0x92e)]();this[_0x390044(0x788)]()&&(_0x107bf4=VisuMZ[_0x390044(0x639)](_0x107bf4));const _0xe589fa=VisuMZ['BattleCore'][_0x390044(0xae8)][_0x390044(0x46a)];let _0x380f91='',_0x5b3111='';switch(this['_colorType']){case 0x0:_0x380f91=_0xe589fa['hpDamageFmt']||_0x390044(0xaa2),_0x5b3111=TextManager['hp'];if(_0x175cee===0x0)_0x380f91='%1';break;case 0x1:_0x380f91=_0xe589fa[_0x390044(0x442)]||'+%1',_0x5b3111=TextManager['hp'];break;case 0x2:_0x380f91=_0xe589fa[_0x390044(0x4ae)]||_0x390044(0x6a2),_0x5b3111=TextManager['mp'];break;case 0x3:_0x380f91=_0xe589fa[_0x390044(0x4a5)]||_0x390044(0xbbf),_0x5b3111=TextManager['mp'];break;}return _0x380f91['format'](_0x107bf4,_0x5b3111)[_0x390044(0x5cf)]();},Sprite_Damage[_0x4376f0(0x705)][_0x4376f0(0x788)]=function(){const _0x25c5c3=_0x4376f0;return Imported[_0x25c5c3(0x7ba)]?VisuMZ[_0x25c5c3(0x78c)][_0x25c5c3(0xae8)][_0x25c5c3(0xb3f)]['DigitGroupingDamageSprites']:![];},Sprite_Damage[_0x4376f0(0x705)][_0x4376f0(0x425)]=function(){const _0x1c59ab=_0x4376f0,_0x3de90f=VisuMZ[_0x1c59ab(0x19c)][_0x1c59ab(0xae8)][_0x1c59ab(0x46a)];_0x3de90f['CriticalColor']=_0x3de90f[_0x1c59ab(0xc04)]||[0x0,0x0,0x0,0x0],this[_0x1c59ab(0x9c8)]=_0x3de90f['CriticalColor'][_0x1c59ab(0x393)](0x0),this[_0x1c59ab(0x585)]=_0x3de90f[_0x1c59ab(0x476)]||0x1;},Sprite_Damage[_0x4376f0(0x705)][_0x4376f0(0x301)]=function(_0x200554,_0x8f5ae){const _0x1be3e5=_0x4376f0;this['_flashColor']=_0x8f5ae['flashColor']||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x1be3e5(0xa66)](this['_flashColor']),this[_0x1be3e5(0x585)]=_0x8f5ae[_0x1be3e5(0x226)]||0x0;const _0x518fcc=this['fontSize'](),_0x46769a=Math[_0x1be3e5(0x627)](_0x518fcc*0x1e),_0x18a76b=this[_0x1be3e5(0xc34)](_0x46769a,_0x518fcc);_0x18a76b[_0x1be3e5(0x1e6)][_0x1be3e5(0x8d2)]=ColorManager['getColor'](_0x8f5ae['textColor']),_0x18a76b[_0x1be3e5(0x1e6)][_0x1be3e5(0x748)](_0x200554,0x0,0x0,_0x46769a,_0x518fcc,_0x1be3e5(0xbe8)),_0x18a76b['dy']=0x0;},Sprite_Damage['prototype'][_0x4376f0(0x20c)]=function(_0x19a4e9,_0x2defc9,_0x327287){const _0x50ea1c=_0x4376f0,_0x20ff35=Math[_0x50ea1c(0xa63)](this['fontSize'](),ImageManager[_0x50ea1c(0xa6b)]),_0x1b83ea=Math[_0x50ea1c(0x627)](_0x20ff35*0x1e),_0x242d82=this[_0x50ea1c(0xc34)](_0x1b83ea,_0x20ff35),_0x4307a0=ImageManager[_0x50ea1c(0x9da)]/0x2,_0x23dfc5=_0x242d82[_0x50ea1c(0x1e6)]['measureTextWidth'](_0x2defc9+'\x20');_0x242d82['bitmap']['textColor']=ColorManager[_0x50ea1c(0xbdb)](_0x327287[_0x50ea1c(0x8d2)]),_0x242d82['bitmap'][_0x50ea1c(0x748)](_0x2defc9,_0x4307a0,0x0,_0x1b83ea-_0x4307a0,_0x20ff35,_0x50ea1c(0xbe8));const _0x56a65d=Math[_0x50ea1c(0x1c6)]((_0x20ff35-ImageManager[_0x50ea1c(0xa6b)])/0x2),_0x8e0c12=_0x1b83ea/0x2-ImageManager[_0x50ea1c(0x9da)]-_0x23dfc5/0x2+_0x4307a0/0x2,_0x114219=ImageManager[_0x50ea1c(0xadc)](_0x50ea1c(0x58c)),_0x13f635=ImageManager['iconWidth'],_0x5b9fca=ImageManager['iconHeight'],_0x1a5b19=_0x19a4e9%0x10*_0x13f635,_0x273dcd=Math['floor'](_0x19a4e9/0x10)*_0x5b9fca;_0x242d82['bitmap']['blt'](_0x114219,_0x1a5b19,_0x273dcd,_0x13f635,_0x5b9fca,_0x8e0c12,_0x56a65d),this[_0x50ea1c(0x9c8)]=_0x327287[_0x50ea1c(0x96f)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x50ea1c(0xa66)](this['_flashColor']),this['_flashDuration']=_0x327287[_0x50ea1c(0x226)]||0x0,_0x242d82['dy']=0x0,_0x327287[_0x50ea1c(0xb66)]&&(_0x242d82['x']+=_0x327287['offsetX']),_0x327287['offsetY']&&(_0x242d82['dy']+=_0x327287[_0x50ea1c(0xad2)]);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xb2b)]=Sprite_Damage[_0x4376f0(0x705)][_0x4376f0(0xc34)],Sprite_Damage[_0x4376f0(0x705)][_0x4376f0(0xc34)]=function(_0x425f90,_0x4633d3){const _0x4736e3=_0x4376f0;return _0x4633d3=Math[_0x4736e3(0x1c6)](_0x4633d3*1.2),VisuMZ[_0x4736e3(0x19c)][_0x4736e3(0xb2b)][_0x4736e3(0x34b)](this,_0x425f90,_0x4633d3);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x14a)]=Sprite_StateIcon['prototype'][_0x4376f0(0x170)],Sprite_StateIcon['prototype']['updateFrame']=function(){const _0xdc2357=_0x4376f0;VisuMZ[_0xdc2357(0x19c)][_0xdc2357(0x14a)][_0xdc2357(0x34b)](this),this[_0xdc2357(0x945)]=this[_0xdc2357(0x590)]>0x0?0xff:0x0;},VisuMZ['BattleCore']['Sprite_Weapon_loadBitmap']=Sprite_Weapon[_0x4376f0(0x705)][_0x4376f0(0xc2e)],Sprite_Weapon[_0x4376f0(0x705)][_0x4376f0(0xc2e)]=function(){const _0x5829ac=_0x4376f0;VisuMZ[_0x5829ac(0x19c)][_0x5829ac(0x95a)][_0x5829ac(0x34b)](this),this[_0x5829ac(0x1e6)]&&(this[_0x5829ac(0x1e6)][_0x5829ac(0xb0e)]=VisuMZ[_0x5829ac(0x19c)][_0x5829ac(0xae8)][_0x5829ac(0x41c)][_0x5829ac(0xab4)]);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x1bb)]=Sprite_Gauge[_0x4376f0(0x705)][_0x4376f0(0xbcb)],Sprite_Gauge['prototype'][_0x4376f0(0xbcb)]=function(){const _0x54a4b7=_0x4376f0;return this['_statusType']!=='time'?VisuMZ[_0x54a4b7(0x19c)]['Settings'][_0x54a4b7(0x522)][_0x54a4b7(0x142)]??0x14:VisuMZ['BattleCore'][_0x54a4b7(0x1bb)][_0x54a4b7(0x34b)](this);};function Sprite_GaugeRate(){const _0x35f6a2=_0x4376f0;this[_0x35f6a2(0x72f)](...arguments);}Sprite_GaugeRate['prototype']=Object[_0x4376f0(0xbdd)](Sprite_Gauge[_0x4376f0(0x705)]),Sprite_GaugeRate['prototype']['constructor']=Sprite_GaugeRate,Sprite_GaugeRate[_0x4376f0(0x705)]['initialize']=function(){const _0x514a16=_0x4376f0;Sprite_Gauge[_0x514a16(0x705)][_0x514a16(0x72f)]['call'](this),this[_0x514a16(0x5aa)]=![];},Sprite_GaugeRate[_0x4376f0(0x705)][_0x4376f0(0x9fa)]=function(_0xdae9a7,_0x547de8){const _0x1c303d=_0x4376f0;this[_0x1c303d(0x5aa)]=!![],Sprite_Gauge[_0x1c303d(0x705)]['updateTargetValue'][_0x1c303d(0x34b)](this,_0xdae9a7,_0x547de8),this[_0x1c303d(0x5aa)]=![];},Sprite_GaugeRate[_0x4376f0(0x705)][_0x4376f0(0xb89)]=function(){const _0x527f4c=_0x4376f0;if(this['_updateTargetValue']){const _0x468a4e=Sprite_Gauge[_0x527f4c(0x705)][_0x527f4c(0xb89)][_0x527f4c(0x34b)](this),_0x49587a=this[_0x527f4c(0x32e)]();if(_0x49587a<=0x0)return _0x527f4c(0x7ee);return Math[_0x527f4c(0x627)](_0x468a4e/_0x49587a*0x64)+'%';}else return Sprite_Gauge['prototype'][_0x527f4c(0xb89)][_0x527f4c(0x34b)](this);},Sprite_GaugeRate[_0x4376f0(0x705)][_0x4376f0(0xb58)]=function(){const _0x5748e6=_0x4376f0,_0x556d7b=Sprite_Gauge[_0x5748e6(0x705)][_0x5748e6(0xb89)][_0x5748e6(0x34b)](this),_0x4f2979=this[_0x5748e6(0x32e)]();if(_0x4f2979<=0x0)return _0x5748e6(0x7ee);return Math['floor'](_0x556d7b/_0x4f2979*0x64)+'%';},Sprite_GaugeRate[_0x4376f0(0x705)]['gaugeRate']=function(){const _0xdf78ee=_0x4376f0;if(this[_0xdf78ee(0x32e)]()<=0x0)return 0x1;return Sprite_Gauge[_0xdf78ee(0x705)]['gaugeRate'][_0xdf78ee(0x34b)](this);},Sprite_GaugeRate[_0x4376f0(0x705)][_0x4376f0(0x586)]=function(){const _0x36821f=_0x4376f0;if(this[_0x36821f(0x32e)]()<=0x0)return ColorManager[_0x36821f(0x7f3)]();return Sprite_Gauge['prototype'][_0x36821f(0x586)][_0x36821f(0x34b)](this);},Sprite_GaugeRate[_0x4376f0(0x705)][_0x4376f0(0x4e1)]=function(){const _0x324883=_0x4376f0;this[_0x324883(0xb85)]==='mp'&&this[_0x324883(0x32e)]()<=0x0&&($gameTemp[_0x324883(0x495)]=!![]),Sprite_Gauge[_0x324883(0x705)][_0x324883(0x4e1)][_0x324883(0x34b)](this),$gameTemp['redrawForGaugeRate']=undefined;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa37)]=ColorManager[_0x4376f0(0x885)],ColorManager['mpColor']=function(_0x3a8401){const _0x4c2533=_0x4376f0;if($gameTemp[_0x4c2533(0x495)])return ColorManager['normalColor']();return VisuMZ[_0x4c2533(0x19c)][_0x4c2533(0xa37)]['call'](this,_0x3a8401);};function Sprite_HpGauge(){const _0x255f7d=_0x4376f0;this[_0x255f7d(0x72f)](...arguments);}Sprite_HpGauge[_0x4376f0(0x705)]=Object[_0x4376f0(0xbdd)](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x4376f0(0x705)][_0x4376f0(0xa32)]=Sprite_HpGauge,Sprite_HpGauge[_0x4376f0(0x705)][_0x4376f0(0x72f)]=function(){const _0x1fb15d=_0x4376f0;Sprite_Gauge[_0x1fb15d(0x705)][_0x1fb15d(0x72f)]['call'](this);},Sprite_HpGauge[_0x4376f0(0x705)][_0x4376f0(0xa97)]=function(){return 0x0;},Sprite_HpGauge[_0x4376f0(0x705)][_0x4376f0(0x4e1)]=function(){const _0x4e77e7=_0x4376f0;this[_0x4e77e7(0x1e6)][_0x4e77e7(0x976)]();const _0x266a1c=this['currentValue']();!isNaN(_0x266a1c)&&this[_0x4e77e7(0x6cb)]();};function Sprite_EnemyName(){const _0x46c009=_0x4376f0;this[_0x46c009(0x72f)](...arguments);}Sprite_EnemyName[_0x4376f0(0x705)]=Object['create'](Sprite_Name[_0x4376f0(0x705)]),Sprite_EnemyName['prototype'][_0x4376f0(0xa32)]=Sprite_EnemyName,Sprite_EnemyName['prototype'][_0x4376f0(0x72f)]=function(){const _0x26cfba=_0x4376f0;Sprite_Name[_0x26cfba(0x705)][_0x26cfba(0x72f)][_0x26cfba(0x34b)](this),this['createAttachedSprites']();},Sprite_EnemyName['prototype'][_0x4376f0(0x5e8)]=function(){const _0x47a250=_0x4376f0;Sprite_Name[_0x47a250(0x705)]['initMembers']['call'](this),this[_0x47a250(0x945)]=0x0,this[_0x47a250(0x5dd)]=null,this[_0x47a250(0x7cf)]['x']=0.5,this[_0x47a250(0x7cf)]['y']=0x0;},Sprite_EnemyName['prototype'][_0x4376f0(0x4f8)]=function(){const _0x36151c=_0x4376f0;VisuMZ[_0x36151c(0x19c)]['Settings'][_0x36151c(0x653)]['NameAttachStateIcon']&&(this[_0x36151c(0x49d)]=new Sprite_StateIcon(),this[_0x36151c(0x3e4)](this[_0x36151c(0x49d)]));},Sprite_EnemyName['prototype']['bitmapWidth']=function(){const _0x373dff=_0x4376f0;return Graphics[_0x373dff(0x375)];},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0xb20)]=function(){const _0x2abe89=_0x4376f0;return this[_0x2abe89(0x87d)]=this[_0x2abe89(0x87d)]||Window_Base[_0x2abe89(0x705)][_0x2abe89(0x552)]()||0x24,this[_0x2abe89(0x87d)]*0x4;},Sprite_EnemyName[_0x4376f0(0x705)]['fontSize']=function(){const _0xbb84f4=_0x4376f0;return VisuMZ[_0xbb84f4(0x19c)][_0xbb84f4(0xae8)][_0xbb84f4(0x653)][_0xbb84f4(0x6c6)]||$gameSystem[_0xbb84f4(0x7f9)]();},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0xa1f)]=function(_0x52adc9){const _0x5c1494=_0x4376f0;this[_0x5c1494(0x5dd)]=_0x52adc9;},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x75b)]=function(){const _0x267ed5=_0x4376f0;Sprite_Name[_0x267ed5(0x705)][_0x267ed5(0x75b)][_0x267ed5(0x34b)](this),this[_0x267ed5(0x67a)](),this['updatePosition'](),this[_0x267ed5(0x42d)](),this[_0x267ed5(0xc47)]();},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x4e1)]=function(){const _0x3f3d3b=_0x4376f0;this[_0x3f3d3b(0x78b)]=undefined;const _0x39bd6c=this[_0x3f3d3b(0x7d3)](),_0x5ca15e=this[_0x3f3d3b(0x1df)](),_0x40422b=Window_Base['prototype'][_0x3f3d3b(0x552)]();this[_0x3f3d3b(0xa75)](),this[_0x3f3d3b(0x1e6)][_0x3f3d3b(0x976)](),this[_0x3f3d3b(0x1e6)]['drawText'](_0x39bd6c,0x0,0x0,_0x5ca15e,_0x40422b,_0x3f3d3b(0xbe8));},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x67a)]=function(){const _0xca2220=_0x4376f0;if(!this[_0xca2220(0x5dd)])return;this[_0xca2220(0x39a)]!==this[_0xca2220(0x5dd)][_0xca2220(0x39a)]&&this['setup'](this[_0xca2220(0x5dd)]['_battler']);},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x68f)]=function(){const _0x496aaa=_0x4376f0;if(!this[_0x496aaa(0x5dd)])return;this[_0x496aaa(0x87d)]=this[_0x496aaa(0x87d)]||Window_Base[_0x496aaa(0x705)]['lineHeight'](),this['x']=Math[_0x496aaa(0x1c6)](this['_linkedSprite'][_0x496aaa(0x4f3)]),this['y']=Math[_0x496aaa(0x1c6)](this[_0x496aaa(0x5dd)]['_baseY']-this[_0x496aaa(0x87d)]*0.5);const _0x328b53=VisuMZ[_0x496aaa(0x19c)][_0x496aaa(0xae8)][_0x496aaa(0x653)];this['x']+=Math[_0x496aaa(0x1c6)](_0x328b53[_0x496aaa(0x448)]||0x0),this['y']+=Math['round'](_0x328b53[_0x496aaa(0x666)]||0x0);},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x42d)]=function(){const _0x121003=_0x4376f0;this[_0x121003(0xa31)]();},Sprite_EnemyName['prototype'][_0x4376f0(0xa31)]=function(){const _0x31a92f=_0x4376f0;if(!this[_0x31a92f(0x49d)])return;this[_0x31a92f(0x39a)]!==this[_0x31a92f(0x49d)][_0x31a92f(0x39a)]&&this[_0x31a92f(0x49d)][_0x31a92f(0x578)](this[_0x31a92f(0x39a)]);const _0x12888a=this[_0x31a92f(0x2ac)]();this[_0x31a92f(0x87d)]=this[_0x31a92f(0x87d)]||Window_Base[_0x31a92f(0x705)][_0x31a92f(0x552)](),this[_0x31a92f(0x49d)]['x']=Math['round']((_0x12888a+ImageManager[_0x31a92f(0x9da)])/0x2)+0x8,this[_0x31a92f(0x49d)]['y']=this[_0x31a92f(0x87d)]/0x2;const _0x4a1c0a=VisuMZ[_0x31a92f(0x19c)]['Settings'][_0x31a92f(0x653)];this[_0x31a92f(0x49d)]['x']+=_0x4a1c0a[_0x31a92f(0x7a6)]||0x0,this[_0x31a92f(0x49d)]['y']+=_0x4a1c0a[_0x31a92f(0x93f)]||0x0;},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0xc47)]=function(){const _0x780838=_0x4376f0,_0xcba468=this[_0x780838(0x470)]();if(_0xcba468&&this['opacity']<0xff)this[_0x780838(0x945)]+=0x10;else!_0xcba468&&this['opacity']>0x0&&(this[_0x780838(0x945)]-=0x10);},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x470)]=function(){const _0x5fa573=_0x4376f0;if(this[_0x5fa573(0x3b5)]())return![];else{if(!this[_0x5fa573(0x39a)])return![];else{if(!this['_battler'][_0x5fa573(0x41e)]())return![];else{if(this[_0x5fa573(0x655)]())return!![];else{if(this[_0x5fa573(0x39a)][_0x5fa573(0x57e)]())return![];else{if(this[_0x5fa573(0x94b)]())return!![];else{if(this[_0x5fa573(0xaf1)]())return!![];else{if(this[_0x5fa573(0x34c)]())return!![];else{if(this[_0x5fa573(0xaa1)]())return!![];else{if(this[_0x5fa573(0x945)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName['prototype'][_0x4376f0(0x655)]=function(){return this['_battler']&&this['_battler']['isNameTemporarilyVisible']();},Sprite_EnemyName['prototype'][_0x4376f0(0x3b5)]=function(){const _0x28eda0=_0x4376f0;return VisuMZ[_0x28eda0(0x19c)][_0x28eda0(0xae8)][_0x28eda0(0x653)][_0x28eda0(0x74f)];},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x94b)]=function(){const _0x572578=_0x4376f0;if(!VisuMZ[_0x572578(0x19c)][_0x572578(0xae8)][_0x572578(0x653)][_0x572578(0x3ed)])return![];if(BattleManager[_0x572578(0x671)]()&&!BattleManager['isActiveTpb']())return![];return this['_battler']&&BattleManager[_0x572578(0x3f8)]&&BattleManager['_targets']['includes'](this[_0x572578(0x39a)]);},Sprite_EnemyName[_0x4376f0(0x705)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x34c)]=function(){const _0x4eecf0=_0x4376f0;return VisuMZ['BattleCore'][_0x4eecf0(0xae8)][_0x4eecf0(0x653)][_0x4eecf0(0x794)];},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0xaa1)]=function(){const _0x12190d=_0x4376f0;return VisuMZ['BattleCore'][_0x12190d(0xae8)][_0x12190d(0x653)][_0x12190d(0x186)]?this['_battler'][_0x12190d(0x90c)]():SceneManager[_0x12190d(0x982)]['_enemyWindow']&&SceneManager[_0x12190d(0x982)]['_enemyWindow'][_0x12190d(0xb71)]&&SceneManager[_0x12190d(0x982)][_0x12190d(0x1d8)][_0x12190d(0x2e9)][_0x12190d(0x3e9)](this[_0x12190d(0x39a)]);},Sprite_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x2ac)]=function(){const _0xbe1928=_0x4376f0;if(!this[_0xbe1928(0x39a)])return 0x0;if(this[_0xbe1928(0x78b)])return this[_0xbe1928(0x78b)];let _0xe99c93=this[_0xbe1928(0x7d3)]();return this[_0xbe1928(0xa75)](),Imported['VisuMZ_1_MessageCore']&&TextManager[_0xbe1928(0xb8b)]&&(_0xe99c93=TextManager[_0xbe1928(0xb8b)](_0xe99c93)),this[_0xbe1928(0x78b)]=this[_0xbe1928(0x1e6)]['measureTextWidth'](_0xe99c93)||0x1,this['_cacheTextWidth'];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xb78)]=Sprite_Battleback[_0x4376f0(0x705)]['adjustPosition'],Sprite_Battleback[_0x4376f0(0x705)][_0x4376f0(0x855)]=function(){const _0x2ade70=_0x4376f0,_0x4bf7d5=VisuMZ['BattleCore'][_0x2ade70(0xae8)][_0x2ade70(0x59c)];if(!_0x4bf7d5)return VisuMZ[_0x2ade70(0x19c)][_0x2ade70(0xb78)]['call'](this);const _0x139814=String(_0x4bf7d5[_0x2ade70(0x547)])||'MZ';switch(_0x139814){case'MZ':VisuMZ[_0x2ade70(0x19c)]['Sprite_Battleback_adjustPosition'][_0x2ade70(0x34b)](this);break;case _0x2ade70(0x963):this['adjustPosition_1for1']();break;case _0x2ade70(0x8c3):this[_0x2ade70(0x807)]();break;case _0x2ade70(0x9d8):this[_0x2ade70(0x96a)]();break;case _0x2ade70(0x29a):this[_0x2ade70(0x161)]();break;}},Sprite_Battleback[_0x4376f0(0x705)][_0x4376f0(0x779)]=function(){const _0xa98a47=_0x4376f0,_0x50b12c=VisuMZ[_0xa98a47(0x19c)][_0xa98a47(0xae8)][_0xa98a47(0x59c)];if(_0x50b12c&&_0x50b12c[_0xa98a47(0xa0b)])return _0x50b12c[_0xa98a47(0xa0b)][_0xa98a47(0x34b)](this);this['width']=Graphics[_0xa98a47(0x895)],this[_0xa98a47(0x399)]=Graphics[_0xa98a47(0x399)];const _0x471ce0=0x1;this[_0xa98a47(0xc02)]['x']=_0x471ce0,this['scale']['y']=_0x471ce0,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x4376f0(0x705)][_0x4376f0(0x807)]=function(){const _0x2c76f9=_0x4376f0,_0x13b413=VisuMZ[_0x2c76f9(0x19c)]['Settings'][_0x2c76f9(0x59c)];if(_0x13b413&&_0x13b413[_0x2c76f9(0x1e7)])return _0x13b413[_0x2c76f9(0x1e7)]['call'](this);this['width']=Graphics[_0x2c76f9(0x895)],this[_0x2c76f9(0x399)]=Graphics[_0x2c76f9(0x399)];const _0x3afd86=this[_0x2c76f9(0x895)]/this[_0x2c76f9(0x1e6)][_0x2c76f9(0x895)],_0x3cd3f5=this[_0x2c76f9(0x399)]/this['bitmap'][_0x2c76f9(0x399)],_0x518852=Math[_0x2c76f9(0xa63)](_0x3afd86,_0x3cd3f5);this[_0x2c76f9(0xc02)]['x']=_0x518852,this['scale']['y']=_0x518852,this['x']=(Graphics[_0x2c76f9(0x895)]-this['width'])/0x2,this['y']=Graphics[_0x2c76f9(0x399)]-this[_0x2c76f9(0x399)];},Sprite_Battleback[_0x4376f0(0x705)]['adjustPosition_ScaleDown']=function(){const _0x5d39b3=_0x4376f0,_0x56259e=VisuMZ[_0x5d39b3(0x19c)][_0x5d39b3(0xae8)][_0x5d39b3(0x59c)];if(_0x56259e&&_0x56259e['jsScaleDown'])return _0x56259e[_0x5d39b3(0x851)][_0x5d39b3(0x34b)](this);this['width']=Graphics[_0x5d39b3(0x895)],this['height']=Graphics[_0x5d39b3(0x399)];const _0x23907d=Math[_0x5d39b3(0x136)](0x1,this[_0x5d39b3(0x895)]/this['bitmap'][_0x5d39b3(0x895)]),_0x1c45e5=Math[_0x5d39b3(0x136)](0x1,this[_0x5d39b3(0x399)]/this[_0x5d39b3(0x1e6)][_0x5d39b3(0x399)]),_0x1db715=Math['max'](_0x23907d,_0x1c45e5);this[_0x5d39b3(0xc02)]['x']=_0x1db715,this[_0x5d39b3(0xc02)]['y']=_0x1db715,this['x']=(Graphics[_0x5d39b3(0x895)]-this[_0x5d39b3(0x895)])/0x2,this['y']=Graphics[_0x5d39b3(0x399)]-this['height'];},Sprite_Battleback['prototype'][_0x4376f0(0x161)]=function(){const _0x3cf2f3=_0x4376f0,_0x1d11b9=VisuMZ[_0x3cf2f3(0x19c)][_0x3cf2f3(0xae8)][_0x3cf2f3(0x59c)];if(_0x1d11b9&&_0x1d11b9[_0x3cf2f3(0x3c6)])return _0x1d11b9['jsScaleUp'][_0x3cf2f3(0x34b)](this);this[_0x3cf2f3(0x895)]=Graphics[_0x3cf2f3(0x895)],this[_0x3cf2f3(0x399)]=Graphics['height'];const _0x30a788=Math[_0x3cf2f3(0xa63)](0x1,this[_0x3cf2f3(0x895)]/this[_0x3cf2f3(0x1e6)]['width']),_0x2f3b7c=Math[_0x3cf2f3(0xa63)](0x1,this[_0x3cf2f3(0x399)]/this[_0x3cf2f3(0x1e6)][_0x3cf2f3(0x399)]),_0x8946c1=Math[_0x3cf2f3(0xa63)](_0x30a788,_0x2f3b7c);this[_0x3cf2f3(0xc02)]['x']=_0x8946c1,this[_0x3cf2f3(0xc02)]['y']=_0x8946c1,this['x']=(Graphics['width']-this['width'])/0x2,this['y']=Graphics[_0x3cf2f3(0x399)]-this[_0x3cf2f3(0x399)];},Spriteset_Battle[_0x4376f0(0x356)]=VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x1a6)]['AntiTintUiElements']??!![],Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x7c8)]=function(){const _0x16a67a=_0x4376f0;if(!$gameSystem[_0x16a67a(0x245)]())return![];return![];},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0xc26)]=function(){return 0x0;},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x8ce)]=function(){return 0x0;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x2ff)]=Spriteset_Battle[_0x4376f0(0x705)]['createLowerLayer'],Spriteset_Battle['prototype'][_0x4376f0(0x64a)]=function(){const _0x5c0204=_0x4376f0;VisuMZ[_0x5c0204(0x19c)][_0x5c0204(0x2ff)][_0x5c0204(0x34b)](this),this['createWeather'](),this[_0x5c0204(0x650)]();},VisuMZ['BattleCore'][_0x4376f0(0x66b)]=Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x75b)],Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x75b)]=function(){const _0x12509c=_0x4376f0;VisuMZ[_0x12509c(0x19c)][_0x12509c(0x66b)][_0x12509c(0x34b)](this),this[_0x12509c(0xa7c)](),this[_0x12509c(0x612)](),this[_0x12509c(0x2d4)](),this[_0x12509c(0x8f0)]();},Spriteset_Battle[_0x4376f0(0x705)]['createWeather']=function(){const _0x381957=_0x4376f0;this[_0x381957(0xb0c)]=new Weather(),this['_battleField']['addChild'](this['_weather']);},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x2d4)]=function(){const _0x5b08d5=_0x4376f0;this[_0x5b08d5(0xb0c)][_0x5b08d5(0x2a6)]=$gameScreen['weatherType'](),this['_weather'][_0x5b08d5(0x422)]=$gameScreen[_0x5b08d5(0xa5f)]();},Game_Interpreter[_0x4376f0(0x705)]['command236']=function(_0x39d38a){const _0x4d3556=_0x4376f0;$gameScreen['changeWeather'](_0x39d38a[0x0],_0x39d38a[0x1],_0x39d38a[0x2]);if(_0x39d38a[0x3])this[_0x4d3556(0xc3e)](_0x39d38a[0x2]);return!![];},VisuMZ['BattleCore']['Game_Interpreter_command283']=Game_Interpreter['prototype']['command283'],Game_Interpreter[_0x4376f0(0x705)]['command283']=function(_0x1f5fce){const _0x4bebb2=_0x4376f0;return VisuMZ[_0x4bebb2(0x19c)][_0x4bebb2(0x8e8)]['call'](this,_0x1f5fce),SceneManager[_0x4bebb2(0x446)]()&&SceneManager[_0x4bebb2(0x982)][_0x4bebb2(0x86d)][_0x4bebb2(0x596)](_0x1f5fce[0x0],_0x1f5fce[0x1]),!![];},Sprite_Battleback['prototype'][_0x4376f0(0x5fa)]=function(){const _0x50fc4d=_0x4376f0;if($gameMap[_0x50fc4d(0x5fa)]()!==null)return $gameMap['battleback1Name']();else{if(BattleManager['isBattleTest']())return $dataSystem[_0x50fc4d(0x5fa)];else return $gameMap[_0x50fc4d(0x865)]()?this[_0x50fc4d(0xc21)]():'';}},Sprite_Battleback[_0x4376f0(0x705)][_0x4376f0(0xb42)]=function(){const _0x47502e=_0x4376f0;if($gameMap[_0x47502e(0xb42)]()!==null)return $gameMap[_0x47502e(0xb42)]();else{if(BattleManager[_0x47502e(0x6b8)]())return $dataSystem[_0x47502e(0xb42)];else return $gameMap[_0x47502e(0x865)]()?this[_0x47502e(0x725)]():'';}},Spriteset_Battle[_0x4376f0(0x705)]['updateBattlebackBitmap']=function(_0x50443b,_0x517cd4){const _0x450a56=_0x4376f0;_0x50443b[_0x450a56(0x1e6)]=_0x517cd4;},Spriteset_Battle['prototype'][_0x4376f0(0x596)]=function(_0x1156d1,_0x1dcd8e){const _0x598475=_0x4376f0;_0x1156d1=_0x1156d1||'',_0x1dcd8e=_0x1dcd8e||'';_0x1156d1===''&&_0x1dcd8e===''&&(_0x1156d1=this['_back1Sprite'][_0x598475(0x5fa)](),_0x1dcd8e=this[_0x598475(0x44f)][_0x598475(0xb42)]());const _0x3a00c9=ImageManager[_0x598475(0x11e)](_0x1156d1),_0x58ce97=ImageManager['loadBattleback2'](_0x1dcd8e);_0x3a00c9[_0x598475(0x6ff)](this[_0x598475(0xc31)][_0x598475(0x54e)](this,this[_0x598475(0xc1d)],this[_0x598475(0x44f)],_0x3a00c9,_0x58ce97));},Spriteset_Battle[_0x4376f0(0x705)]['updateBattlebackBitmap1']=function(_0x3d8430,_0x3d5c42,_0x1233e5,_0x53509c){const _0x13df16=_0x4376f0;_0x53509c[_0x13df16(0x6ff)](this[_0x13df16(0xb3e)]['bind'](this,_0x3d8430,_0x3d5c42,_0x1233e5,_0x53509c));},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0xb3e)]=function(_0x1eb61d,_0x303fed,_0x289543,_0x2f5929){const _0x503df2=_0x4376f0;_0x1eb61d[_0x503df2(0x1e6)]=_0x289543,_0x303fed[_0x503df2(0x1e6)]=_0x2f5929,_0x1eb61d[_0x503df2(0x855)](),_0x303fed[_0x503df2(0x855)]();},VisuMZ[_0x4376f0(0x19c)]['Spriteset_Battle_createBattleField']=Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x59a)],Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x59a)]=function(){const _0x26bb15=_0x4376f0;VisuMZ[_0x26bb15(0x19c)]['Spriteset_Battle_createBattleField']['call'](this),this[_0x26bb15(0x4c6)]();},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x4c6)]=function(){const _0x433609=_0x4376f0;this['createBattleFieldContainer'](),this[_0x433609(0x359)](),this[_0x433609(0x980)](),this[_0x433609(0x12e)](),this['adjustFlippedBattlefield']();},Spriteset_Battle[_0x4376f0(0x705)]['createBattleFieldContainer']=function(){const _0x467c32=_0x4376f0;this[_0x467c32(0xa1b)]=new Sprite(),this['_battleField'][_0x467c32(0x3e4)](this[_0x467c32(0xa1b)]),this['_battlerContainer']=new Sprite(),this[_0x467c32(0x5ab)][_0x467c32(0x3e4)](this[_0x467c32(0xc19)]);},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x980)]=function(){const _0xa2628a=_0x4376f0;this['_animationContainer']=new Sprite(),Spriteset_Battle[_0xa2628a(0x356)]?this[_0xa2628a(0x3e4)](this[_0xa2628a(0x20e)]):this['_battleField']['addChild'](this[_0xa2628a(0x20e)]);},Spriteset_Battle['prototype'][_0x4376f0(0x12e)]=function(){const _0x3ba000=_0x4376f0;this['_damageContainer']=new Sprite(),this['_damageContainer']['x']=this['_battleField']['x'],this[_0x3ba000(0x4b7)]['y']=this[_0x3ba000(0x5ab)]['y'],this['addChild'](this[_0x3ba000(0x4b7)]);},Spriteset_Battle['prototype'][_0x4376f0(0x4d4)]=function(){const _0x583954=_0x4376f0;if(!this[_0x583954(0x7c8)]())return;this[_0x583954(0xc19)][_0x583954(0xc02)]['x']=-0x1,this['_battlerContainer']['x']=this[_0x583954(0x5ab)][_0x583954(0x895)],this[_0x583954(0x665)][_0x583954(0xc02)]['x']=-0x1,this[_0x583954(0x665)]['x']=this['_battleField'][_0x583954(0x895)],this[_0x583954(0x20e)][_0x583954(0xc02)]['x']=-0x1,this['_animationContainer']['x']=this[_0x583954(0x5ab)][_0x583954(0x895)],this[_0x583954(0x4b7)][_0x583954(0xc02)]['x']=-0x1,this[_0x583954(0x4b7)]['x']=this[_0x583954(0x5ab)]['x']+this['_battleField']['width'];},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x562)]=function(){const _0x519f76=_0x4376f0;Imported[_0x519f76(0x7ba)]&&this[_0x519f76(0x681)]()&&this[_0x519f76(0x69d)]();const _0x41ce17=$gameTroop[_0x519f76(0x277)](),_0xf2c41b=[];for(const _0x45b884 of _0x41ce17){_0xf2c41b['push'](new Sprite_Enemy(_0x45b884));}_0xf2c41b['sort'](this['compareEnemySprite']['bind'](this));for(const _0x3de292 of _0xf2c41b){this['_battlerContainer'][_0x519f76(0x3e4)](_0x3de292);}this[_0x519f76(0x978)]=_0xf2c41b;},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x172)]=function(){const _0x14a33d=_0x4376f0;this[_0x14a33d(0xabd)]=[];for(let _0x59589a=0x0;_0x59589a<$gameParty[_0x14a33d(0x30a)]();_0x59589a++){const _0x5da0d0=$gameParty[_0x14a33d(0x276)]()[_0x59589a],_0x59c3a3=new Sprite_Actor();_0x59c3a3[_0x14a33d(0xab0)](_0x5da0d0),_0x59c3a3[_0x14a33d(0x6e8)](_0x5da0d0),_0x59c3a3['update'](),this['_actorSprites'][_0x14a33d(0x6b0)](_0x59c3a3),this[_0x14a33d(0xc19)]['addChild'](_0x59c3a3);}},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x3d8)]=function(_0x59ceb4,_0x1c0de7,_0x39157e,_0x36f694){const _0x4f4197=_0x4376f0,_0x40bfd4=this['isMVAnimation'](_0x1c0de7),_0x18cf44=new(_0x40bfd4?Sprite_AnimationMV:Sprite_Animation)(),_0x2790e9=this[_0x4f4197(0x689)](_0x59ceb4);this[_0x4f4197(0x5ad)](_0x59ceb4[0x0])&&(_0x39157e=!_0x39157e),_0x18cf44[_0x4f4197(0x652)]=_0x59ceb4,_0x18cf44[_0x4f4197(0x578)](_0x2790e9,_0x1c0de7,_0x39157e,_0x36f694),this[_0x4f4197(0x5c2)](_0x18cf44);},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x5c2)]=function(_0x5a1fa2){const _0x21bedf=_0x4376f0;this[_0x21bedf(0xbb8)](_0x5a1fa2)?(this[_0x21bedf(0xbc6)]()[_0x21bedf(0x3e4)](_0x5a1fa2),_0x5a1fa2[_0x21bedf(0x87f)]=!![]):(Spriteset_Battle['ANTI_TINT_UI']&&(this[_0x21bedf(0x20e)]['x']=this['_effectsContainer']['x'],this[_0x21bedf(0x20e)]['y']=this[_0x21bedf(0xa8e)]['y']),this[_0x21bedf(0xa1b)]&&_0x5a1fa2[_0x21bedf(0x6eb)]&&_0x5a1fa2[_0x21bedf(0x6eb)]()?(this[_0x21bedf(0xa1b)][_0x21bedf(0x3e4)](_0x5a1fa2),this['_underAnimationContainer']['x']=this[_0x21bedf(0x20e)]['x'],this[_0x21bedf(0xa1b)]['y']=this[_0x21bedf(0x20e)]['y']):this[_0x21bedf(0x20e)][_0x21bedf(0x3e4)](_0x5a1fa2)),this[_0x21bedf(0x6b6)][_0x21bedf(0x6b0)](_0x5a1fa2);},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0xbb8)]=function(_0x55f594){const _0x1e1d86=_0x4376f0;if(!_0x55f594)return![];if(!_0x55f594[_0x1e1d86(0x62e)])return![];if(!_0x55f594[_0x1e1d86(0x652)][0x0])return![];if(_0x55f594['targetObjects'][0x0][_0x1e1d86(0xb9d)]&&!_0x55f594[_0x1e1d86(0x652)][0x0][_0x1e1d86(0xb9d)]())return![];if($gameSystem[_0x1e1d86(0x245)]())return![];if(!this[_0x1e1d86(0xbc6)]())return![];if(_0x55f594[_0x1e1d86(0xa32)]===Sprite_Animation){const _0x220010=VisuMZ[_0x1e1d86(0x19c)][_0x1e1d86(0xae8)][_0x1e1d86(0x41c)];_0x220010[_0x1e1d86(0x2e0)]=_0x220010[_0x1e1d86(0x2e0)]??!![];if(_0x55f594[_0x1e1d86(0x62e)][_0x1e1d86(0x179)]===0x0&&!_0x220010['FvAniEachTarget'])return![];_0x220010['FvAniCenterAll']=_0x220010[_0x1e1d86(0x39d)]??!![];if(_0x55f594[_0x1e1d86(0x62e)][_0x1e1d86(0x179)]===0x1&&!_0x220010['FvAniCenterAll'])return![];_0x220010[_0x1e1d86(0x2cd)]=_0x220010['FvAniCenterScreen']??![];if(_0x55f594[_0x1e1d86(0x62e)][_0x1e1d86(0x179)]===0x2&&!_0x220010[_0x1e1d86(0x2cd)])return![];}else{if(_0x55f594['constructor']===Sprite_AnimationMV){if(_0x55f594[_0x1e1d86(0x62e)][_0x1e1d86(0x6ac)]===0x3)return![];}}return!![];const _0x2df16a=Window_BattleStatus[_0x1e1d86(0x705)][_0x1e1d86(0x6c1)]();return['xp',_0x1e1d86(0xaf9)][_0x1e1d86(0x981)](_0x2df16a);},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0xbc6)]=function(){const _0x8e6f2a=_0x4376f0;if(!SceneManager['_scene'])return null;if(!SceneManager[_0x8e6f2a(0x982)][_0x8e6f2a(0xad4)])return null;if(!SceneManager['_scene'][_0x8e6f2a(0xad4)][_0x8e6f2a(0xa8e)])return null;return SceneManager['_scene']['_statusWindow']['_effectsContainer'];},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0xb5c)]=function(_0xffc188){const _0x3355ae=_0x4376f0;this[_0x3355ae(0x804)](_0xffc188);for(const _0x5537ca of _0xffc188[_0x3355ae(0x652)]){_0x5537ca[_0x3355ae(0x1bd)]&&_0x5537ca[_0x3355ae(0x1bd)]();}_0xffc188[_0x3355ae(0x450)]();},Spriteset_Battle['prototype'][_0x4376f0(0x804)]=function(_0x1c0cd9){const _0x4ab4cb=_0x4376f0;this['isAnimationShownOnBattlePortrait'](_0x1c0cd9)?this['battleStatusWindowAnimationContainer']()[_0x4ab4cb(0x9e3)](_0x1c0cd9):this[_0x4ab4cb(0x20e)][_0x4ab4cb(0x9e3)](_0x1c0cd9);this[_0x4ab4cb(0xa1b)]&&this[_0x4ab4cb(0xa1b)][_0x4ab4cb(0x9e3)](_0x1c0cd9);this[_0x4ab4cb(0xa8e)]['removeChild'](_0x1c0cd9),this[_0x4ab4cb(0x20e)][_0x4ab4cb(0x9e3)](_0x1c0cd9),this[_0x4ab4cb(0x6b6)][_0x4ab4cb(0x246)](_0x1c0cd9);if(this[_0x4ab4cb(0xa05)])this[_0x4ab4cb(0xa05)][_0x4ab4cb(0x246)](_0x1c0cd9);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x9e0)]=Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x947)],Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x947)]=function(){const _0x25ef4a=_0x4376f0;VisuMZ['BattleCore'][_0x25ef4a(0x9e0)][_0x25ef4a(0x34b)](this),this[_0x25ef4a(0xa7c)]();},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0xa7c)]=function(){const _0x224a66=_0x4376f0;this['_battlerContainer']['children'][_0x224a66(0xc3a)](this[_0x224a66(0x5c8)][_0x224a66(0x54e)](this)),this[_0x224a66(0x6ad)]();if(!this[_0x224a66(0xc19)])return;this['_battlerContainer']['opacity']=this[_0x224a66(0x4a0)]();},Spriteset_Battle['prototype']['compareBattlerSprites']=function(_0x338bfb,_0xe2b341){const _0x1e97cc=_0x4376f0;if(VisuMZ['BattleCore'][_0x1e97cc(0xae8)][_0x1e97cc(0x41c)]['PrioritySortActors']){if(_0x338bfb[_0x1e97cc(0x39a)]&&_0xe2b341['_battler']){if(_0x338bfb['_battler'][_0x1e97cc(0xb9d)]()&&_0xe2b341[_0x1e97cc(0x39a)][_0x1e97cc(0x7b4)]())return 0x1;else{if(_0xe2b341[_0x1e97cc(0x39a)][_0x1e97cc(0xb9d)]()&&_0x338bfb[_0x1e97cc(0x39a)][_0x1e97cc(0x7b4)]())return-0x1;}}}return _0x338bfb[_0x1e97cc(0x90f)]!==_0xe2b341[_0x1e97cc(0x90f)]?_0x338bfb[_0x1e97cc(0x90f)]-_0xe2b341[_0x1e97cc(0x90f)]:_0xe2b341[_0x1e97cc(0xa14)]-_0x338bfb['spriteId'];},Spriteset_Battle['prototype'][_0x4376f0(0x6ad)]=function(){const _0x57ebab=_0x4376f0;if(!VisuMZ[_0x57ebab(0x19c)][_0x57ebab(0xae8)]['Actor']['PrioritySortActive'])return;const _0x5a79cf=BattleManager[_0x57ebab(0x3f8)];if(_0x5a79cf){if(_0x5a79cf[_0x57ebab(0xb9d)]()&&!$gameSystem[_0x57ebab(0x245)]())return;if(_0x5a79cf===BattleManager['actor']())return;const _0x5a7f99=_0x5a79cf[_0x57ebab(0x3f1)]();if(_0x5a7f99&&_0x5a79cf[_0x57ebab(0xb9d)]())this[_0x57ebab(0xc19)][_0x57ebab(0x3e4)](_0x5a7f99);}},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x3bd)]=function(){const _0x5e16cd=_0x4376f0;for(const _0x77a9b5 of $gameParty[_0x5e16cd(0x3a7)]()){if(!_0x77a9b5)continue;if(!_0x77a9b5[_0x5e16cd(0x3f1)]())continue;_0x77a9b5[_0x5e16cd(0x3f1)]()[_0x5e16cd(0x5cc)]=!![],_0x77a9b5[_0x5e16cd(0x3f1)]()[_0x5e16cd(0x369)]();}},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x359)]=function(){const _0x29bc9f=_0x4376f0;this[_0x29bc9f(0x665)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x29bc9f(0x3e4)](this[_0x29bc9f(0x665)]):this[_0x29bc9f(0x5ab)]['addChild'](this[_0x29bc9f(0x665)]),SceneManager['_scene'][_0x29bc9f(0x665)]=this[_0x29bc9f(0x665)];},Spriteset_Battle['prototype']['createEnemyNames']=function(){const _0x2312bd=_0x4376f0;if(VisuMZ['BattleCore']['Settings'][_0x2312bd(0x653)][_0x2312bd(0x9ab)])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x2312bd(0x3b7)](this[_0x2312bd(0xbd0)]);for(const _0x169df6 of this[_0x2312bd(0x978)]){const _0x173985=new Sprite_EnemyName();this['_enemyNameContainer']['addChild'](_0x173985),_0x173985[_0x2312bd(0xa1f)](_0x169df6);}},Spriteset_Battle['prototype'][_0x4376f0(0x612)]=function(){const _0x5b761a=_0x4376f0;if(!this[_0x5b761a(0x4b7)])return;if(!this[_0x5b761a(0x665)])return;const _0x331a0f=Spriteset_Battle[_0x5b761a(0x356)]?this['_damageContainer']['x']:0x0,_0x628fb7=Spriteset_Battle[_0x5b761a(0x356)]?this[_0x5b761a(0x4b7)]['y']:0x0,_0x1584dc=Imported[_0x5b761a(0xae3)]?this[_0x5b761a(0x5ab)]['x']:0x0,_0x3148ff=Imported[_0x5b761a(0xae3)]?this[_0x5b761a(0x5ab)]['y']:0x0;this[_0x5b761a(0x665)]['x']=_0x331a0f+_0x1584dc,this[_0x5b761a(0x665)]['y']=_0x628fb7+_0x3148ff;},BattleManager['addChildToUiContainer']=function(_0x2e867e){const _0x494b56=_0x4376f0;if(!SceneManager['_scene'][_0x494b56(0x665)])return;SceneManager[_0x494b56(0x982)][_0x494b56(0x665)][_0x494b56(0x3e4)](_0x2e867e);},BattleManager['removeChildFromUiContainer']=function(_0x51eb87){const _0x37eb3d=_0x4376f0;if(!SceneManager[_0x37eb3d(0x982)][_0x37eb3d(0x665)])return;SceneManager['_scene'][_0x37eb3d(0x665)][_0x37eb3d(0x9e3)](_0x51eb87);},Spriteset_Battle['prototype'][_0x4376f0(0x4a0)]=function(){return 0xff;},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0xa8b)]=function(){return![];},Spriteset_Battle['prototype'][_0x4376f0(0x91a)]=function(){const _0x276241=_0x4376f0;return this['battlerSprites']()[_0x276241(0x4af)](_0x14e05f=>_0x14e05f['isFloating']());},Spriteset_Battle[_0x4376f0(0x705)]['isAnyoneJumping']=function(){const _0x166c1a=_0x4376f0;return this[_0x166c1a(0x5ec)]()[_0x166c1a(0x4af)](_0x6a6452=>_0x6a6452[_0x166c1a(0xa18)]());},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x599)]=function(){const _0x348ff3=_0x4376f0;return this[_0x348ff3(0x5ec)]()[_0x348ff3(0x4af)](_0x1f9f98=>_0x1f9f98[_0x348ff3(0x698)]());},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x331)]=function(){const _0x4e2a80=_0x4376f0;return this['battlerSprites']()[_0x4e2a80(0x4af)](_0x4b1dbd=>_0x4b1dbd[_0x4e2a80(0x500)]());},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0x285)]=function(){const _0x42629c=_0x4376f0;return this[_0x42629c(0x5ec)]()[_0x42629c(0x4af)](_0x33c772=>_0x33c772['isSpinning']());},Spriteset_Battle[_0x4376f0(0x705)][_0x4376f0(0xbcc)]=function(){const _0x15d9e5=_0x4376f0;return this[_0x15d9e5(0x5ec)]()[_0x15d9e5(0x4af)](_0x581b39=>_0x581b39[_0x15d9e5(0x806)]());},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x27e)]=Window_ItemList[_0x4376f0(0x705)]['maxCols'],Window_ItemList['prototype'][_0x4376f0(0x402)]=function(){const _0x2cd9b9=_0x4376f0;return SceneManager[_0x2cd9b9(0x446)]()?SceneManager[_0x2cd9b9(0x982)][_0x2cd9b9(0x6c1)]()===_0x2cd9b9(0x937)?VisuMZ[_0x2cd9b9(0x19c)][_0x2cd9b9(0xae8)]['BattleLayout']['SkillItemBorderCols']:VisuMZ[_0x2cd9b9(0x19c)][_0x2cd9b9(0xae8)][_0x2cd9b9(0x1a6)][_0x2cd9b9(0xa7a)]:VisuMZ[_0x2cd9b9(0x19c)][_0x2cd9b9(0x27e)][_0x2cd9b9(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)]['Window_SkillList_maxCols']=Window_SkillList[_0x4376f0(0x705)]['maxCols'],Window_SkillList['prototype'][_0x4376f0(0x402)]=function(){const _0x4b7010=_0x4376f0;return SceneManager[_0x4b7010(0x446)]()?SceneManager[_0x4b7010(0x982)][_0x4b7010(0x6c1)]()==='border'?VisuMZ[_0x4b7010(0x19c)][_0x4b7010(0xae8)][_0x4b7010(0x1a6)]['SkillItemBorderCols']:VisuMZ[_0x4b7010(0x19c)][_0x4b7010(0xae8)][_0x4b7010(0x1a6)][_0x4b7010(0xa7a)]:VisuMZ[_0x4b7010(0x19c)][_0x4b7010(0x61e)][_0x4b7010(0x34b)](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa10)]=Window_Options[_0x4376f0(0x705)][_0x4376f0(0x72b)],Window_Options[_0x4376f0(0x705)]['addGeneralOptions']=function(){const _0x264d92=_0x4376f0;VisuMZ[_0x264d92(0x19c)][_0x264d92(0xa10)][_0x264d92(0x34b)](this),this[_0x264d92(0x372)](),this[_0x264d92(0x816)]();},Window_Options[_0x4376f0(0x705)][_0x4376f0(0x372)]=function(){const _0x20c65c=_0x4376f0;VisuMZ[_0x20c65c(0x19c)][_0x20c65c(0xae8)][_0x20c65c(0x6d8)]['AddOption']&&(this['addBattleCoreAutoBattleStartupCommand'](),this['addBattleCoreAutoBattleStyleCommand']());},Window_Options[_0x4376f0(0x705)][_0x4376f0(0x816)]=function(){const _0x35ffe1=_0x4376f0;if(!VisuMZ[_0x35ffe1(0x19c)][_0x35ffe1(0xae8)]['HpGauge']['AddHpGaugeOption'])return;const _0x3bb581=TextManager['visualHpGauge'],_0x319233='visualHpGauge';this[_0x35ffe1(0x511)](_0x3bb581,_0x319233);},Window_Options['prototype'][_0x4376f0(0x53f)]=function(){const _0x414d42=_0x4376f0,_0x42af26=TextManager['autoBattleStart'],_0xa42fc1=_0x414d42(0x8ac);this[_0x414d42(0x511)](_0x42af26,_0xa42fc1);},Window_Options[_0x4376f0(0x705)][_0x4376f0(0x261)]=function(){const _0x28712e=_0x4376f0,_0x4d7ec0=TextManager[_0x28712e(0x94c)],_0x1df75f=_0x28712e(0x5c1);this[_0x28712e(0x511)](_0x4d7ec0,_0x1df75f);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x8be)]=Window_Options[_0x4376f0(0x705)][_0x4376f0(0x565)],Window_Options['prototype']['statusText']=function(_0x14fc94){const _0x3a810f=_0x4376f0,_0x24fe55=this[_0x3a810f(0x491)](_0x14fc94);return _0x24fe55==='autoBattleUseSkills'?this[_0x3a810f(0x866)]():VisuMZ[_0x3a810f(0x19c)]['Window_Options_statusText'][_0x3a810f(0x34b)](this,_0x14fc94);},Window_Options[_0x4376f0(0x705)][_0x4376f0(0x866)]=function(){const _0x4ea20f=_0x4376f0,_0x1c8553=VisuMZ[_0x4ea20f(0x19c)]['Settings'][_0x4ea20f(0x6d8)],_0x1d5ec3=this[_0x4ea20f(0xa9b)](_0x4ea20f(0x5c1));return _0x1d5ec3?_0x1c8553[_0x4ea20f(0xbbd)]:_0x1c8553[_0x4ea20f(0x3d0)];},Window_ShopStatus[_0x4376f0(0x705)][_0x4376f0(0x931)]=function(){const _0x53b11c=_0x4376f0,_0x5b8c0e=DataManager[_0x53b11c(0x4fe)](this[_0x53b11c(0xb5f)]),_0x1131b2=VisuMZ[_0x53b11c(0x82d)][_0x5b8c0e];if(!_0x1131b2)return this['getItemDamageAmountLabelOriginal']();const _0x29c56d=_0x53b11c(0x872)[_0x53b11c(0xa30)](this[_0x53b11c(0xb5f)]['damage']['type']),_0x323bbd=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x53b11c(0xb5f)][_0x53b11c(0x121)][_0x53b11c(0x2a6)]];return _0x1131b2[_0x29c56d][_0x53b11c(0xa30)](_0x323bbd);},Window_ShopStatus[_0x4376f0(0x705)][_0x4376f0(0xb50)]=function(){const _0x2a0084=_0x4376f0,_0xb65bf0=DataManager['getDamageStyle'](this[_0x2a0084(0xb5f)]),_0x125462=VisuMZ[_0x2a0084(0x82d)][_0xb65bf0];if(!_0x125462)return this[_0x2a0084(0xc09)]();return _0x125462['DamageDisplay']['call'](this);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x9e9)]=Window_PartyCommand['prototype'][_0x4376f0(0x72f)],Window_PartyCommand['prototype'][_0x4376f0(0x72f)]=function(_0x223a33){const _0xe5a23f=_0x4376f0;VisuMZ['BattleCore'][_0xe5a23f(0x9e9)]['call'](this,_0x223a33),this[_0xe5a23f(0x1ef)](_0x223a33);},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x1ef)]=function(_0x1f96dc){const _0x1bb076=_0x4376f0,_0x221ff4=new Rectangle(0x0,0x0,_0x1f96dc[_0x1bb076(0x895)],_0x1f96dc[_0x1bb076(0x399)]);this[_0x1bb076(0x19d)]=new Window_Base(_0x221ff4),this['_commandNameWindow'][_0x1bb076(0x945)]=0x0,this[_0x1bb076(0x3e4)](this[_0x1bb076(0x19d)]),this['updateCommandNameWindow']();},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x941)]=function(){const _0x444147=_0x4376f0;Window_Command[_0x444147(0x705)][_0x444147(0x941)][_0x444147(0x34b)](this);if(this[_0x444147(0x19d)])this[_0x444147(0x64b)]();},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x64b)]=function(){const _0x3a1de7=_0x4376f0,_0x35a3f1=this[_0x3a1de7(0x19d)];_0x35a3f1[_0x3a1de7(0x5c0)]['clear']();const _0x1e050c=this[_0x3a1de7(0x9d2)](this['index']());if(_0x1e050c===_0x3a1de7(0x4ab)&&this[_0x3a1de7(0xadf)]()>0x0){const _0x3b8b43=this['itemLineRect'](this['index']());let _0x48cba5=this[_0x3a1de7(0x9cb)](this[_0x3a1de7(0xab2)]());_0x48cba5=_0x48cba5[_0x3a1de7(0x6f6)](/\\I\[(\d+)\]/gi,''),_0x35a3f1[_0x3a1de7(0x326)](),this[_0x3a1de7(0x3d7)](_0x48cba5,_0x3b8b43),this[_0x3a1de7(0x523)](_0x48cba5,_0x3b8b43),this['commandNameWindowCenter'](_0x48cba5,_0x3b8b43);}},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x3d7)]=function(_0x457e67,_0x231186){},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x523)]=function(_0x24fa6b,_0x21c190){const _0x35eec0=_0x4376f0,_0x41f0b8=this[_0x35eec0(0x19d)];_0x41f0b8[_0x35eec0(0x748)](_0x24fa6b,0x0,_0x21c190['y'],_0x41f0b8[_0x35eec0(0x3f6)],_0x35eec0(0xbe8));},Window_PartyCommand[_0x4376f0(0x705)]['commandNameWindowCenter']=function(_0x3fc032,_0x24ba96){const _0x3ffd0c=_0x4376f0,_0x2f332c=this[_0x3ffd0c(0x19d)],_0x86be7e=$gameSystem[_0x3ffd0c(0xb1d)](),_0x4d2fcc=_0x24ba96['x']+Math[_0x3ffd0c(0x627)](_0x24ba96[_0x3ffd0c(0x895)]/0x2)+_0x86be7e;_0x2f332c['x']=_0x2f332c[_0x3ffd0c(0x895)]/-0x2+_0x4d2fcc,_0x2f332c['y']=Math['floor'](_0x24ba96[_0x3ffd0c(0x399)]/0x2);},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x7f1)]=function(){const _0x145475=_0x4376f0;this[_0x145475(0xbf9)](),this['addAutoBattleCommand'](),this[_0x145475(0x573)](),this[_0x145475(0x84e)](),this[_0x145475(0xbbc)](),this['addEscapeCommand']();},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0xbf9)]=function(){const _0x2ae11d=_0x4376f0,_0x4f73b3=this[_0x2ae11d(0x453)](),_0x196b55=VisuMZ[_0x2ae11d(0x19c)][_0x2ae11d(0xae8)]['PartyCmd'][_0x2ae11d(0x51d)],_0x6e45ac=_0x4f73b3==='text'?TextManager[_0x2ae11d(0x4ef)]:'\x5cI[%1]%2'[_0x2ae11d(0xa30)](_0x196b55,TextManager[_0x2ae11d(0x4ef)]),_0x37d696=this[_0x2ae11d(0xbae)]();this['addCommand'](_0x6e45ac,_0x2ae11d(0x4ef),_0x37d696);},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0xbae)]=function(){return!![];},Window_PartyCommand[_0x4376f0(0x705)]['addAutoBattleCommand']=function(){const _0x41baa4=_0x4376f0;if(!this[_0x41baa4(0xa15)]())return;const _0x2fa056=this[_0x41baa4(0x453)](),_0x7dd0be=VisuMZ[_0x41baa4(0x19c)][_0x41baa4(0xae8)][_0x41baa4(0x863)][_0x41baa4(0xa90)],_0x18c951=_0x2fa056===_0x41baa4(0xc4d)?TextManager[_0x41baa4(0x846)]:'\x5cI[%1]%2'[_0x41baa4(0xa30)](_0x7dd0be,TextManager[_0x41baa4(0x846)]),_0x1a2937=this[_0x41baa4(0x2f2)]();this[_0x41baa4(0x511)](_0x18c951,_0x41baa4(0x846),_0x1a2937);},Window_PartyCommand['prototype'][_0x4376f0(0xa15)]=function(){const _0x22aa41=_0x4376f0;return VisuMZ[_0x22aa41(0x19c)]['Settings']['PartyCmd'][_0x22aa41(0x950)];},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x2f2)]=function(){return!![];},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x573)]=function(){},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x84e)]=function(){const _0x6605b4=_0x4376f0,_0x269ee1=VisuMZ['BattleCore'][_0x6605b4(0xae8)][_0x6605b4(0x863)][_0x6605b4(0x9b9)]??!![];if(!_0x269ee1)return;const _0xb1f5f4=this[_0x6605b4(0x453)](),_0x381636=VisuMZ['BattleCore']['Settings']['InBattleStatus'][_0x6605b4(0x722)]??0x57,_0xd740cf=_0xb1f5f4===_0x6605b4(0xc4d)?TextManager[_0x6605b4(0x383)]:_0x6605b4(0x734)[_0x6605b4(0xa30)](_0x381636,TextManager[_0x6605b4(0x383)]),_0x50ceab=!![];this[_0x6605b4(0x511)](_0xd740cf,'status',_0x50ceab);},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0xbbc)]=function(){const _0x1a4f81=_0x4376f0;if(!this[_0x1a4f81(0x61a)]())return;const _0x363b3e=this['commandStyle'](),_0x4842b9=VisuMZ[_0x1a4f81(0x19c)]['Settings']['PartyCmd'][_0x1a4f81(0x6fc)],_0x5a0687=_0x363b3e===_0x1a4f81(0xc4d)?TextManager[_0x1a4f81(0x5d0)]:'\x5cI[%1]%2'['format'](_0x4842b9,TextManager[_0x1a4f81(0x5d0)]),_0x11e9a9=this[_0x1a4f81(0x6c0)]();this[_0x1a4f81(0x511)](_0x5a0687,_0x1a4f81(0x5d0),_0x11e9a9);},Window_PartyCommand[_0x4376f0(0x705)]['isOptionsCommandAdded']=function(){const _0x4b3123=_0x4376f0;return VisuMZ['BattleCore'][_0x4b3123(0xae8)][_0x4b3123(0x863)][_0x4b3123(0x35a)];},Window_PartyCommand['prototype']['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0xa87)]=function(){const _0x3564f6=_0x4376f0,_0x8427cd=this[_0x3564f6(0x453)](),_0x237406=VisuMZ[_0x3564f6(0x19c)][_0x3564f6(0xae8)][_0x3564f6(0x863)][_0x3564f6(0x64e)],_0x29201c=_0x8427cd===_0x3564f6(0xc4d)?TextManager['escape']:_0x3564f6(0x734)[_0x3564f6(0xa30)](_0x237406,TextManager[_0x3564f6(0x4ca)]),_0x163136=this[_0x3564f6(0x675)]();this[_0x3564f6(0x511)](_0x29201c,_0x3564f6(0x4ca),_0x163136);},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x675)]=function(){const _0x47b76a=_0x4376f0;return BattleManager[_0x47b76a(0x305)]();},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x40f)]=function(){const _0x47ba81=_0x4376f0;return VisuMZ['BattleCore'][_0x47ba81(0xae8)]['PartyCmd']['CmdTextAlign'];},Window_PartyCommand['prototype'][_0x4376f0(0x176)]=function(_0x335dc0){const _0x41c7c4=_0x4376f0,_0x4bab73=this[_0x41c7c4(0x9d2)](_0x335dc0);if(_0x4bab73===_0x41c7c4(0xa98))this[_0x41c7c4(0x2a3)](_0x335dc0);else _0x4bab73===_0x41c7c4(0x4ab)?this[_0x41c7c4(0x527)](_0x335dc0):Window_Command[_0x41c7c4(0x705)][_0x41c7c4(0x176)][_0x41c7c4(0x34b)](this,_0x335dc0);},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x453)]=function(){const _0x123b3b=_0x4376f0;return VisuMZ['BattleCore'][_0x123b3b(0xae8)][_0x123b3b(0x863)][_0x123b3b(0x3a0)];},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x9d2)]=function(_0x1e4f17){const _0x3471f7=_0x4376f0;if(_0x1e4f17<0x0)return _0x3471f7(0xc4d);const _0x587140=this[_0x3471f7(0x453)]();if(_0x587140!==_0x3471f7(0x95f))return _0x587140;else{if(this[_0x3471f7(0xadf)]()>0x0){const _0x3e07d8=this[_0x3471f7(0x9cb)](_0x1e4f17);if(_0x3e07d8[_0x3471f7(0x844)](/\\I\[(\d+)\]/i)){const _0x5d1ef2=this['itemLineRect'](_0x1e4f17),_0x3decce=this[_0x3471f7(0x629)](_0x3e07d8)[_0x3471f7(0x895)];return _0x3decce<=_0x5d1ef2[_0x3471f7(0x895)]?_0x3471f7(0xa98):_0x3471f7(0x4ab);}}}return _0x3471f7(0xc4d);},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x2a3)]=function(_0x155f59){const _0x4e049d=_0x4376f0,_0x2cb2df=this[_0x4e049d(0x634)](_0x155f59),_0x45961b=this['commandName'](_0x155f59),_0x4a8853=this[_0x4e049d(0x629)](_0x45961b)[_0x4e049d(0x895)];this['changePaintOpacity'](this['isCommandEnabled'](_0x155f59));const _0x5f4186=this[_0x4e049d(0x40f)]();if(_0x5f4186===_0x4e049d(0x77b))this[_0x4e049d(0x693)](_0x45961b,_0x2cb2df['x']+_0x2cb2df[_0x4e049d(0x895)]-_0x4a8853,_0x2cb2df['y'],_0x4a8853);else{if(_0x5f4186===_0x4e049d(0xbe8)){const _0x51838c=_0x2cb2df['x']+Math['floor']((_0x2cb2df[_0x4e049d(0x895)]-_0x4a8853)/0x2);this[_0x4e049d(0x693)](_0x45961b,_0x51838c,_0x2cb2df['y'],_0x4a8853);}else this[_0x4e049d(0x693)](_0x45961b,_0x2cb2df['x'],_0x2cb2df['y'],_0x4a8853);}},Window_PartyCommand['prototype'][_0x4376f0(0x527)]=function(_0x4193d9){const _0x579a6f=_0x4376f0;this[_0x579a6f(0x9cb)](_0x4193d9)[_0x579a6f(0x844)](/\\I\[(\d+)\]/i);const _0x56e9e8=Number(RegExp['$1'])||0x0,_0x36c321=this[_0x579a6f(0x634)](_0x4193d9),_0x3277a9=_0x36c321['x']+Math[_0x579a6f(0x627)]((_0x36c321['width']-ImageManager[_0x579a6f(0x9da)])/0x2),_0x27969b=_0x36c321['y']+(_0x36c321[_0x579a6f(0x399)]-ImageManager[_0x579a6f(0xa6b)])/0x2;this['drawIcon'](_0x56e9e8,_0x3277a9,_0x27969b);},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0xa38)]=function(){},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0x42e)]=function(){const _0x1f745d=_0x4376f0;Window_Command['prototype'][_0x1f745d(0x42e)]['call'](this);const _0x2bc3db=this[_0x1f745d(0x6c1)]();_0x2bc3db===_0x1f745d(0x937)&&this[_0x1f745d(0xb60)]();},Window_PartyCommand[_0x4376f0(0x705)]['battleLayoutStyle']=function(){const _0x29b407=_0x4376f0;if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x29b407(0x1b7)]=SceneManager[_0x29b407(0x982)][_0x29b407(0x6c1)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x4376f0(0x705)][_0x4376f0(0xa45)]=function(){const _0x1ab2ba=_0x4376f0,_0x24ea3c=VisuMZ[_0x1ab2ba(0x19c)]['Settings'][_0x1ab2ba(0x863)],_0x5ac530=this[_0x1ab2ba(0x68b)]();switch(_0x5ac530){case _0x1ab2ba(0x4ef):this[_0x1ab2ba(0xaea)][_0x1ab2ba(0x3fb)](_0x24ea3c['HelpFight']);break;case _0x1ab2ba(0x846):this[_0x1ab2ba(0xaea)]['setText'](_0x24ea3c[_0x1ab2ba(0x306)]);break;case _0x1ab2ba(0x5d0):this[_0x1ab2ba(0xaea)][_0x1ab2ba(0x3fb)](_0x24ea3c['HelpOptions']);break;case'escape':this[_0x1ab2ba(0xaea)][_0x1ab2ba(0x3fb)](_0x24ea3c[_0x1ab2ba(0x37e)]);break;case _0x1ab2ba(0x383):this[_0x1ab2ba(0xaea)][_0x1ab2ba(0x3fb)](Window_InBattleStatus['SETTINGS'][_0x1ab2ba(0x664)]);break;default:this['_helpWindow']['setText']('');break;}},VisuMZ['BattleCore']['Window_ActorCommand_initialize']=Window_ActorCommand['prototype'][_0x4376f0(0x72f)],Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x72f)]=function(_0x158595){const _0x4075c6=_0x4376f0;VisuMZ[_0x4075c6(0x19c)]['Window_ActorCommand_initialize'][_0x4075c6(0x34b)](this,_0x158595),this[_0x4075c6(0x1ef)](_0x158595);},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x1ef)]=function(_0x4520cd){const _0x4a0610=_0x4376f0,_0x3e4e7d=new Rectangle(0x0,0x0,_0x4520cd[_0x4a0610(0x895)],_0x4520cd[_0x4a0610(0x399)]);this[_0x4a0610(0x19d)]=new Window_Base(_0x3e4e7d),this[_0x4a0610(0x19d)][_0x4a0610(0x945)]=0x0,this[_0x4a0610(0x3e4)](this[_0x4a0610(0x19d)]),this[_0x4a0610(0x64b)]();},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x941)]=function(){const _0x389900=_0x4376f0;Window_Command['prototype'][_0x389900(0x941)][_0x389900(0x34b)](this);if(this[_0x389900(0x19d)])this[_0x389900(0x64b)]();},Window_ActorCommand['prototype'][_0x4376f0(0x64b)]=function(){const _0x565d2c=_0x4376f0,_0x3da913=this['_commandNameWindow'];_0x3da913['contents'][_0x565d2c(0x976)]();const _0x116ad0=this[_0x565d2c(0x9d2)](this[_0x565d2c(0xab2)]());if(_0x116ad0===_0x565d2c(0x4ab)&&this[_0x565d2c(0xadf)]()>0x0){const _0x4da54e=this[_0x565d2c(0x634)](this[_0x565d2c(0xab2)]());let _0x56a0cb=this[_0x565d2c(0x9cb)](this['index']());_0x56a0cb=_0x56a0cb[_0x565d2c(0x6f6)](/\\I\[(\d+)\]/gi,''),_0x3da913[_0x565d2c(0x326)](),this['commandNameWindowDrawBackground'](_0x56a0cb,_0x4da54e),this[_0x565d2c(0x523)](_0x56a0cb,_0x4da54e),this[_0x565d2c(0x1d1)](_0x56a0cb,_0x4da54e);}},Window_ActorCommand['prototype'][_0x4376f0(0x3d7)]=function(_0x4c9b55,_0x2e93fe){},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x523)]=function(_0x2c9f4f,_0x572bf0){const _0x4bc112=_0x4376f0,_0x1a8cbf=this[_0x4bc112(0x19d)];_0x1a8cbf[_0x4bc112(0x748)](_0x2c9f4f,0x0,_0x572bf0['y'],_0x1a8cbf[_0x4bc112(0x3f6)],_0x4bc112(0xbe8));},Window_ActorCommand['prototype'][_0x4376f0(0x1d1)]=function(_0x5f29a2,_0x3fed53){const _0x283a13=_0x4376f0,_0x511264=this[_0x283a13(0x19d)],_0x209bc5=$gameSystem[_0x283a13(0xb1d)](),_0x45811a=_0x3fed53['x']+Math[_0x283a13(0x627)](_0x3fed53[_0x283a13(0x895)]/0x2)+_0x209bc5;_0x511264['x']=_0x511264[_0x283a13(0x895)]/-0x2+_0x45811a,_0x511264['y']=Math[_0x283a13(0x627)](_0x3fed53[_0x283a13(0x399)]/0x2);},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x7f1)]=function(){const _0x38d0be=_0x4376f0;if(!this[_0x38d0be(0x1a1)])return;const _0xa28fc7=this[_0x38d0be(0x1a1)][_0x38d0be(0x7e3)]();for(const _0x127931 of _0xa28fc7){this['makeBattleCommand'](_0x127931[_0x38d0be(0x896)]()[_0x38d0be(0x5cf)]());}},Window_ActorCommand['prototype'][_0x4376f0(0x311)]=function(_0x470e4a){const _0x1edbf8=_0x4376f0;_0x470e4a===_0x1edbf8(0xaad)&&this[_0x1edbf8(0x5b2)]();[_0x1edbf8(0x2a1),'SKILLS'][_0x1edbf8(0x3e9)](_0x470e4a)&&this[_0x1edbf8(0x3ce)]();_0x470e4a===_0x1edbf8(0xa57)&&this[_0x1edbf8(0x274)]();_0x470e4a===_0x1edbf8(0x5e4)&&this[_0x1edbf8(0x197)]();_0x470e4a===_0x1edbf8(0x3a1)&&this[_0x1edbf8(0x84e)]();_0x470e4a===_0x1edbf8(0x39b)&&this[_0x1edbf8(0xa87)]();_0x470e4a===_0x1edbf8(0x7c2)&&this[_0x1edbf8(0x540)]();if(_0x470e4a[_0x1edbf8(0x844)](/STYPE: (\d+)/i)){const _0x5a253e=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x5a253e);}else{if(_0x470e4a[_0x1edbf8(0x844)](/STYPE: (.*)/i)){const _0x165e76=DataManager['getStypeIdWithName'](RegExp['$1']);this[_0x1edbf8(0xc0f)](_0x165e76);}}_0x470e4a===_0x1edbf8(0x384)&&this[_0x1edbf8(0x45c)]();if(_0x470e4a['match'](/SKILL: (\d+)/i)){const _0x408f9a=Number(RegExp['$1']);this[_0x1edbf8(0x702)]($dataSkills[_0x408f9a]);}else{if(_0x470e4a[_0x1edbf8(0x844)](/SKILL: (.*)/i)){const _0x31c738=DataManager[_0x1edbf8(0x94f)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x31c738]);}}_0x470e4a===_0x1edbf8(0x420)&&Imported[_0x1edbf8(0x2c0)]&&this[_0x1edbf8(0x53c)](),_0x470e4a==='TALK'&&Imported[_0x1edbf8(0xb1f)]&&this['addBattleCommandTalk'](),[_0x1edbf8(0x4cd),'COMBAT\x20LOG'][_0x1edbf8(0x3e9)](_0x470e4a)&&Imported[_0x1edbf8(0x714)]&&this['addCombatLogCommand'](),_0x470e4a==='WEAPON\x20SWAP'&&Imported['VisuMZ_2_WeaponSwapSystem']&&this[_0x1edbf8(0x514)](!![]),_0x470e4a===_0x1edbf8(0x4c2)&&Imported['VisuMZ_2_BattleGridSystem']&&this[_0x1edbf8(0xbe5)]();},Window_ActorCommand[_0x4376f0(0x705)]['addAttackCommand']=function(){const _0x5702ee=_0x4376f0,_0x1649e2=$dataSkills[this['_actor'][_0x5702ee(0x815)]()];if(!_0x1649e2)return;if(!this[_0x5702ee(0xa29)](_0x1649e2))return;const _0x46410c=this[_0x5702ee(0x453)](),_0x5bf10f=DataManager[_0x5702ee(0x992)](_0x1649e2),_0xba167=DataManager['battleCommandIcon'](_0x1649e2),_0x7e0dc9=_0x46410c===_0x5702ee(0xc4d)?_0x5bf10f:_0x5702ee(0x734)['format'](_0xba167,_0x5bf10f);this[_0x5702ee(0x511)](_0x7e0dc9,_0x5702ee(0x31d),this[_0x5702ee(0x1a1)][_0x5702ee(0xa6e)]());},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x274)]=function(){const _0x3dece0=_0x4376f0,_0x354a6c=$dataSkills[this['_actor'][_0x3dece0(0x3c8)]()];if(!_0x354a6c)return;if(!this[_0x3dece0(0xa29)](_0x354a6c))return;const _0x5a652a=this[_0x3dece0(0x453)](),_0x4ee948=DataManager[_0x3dece0(0x992)](_0x354a6c),_0x54a168=DataManager[_0x3dece0(0x939)](_0x354a6c),_0xfcd990=_0x5a652a==='text'?_0x4ee948:_0x3dece0(0x734)[_0x3dece0(0xa30)](_0x54a168,_0x4ee948);this[_0x3dece0(0x511)](_0xfcd990,_0x3dece0(0x130),this['_actor'][_0x3dece0(0x457)]());},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x197)]=function(){const _0x206236=_0x4376f0,_0x4e8cce=this[_0x206236(0x453)](),_0x101b69=VisuMZ[_0x206236(0x19c)][_0x206236(0xae8)][_0x206236(0x5d5)]['CmdIconItem'],_0x40bbaf=_0x4e8cce===_0x206236(0xc4d)?TextManager[_0x206236(0x269)]:_0x206236(0x734)[_0x206236(0xa30)](_0x101b69,TextManager[_0x206236(0x269)]),_0x25df4f=this[_0x206236(0x6cd)]();this[_0x206236(0x511)](_0x40bbaf,_0x206236(0x269),_0x25df4f);},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x6cd)]=function(){const _0x9cf34c=_0x4376f0;return this[_0x9cf34c(0x1a1)]&&this[_0x9cf34c(0x1a1)][_0x9cf34c(0x502)]();},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x3ce)]=function(){const _0x4f7a3d=_0x4376f0,_0x22ef4b=this['_actor'][_0x4f7a3d(0x901)]();for(const _0x169c36 of _0x22ef4b){this[_0x4f7a3d(0xc0f)](_0x169c36);}},Window_ActorCommand[_0x4376f0(0x705)]['addSkillTypeCommand']=function(_0x37397d){const _0x4b0166=_0x4376f0;let _0x415111=$dataSystem[_0x4b0166(0x901)][_0x37397d];if(!_0x415111)return;let _0x3e0e3b=_0x415111;const _0x205616=this[_0x4b0166(0x453)]();if(_0x205616===_0x4b0166(0xc4d))_0x3e0e3b=_0x3e0e3b[_0x4b0166(0x6f6)](/\x1I\[(\d+)\]/gi,''),_0x3e0e3b=_0x3e0e3b[_0x4b0166(0x6f6)](/\\I\[(\d+)\]/gi,'');else{if(!_0x415111[_0x4b0166(0x844)](/\\I\[(\d+)\]/i)){const _0x4bc9d=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ['SkillsStatesCore'][_0x4b0166(0xae8)][_0x4b0166(0x6b4)]:VisuMZ[_0x4b0166(0x19c)][_0x4b0166(0xae8)][_0x4b0166(0x5d5)],_0x2c7329=$dataSystem[_0x4b0166(0x8ea)]['includes'](_0x37397d),_0x5336e4=_0x2c7329?_0x4bc9d[_0x4b0166(0x40c)]:_0x4bc9d['IconStypeNorm'];_0x3e0e3b=_0x4b0166(0x734)[_0x4b0166(0xa30)](_0x5336e4,_0x415111);}}this['addCommand'](_0x3e0e3b,'skill',!![],_0x37397d);},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x45c)]=function(){const _0x29b26c=_0x4376f0,_0x27286d=this['_actor']['skillTypes'](),_0x3b68db=this[_0x29b26c(0x1a1)][_0x29b26c(0x7a9)]();for(const _0x369ab of _0x3b68db){if(!_0x369ab)continue;if(Imported[_0x29b26c(0x601)]){if(this['noSimilarSTypes'](_0x369ab))continue;if(this['isHiddenSkill'](_0x369ab))continue;}else{if(!_0x27286d[_0x29b26c(0x3e9)](_0x369ab[_0x29b26c(0x378)]))continue;}this['addSingleSkillCommand'](_0x369ab);}},Window_ActorCommand[_0x4376f0(0x705)]['noSimilarSTypes']=function(_0x5d9b78){const _0x37697e=_0x4376f0,_0x4528a5=this[_0x37697e(0x1a1)][_0x37697e(0x901)](),_0x4aa1c0=_0x4528a5[_0x37697e(0x4bd)](_0x29358d=>DataManager[_0x37697e(0x6ed)](_0x5d9b78)['includes'](_0x29358d));return _0x4aa1c0[_0x37697e(0xa3a)]<=0x0;},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x4f9)]=function(_0x4cc323){const _0x3a11c2=_0x4376f0;if(Imported[_0x3a11c2(0x601)]){if(VisuMZ[_0x3a11c2(0x15f)][_0x3a11c2(0x351)]>=1.24){if(this[_0x3a11c2(0x1a1)]){if(!VisuMZ[_0x3a11c2(0x15f)]['CheckVisibleBattleNotetags'](this[_0x3a11c2(0x1a1)],_0x4cc323))return!![];if(!VisuMZ['SkillsStatesCore']['CheckVisibleSwitchNotetags'](this[_0x3a11c2(0x1a1)],_0x4cc323))return!![];if(!VisuMZ[_0x3a11c2(0x15f)]['CheckVisibleSkillNotetags'](this[_0x3a11c2(0x1a1)],_0x4cc323))return!![];}}else{if(!Window_SkillList[_0x3a11c2(0x705)][_0x3a11c2(0xc4a)][_0x3a11c2(0x34b)](this,_0x4cc323))return!![];if(!Window_SkillList[_0x3a11c2(0x705)][_0x3a11c2(0x63e)][_0x3a11c2(0x34b)](this,_0x4cc323))return!![];if(!Window_SkillList[_0x3a11c2(0x705)][_0x3a11c2(0x2ef)][_0x3a11c2(0x34b)](this,_0x4cc323))return!![];}}return![];},Window_ActorCommand[_0x4376f0(0x705)]['addSingleSkillCommand']=function(_0xac61b3){const _0x9ecfea=_0x4376f0;if(!_0xac61b3)return;if(!this['canAddSkillCommand'](_0xac61b3))return;const _0x58898c=this[_0x9ecfea(0x453)](),_0x57a855=DataManager[_0x9ecfea(0x992)](_0xac61b3),_0x51f82a=DataManager[_0x9ecfea(0x939)](_0xac61b3),_0x2d4693=_0x58898c===_0x9ecfea(0xc4d)?_0x57a855:_0x9ecfea(0x734)[_0x9ecfea(0xa30)](_0x51f82a,_0x57a855),_0x227014=this[_0x9ecfea(0x1a1)]['canUse'](_0xac61b3);this[_0x9ecfea(0x511)](_0x2d4693,_0x9ecfea(0x2d7),_0x227014,_0xac61b3['id']);},Window_ActorCommand[_0x4376f0(0x705)]['canAddSkillCommand']=function(_0x4ee3bd){const _0x1ffba6=_0x4376f0,_0x1106e5=_0x4ee3bd[_0x1ffba6(0x54f)];if(_0x1106e5[_0x1ffba6(0x844)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x1ffba6(0x1a1)][_0x1ffba6(0xaf6)](_0x4ee3bd['id']))return![];}if(_0x1106e5[_0x1ffba6(0x844)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x1ffba6(0x1a1)][_0x1ffba6(0x1d0)](_0x4ee3bd['id']))return![];}const _0x3c20c6=VisuMZ[_0x1ffba6(0x19c)][_0x1ffba6(0x123)](_0x4ee3bd,_0x1ffba6(0x415));if(VisuMZ[_0x1ffba6(0x19c)]['JS'][_0x3c20c6]){if(!VisuMZ['BattleCore']['JS'][_0x3c20c6][_0x1ffba6(0x34b)](this,this['_actor'],_0x4ee3bd))return![];}return VisuMZ[_0x1ffba6(0x19c)][_0x1ffba6(0x569)](_0x4ee3bd);},VisuMZ[_0x4376f0(0x19c)]['CheckSkillCommandShowSwitches']=function(_0x22d0e2){const _0x297840=_0x4376f0,_0x441fb9=_0x22d0e2[_0x297840(0x54f)];if(_0x441fb9['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3ba482=JSON[_0x297840(0x537)]('['+RegExp['$1'][_0x297840(0x844)](/\d+/g)+']');for(const _0x245263 of _0x3ba482){if(!$gameSwitches['value'](_0x245263))return![];}return!![];}if(_0x441fb9[_0x297840(0x844)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x403b55=JSON[_0x297840(0x537)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x30dae4 of _0x403b55){if(!$gameSwitches['value'](_0x30dae4))return![];}return!![];}if(_0x441fb9[_0x297840(0x844)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x364719=JSON[_0x297840(0x537)]('['+RegExp['$1'][_0x297840(0x844)](/\d+/g)+']');for(const _0x2074bf of _0x364719){if($gameSwitches[_0x297840(0x883)](_0x2074bf))return!![];}return![];}if(_0x441fb9[_0x297840(0x844)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x59c477=JSON[_0x297840(0x537)]('['+RegExp['$1'][_0x297840(0x844)](/\d+/g)+']');for(const _0x126d3d of _0x59c477){if(!$gameSwitches[_0x297840(0x883)](_0x126d3d))return!![];}return![];}if(_0x441fb9['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x17623f=JSON[_0x297840(0x537)]('['+RegExp['$1'][_0x297840(0x844)](/\d+/g)+']');for(const _0x44a9d8 of _0x17623f){if(!$gameSwitches[_0x297840(0x883)](_0x44a9d8))return!![];}return![];}if(_0x441fb9[_0x297840(0x844)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x140c94=JSON[_0x297840(0x537)]('['+RegExp['$1'][_0x297840(0x844)](/\d+/g)+']');for(const _0x5b7d09 of _0x140c94){if($gameSwitches['value'](_0x5b7d09))return![];}return!![];}return!![];},Window_ActorCommand['prototype'][_0x4376f0(0x84e)]=function(){const _0x1e1d87=_0x4376f0,_0xccd314=this['commandStyle'](),_0x1d4ebb=VisuMZ[_0x1e1d87(0x19c)][_0x1e1d87(0xae8)]['InBattleStatus'][_0x1e1d87(0x722)]??0x57,_0x200c36=_0xccd314===_0x1e1d87(0xc4d)?TextManager[_0x1e1d87(0x383)]:_0x1e1d87(0x734)[_0x1e1d87(0xa30)](_0x1d4ebb,TextManager[_0x1e1d87(0x383)]),_0x454b9f=!![];this['addCommand'](_0x200c36,_0x1e1d87(0x383),_0x454b9f);},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0xa87)]=function(){const _0x2e3c9e=_0x4376f0,_0x5bd98a=this[_0x2e3c9e(0x453)](),_0x338d18=VisuMZ[_0x2e3c9e(0x19c)][_0x2e3c9e(0xae8)][_0x2e3c9e(0x863)][_0x2e3c9e(0x64e)],_0x435919=_0x5bd98a===_0x2e3c9e(0xc4d)?TextManager[_0x2e3c9e(0x4ca)]:_0x2e3c9e(0x734)[_0x2e3c9e(0xa30)](_0x338d18,TextManager['escape']),_0x368cc1=this[_0x2e3c9e(0x675)]();this['addCommand'](_0x435919,_0x2e3c9e(0x4ca),_0x368cc1);},Window_ActorCommand[_0x4376f0(0x705)]['isEscapeCommandEnabled']=function(){const _0x5f5544=_0x4376f0;return BattleManager[_0x5f5544(0x305)]();},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x540)]=function(){const _0x21c260=_0x4376f0,_0x599cd8=this[_0x21c260(0x453)](),_0x5b5a6b=VisuMZ['BattleCore'][_0x21c260(0xae8)][_0x21c260(0x863)][_0x21c260(0xa90)],_0x211315=_0x599cd8==='text'?TextManager[_0x21c260(0x846)]:'\x5cI[%1]%2'[_0x21c260(0xa30)](_0x5b5a6b,TextManager[_0x21c260(0x846)]),_0x4ff692=this[_0x21c260(0x2f2)]();this[_0x21c260(0x511)](_0x211315,'autoBattle',_0x4ff692);},Window_ActorCommand[_0x4376f0(0x705)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x40f)]=function(){const _0x20f864=_0x4376f0;return VisuMZ[_0x20f864(0x19c)][_0x20f864(0xae8)]['ActorCmd']['CmdTextAlign'];},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x176)]=function(_0x427204){const _0xfad1fd=_0x4376f0,_0x5b878e=this[_0xfad1fd(0x9d2)](_0x427204);if(_0x5b878e===_0xfad1fd(0xa98))this['drawItemStyleIconText'](_0x427204);else _0x5b878e===_0xfad1fd(0x4ab)?this[_0xfad1fd(0x527)](_0x427204):Window_Command[_0xfad1fd(0x705)][_0xfad1fd(0x176)][_0xfad1fd(0x34b)](this,_0x427204);this[_0xfad1fd(0x561)](_0x427204);},Window_ActorCommand['prototype']['commandStyle']=function(){const _0x5024e7=_0x4376f0;return VisuMZ[_0x5024e7(0x19c)]['Settings']['ActorCmd'][_0x5024e7(0x3a0)];},Window_ActorCommand[_0x4376f0(0x705)]['commandStyleCheck']=function(_0x335a2c){const _0x3d884c=_0x4376f0;if(_0x335a2c<0x0)return _0x3d884c(0xc4d);const _0x1c4735=this[_0x3d884c(0x453)]();if(_0x1c4735!==_0x3d884c(0x95f))return _0x1c4735;else{if(this[_0x3d884c(0xadf)]()>0x0){const _0x1f01c1=this[_0x3d884c(0x9cb)](_0x335a2c);if(_0x1f01c1[_0x3d884c(0x844)](/\\I\[(\d+)\]/i)){const _0x304585=this[_0x3d884c(0x634)](_0x335a2c),_0x125f33=this['textSizeEx'](_0x1f01c1)[_0x3d884c(0x895)];return _0x125f33<=_0x304585[_0x3d884c(0x895)]?_0x3d884c(0xa98):_0x3d884c(0x4ab);}}}return'text';},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x2a3)]=function(_0x38be39){const _0xb9c64=_0x4376f0,_0x28fc87=this['itemLineRect'](_0x38be39),_0xcff802=this[_0xb9c64(0x9cb)](_0x38be39),_0x326b49=this['textSizeEx'](_0xcff802)[_0xb9c64(0x895)];this['changePaintOpacity'](this['isCommandEnabled'](_0x38be39));const _0x230cc0=this[_0xb9c64(0x40f)]();if(_0x230cc0===_0xb9c64(0x77b))this[_0xb9c64(0x693)](_0xcff802,_0x28fc87['x']+_0x28fc87[_0xb9c64(0x895)]-_0x326b49,_0x28fc87['y'],_0x326b49);else{if(_0x230cc0===_0xb9c64(0xbe8)){const _0x392cfe=_0x28fc87['x']+Math[_0xb9c64(0x627)]((_0x28fc87[_0xb9c64(0x895)]-_0x326b49)/0x2);this[_0xb9c64(0x693)](_0xcff802,_0x392cfe,_0x28fc87['y'],_0x326b49);}else this[_0xb9c64(0x693)](_0xcff802,_0x28fc87['x'],_0x28fc87['y'],_0x326b49);}},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x527)]=function(_0x1fa860){const _0x286885=_0x4376f0;this[_0x286885(0x9cb)](_0x1fa860)[_0x286885(0x844)](/\\I\[(\d+)\]/i);const _0x5f253a=Number(RegExp['$1'])||0x0,_0x39a06a=this[_0x286885(0x634)](_0x1fa860),_0x594416=_0x39a06a['x']+Math[_0x286885(0x627)]((_0x39a06a['width']-ImageManager['iconWidth'])/0x2),_0xbfda00=_0x39a06a['y']+(_0x39a06a[_0x286885(0x399)]-ImageManager[_0x286885(0xa6b)])/0x2;this[_0x286885(0x817)](_0x5f253a,_0x594416,_0xbfda00);},Window_ActorCommand['prototype']['drawSingleSkillCost']=function(_0x514ed9){const _0x18db13=_0x4376f0;if(!(VisuMZ[_0x18db13(0x19c)][_0x18db13(0xae8)]['ActorCmd']['ShowCosts']??!![]))return;const _0x5e6a3a=this[_0x18db13(0x491)](_0x514ed9);if(!['attack',_0x18db13(0x130),_0x18db13(0x2d7)][_0x18db13(0x3e9)](_0x5e6a3a))return;const _0xcc339f=this[_0x18db13(0x634)](_0x514ed9);let _0x2390ee=null;if(_0x5e6a3a===_0x18db13(0x31d))_0x2390ee=$dataSkills[this['_actor'][_0x18db13(0x815)]()];else _0x5e6a3a===_0x18db13(0x130)?_0x2390ee=$dataSkills[this[_0x18db13(0x1a1)]['guardSkillId']()]:_0x2390ee=$dataSkills[this[_0x18db13(0x903)][_0x514ed9]['ext']];this[_0x18db13(0x49a)](this[_0x18db13(0x1a1)],_0x2390ee,_0xcc339f['x'],_0xcc339f['y'],_0xcc339f[_0x18db13(0x895)]);},Window_ActorCommand[_0x4376f0(0x705)]['drawSkillCost']=function(_0x2dc827,_0x493273,_0x5688a9,_0x1dbf36,_0x3bf11b){const _0x16c31a=_0x4376f0;if(!_0x493273)return;Imported['VisuMZ_1_SkillsStatesCore']?Window_Command[_0x16c31a(0x705)]['drawSkillCost'][_0x16c31a(0x34b)](this,_0x2dc827,_0x493273,_0x5688a9,_0x1dbf36,_0x3bf11b):Window_SkillList[_0x16c31a(0x705)][_0x16c31a(0x49a)][_0x16c31a(0x34b)](this,_0x493273,_0x5688a9,_0x1dbf36,_0x3bf11b);},Window_ActorCommand[_0x4376f0(0x705)]['hide']=function(){},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x42e)]=function(){const _0x2c264f=_0x4376f0;Window_Command[_0x2c264f(0x705)][_0x2c264f(0x42e)][_0x2c264f(0x34b)](this);const _0x126975=this['battleLayoutStyle']();_0x126975===_0x2c264f(0x937)&&this[_0x2c264f(0xb60)]();},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x6c1)]=function(){const _0x468067=_0x4376f0;if(this[_0x468067(0x1b7)])return this[_0x468067(0x1b7)];return this[_0x468067(0x1b7)]=SceneManager['_scene'][_0x468067(0x6c1)](),this['_battleLayoutStyle'];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x9b4)]=Window_ActorCommand['prototype'][_0x4376f0(0x578)],Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x578)]=function(_0x427384){const _0x438a3c=_0x4376f0,_0x38f81c=this[_0x438a3c(0x6c1)]();if(_0x427384&&['xp',_0x438a3c(0xaf9)][_0x438a3c(0x3e9)](_0x38f81c))this[_0x438a3c(0x8a1)](_0x427384);else _0x427384&&[_0x438a3c(0x937)][_0x438a3c(0x3e9)](_0x38f81c)&&(this[_0x438a3c(0x439)](_0x427384),this[_0x438a3c(0xb60)]());VisuMZ['BattleCore'][_0x438a3c(0x9b4)][_0x438a3c(0x34b)](this,_0x427384),_0x427384&&$gameTroop[_0x438a3c(0x3a7)]()[_0x438a3c(0xa3a)]>0x0&&_0x427384[_0x438a3c(0x3f1)]()&&_0x427384['battler']()[_0x438a3c(0x1be)]();},Window_ActorCommand['prototype'][_0x4376f0(0x8a1)]=function(_0x59ce65){const _0x554ac7=_0x4376f0,_0x174cd9=VisuMZ[_0x554ac7(0x19c)][_0x554ac7(0xae8)][_0x554ac7(0x1a6)][_0x554ac7(0x6f4)],_0xd752b6=Math[_0x554ac7(0x1c6)](Graphics[_0x554ac7(0x375)]/0x3),_0x4c3613=Math[_0x554ac7(0x1c6)](Graphics[_0x554ac7(0x375)]/$gameParty[_0x554ac7(0x276)]()['length']),_0x8d0421=Math['max'](Math[_0x554ac7(0x136)](_0xd752b6,_0x4c3613),_0x174cd9),_0x1a433c=this[_0x554ac7(0x1ae)](VisuMZ[_0x554ac7(0x19c)]['Settings'][_0x554ac7(0x1a6)][_0x554ac7(0x7c4)]),_0x3fce25=Math['floor']((Graphics[_0x554ac7(0x375)]-Graphics[_0x554ac7(0x895)])/0x2),_0x579ff5=Graphics[_0x554ac7(0x375)]-_0x3fce25,_0x26b133=(Math[_0x554ac7(0x1c6)](_0x4c3613*_0x59ce65[_0x554ac7(0xab2)]())+Math[_0x554ac7(0x1c6)]((_0x4c3613-_0x8d0421)/0x2))[_0x554ac7(0x745)](_0x3fce25,_0x579ff5-_0x8d0421),_0x282926=Math['round'](SceneManager[_0x554ac7(0x982)][_0x554ac7(0xad4)]['y']-_0x1a433c);this[_0x554ac7(0x77c)](_0x26b133,_0x282926,_0x8d0421,_0x1a433c),this['createContents'](),this[_0x554ac7(0x48d)](0x1);},Window_ActorCommand['prototype'][_0x4376f0(0x439)]=function(_0x443d3b){const _0x45573c=_0x4376f0,_0x2e9f83=SceneManager[_0x45573c(0x982)][_0x45573c(0x335)]();this[_0x45573c(0x77c)](_0x2e9f83['x'],_0x2e9f83['y'],_0x2e9f83[_0x45573c(0x895)],_0x2e9f83[_0x45573c(0x399)]),this['createContents'](),this[_0x45573c(0x48d)](0x0);},Window_ActorCommand['prototype'][_0x4376f0(0x517)]=function(){const _0x2cfad9=_0x4376f0;if(this[_0x2cfad9(0x50d)]){const _0x1d1f83=this[_0x2cfad9(0x50d)][_0x2cfad9(0x1e6)],_0x2185ad=this['width']-0x8,_0x46de8c=this[_0x2cfad9(0x399)],_0x313d69=this[_0x2cfad9(0x7fb)],_0x4d0aeb=ColorManager[_0x2cfad9(0xb34)](),_0x287548=ColorManager['dimColor2']();this['_dimmerSprite']['x']=0x4,_0x1d1f83[_0x2cfad9(0x46c)](_0x2185ad,_0x46de8c),_0x1d1f83[_0x2cfad9(0xa76)](0x0,0x0,_0x2185ad,_0x313d69,_0x287548,_0x4d0aeb,!![]),_0x1d1f83[_0x2cfad9(0x520)](0x0,_0x313d69,_0x2185ad,_0x46de8c-_0x313d69*0x2,_0x4d0aeb),_0x1d1f83[_0x2cfad9(0xa76)](0x0,_0x46de8c-_0x313d69,_0x2185ad,_0x313d69,_0x4d0aeb,_0x287548,!![]),this[_0x2cfad9(0x50d)]['setFrame'](0x0,0x0,_0x2185ad,_0x46de8c);}},Window_ActorCommand['prototype'][_0x4376f0(0xa45)]=function(){const _0x405641=_0x4376f0;if(!this[_0x405641(0x1a1)])return;const _0x138ee7=VisuMZ[_0x405641(0x19c)][_0x405641(0xae8)]['ActorCmd'],_0x4ff5e4=this['currentSymbol']();switch(_0x4ff5e4){case'attack':this['setHelpWindowItem']($dataSkills[this[_0x405641(0x1a1)]['attackSkillId']()]);break;case'guard':this[_0x405641(0x902)]($dataSkills[this[_0x405641(0x1a1)][_0x405641(0x3c8)]()]);break;case _0x405641(0xbd1):const _0x4473f5=_0x138ee7[_0x405641(0x6ce)],_0x1a65c2=_0x4473f5[_0x405641(0xa30)]($dataSystem[_0x405641(0x901)][this['currentExt']()]);this['_helpWindow'][_0x405641(0x3fb)](_0x1a65c2);break;case _0x405641(0x2d7):this[_0x405641(0x902)]($dataSkills[this[_0x405641(0xae1)]()]);break;case'item':this[_0x405641(0xaea)][_0x405641(0x3fb)](_0x138ee7['HelpItem']);break;case'escape':this['_helpWindow'][_0x405641(0x3fb)](_0x138ee7[_0x405641(0x37e)]);break;case _0x405641(0x846):this[_0x405641(0xaea)][_0x405641(0x3fb)](_0x138ee7['HelpAutoBattle']);break;case _0x405641(0x383):this[_0x405641(0xaea)]['setText'](Window_InBattleStatus[_0x405641(0xa70)][_0x405641(0x664)]);break;default:this['_helpWindow'][_0x405641(0x3fb)]('');break;}},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x7df)]=function(){const _0x216393=_0x4376f0;this['forceSelect'](0x0);if(this[_0x216393(0x1a1)]&&ConfigManager[_0x216393(0x881)]){const _0x10a5ce=this['_actor'][_0x216393(0xb7e)]();this['selectSymbol'](_0x10a5ce);if(_0x10a5ce===_0x216393(0xbd1)){const _0x48264d=this[_0x216393(0x1a1)][_0x216393(0x2da)]();if(_0x48264d){const _0x2b0640=this[_0x216393(0x7c7)]('skill',_0x48264d[_0x216393(0x378)]);this[_0x216393(0x7c3)](_0x2b0640||0x0);}}else{if(_0x10a5ce===_0x216393(0x2d7)){const _0x3fa894=this[_0x216393(0x1a1)][_0x216393(0x2da)]();if(_0x3fa894){const _0x3b21bf=this[_0x216393(0x7c7)](_0x216393(0x2d7),_0x3fa894['id']);this['select'](_0x3b21bf||0x0);}}}}},Window_ActorCommand[_0x4376f0(0x705)][_0x4376f0(0x7c7)]=function(_0x4b5de2,_0x5cd014){const _0x2123f6=_0x4376f0;return this[_0x2123f6(0x903)][_0x2123f6(0x880)](_0x4f3ce0=>_0x4f3ce0[_0x2123f6(0x86a)]===_0x4b5de2&&_0x4f3ce0[_0x2123f6(0x445)]===_0x5cd014);},VisuMZ['BattleCore'][_0x4376f0(0x795)]=Window_BattleStatus['prototype'][_0x4376f0(0x72f)],Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x72f)]=function(_0x41b312){const _0x45d397=_0x4376f0;VisuMZ[_0x45d397(0x19c)][_0x45d397(0x795)][_0x45d397(0x34b)](this,_0x41b312),this[_0x45d397(0x8f7)](),this[_0x45d397(0x7b8)]();},Window_BattleStatus[_0x4376f0(0x705)]['battleLayoutStyle']=function(){const _0x234d63=_0x4376f0;if(this['_battleLayoutStyle'])return this[_0x234d63(0x1b7)];return this[_0x234d63(0x1b7)]=SceneManager[_0x234d63(0x982)][_0x234d63(0x6c1)](),this[_0x234d63(0x1b7)];},Window_BattleStatus[_0x4376f0(0x705)]['initBattleCore']=function(){const _0x47d295=_0x4376f0;this[_0x47d295(0x83e)]=this[_0x47d295(0x458)]();const _0x56b85e=VisuMZ[_0x47d295(0x19c)]['Settings'][_0x47d295(0x1a6)];_0x56b85e[_0x47d295(0x2fa)]&&(this[_0x47d295(0x945)]=0x0);},Window_BattleStatus['prototype'][_0x4376f0(0x458)]=function(){const _0x264c19=_0x4376f0,_0x524298=VisuMZ['BattleCore'][_0x264c19(0xae8)][_0x264c19(0x1a6)];if(_0x524298[_0x264c19(0x17e)])return!![];const _0x3fca4d=this['battleLayoutStyle']();switch(_0x3fca4d){case _0x264c19(0x438):case'border':return!![];break;case _0x264c19(0x847):case'xp':case _0x264c19(0xaf9):default:return![];break;}},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x80b)]=function(){const _0x3f9fda=_0x4376f0;return this[_0x3f9fda(0x458)]()?0x0:0xa;},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x402)]=function(){const _0x56f42f=_0x4376f0,_0x516c35=this['battleLayoutStyle']();switch(_0x516c35){case _0x56f42f(0x438):return 0x1;break;case'xp':case _0x56f42f(0xaf9):return $gameParty[_0x56f42f(0x276)]()[_0x56f42f(0xa3a)];break;case'default':default:return $gameParty[_0x56f42f(0x30a)]();break;}},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x8a4)]=function(){const _0xabfe5e=_0x4376f0,_0x2da3c5=this[_0xabfe5e(0x6c1)]();switch(_0x2da3c5){case _0xabfe5e(0x438):return Window_StatusBase[_0xabfe5e(0x705)]['itemHeight'][_0xabfe5e(0x34b)](this);break;case _0xabfe5e(0x847):case'xp':case'portrait':default:return this[_0xabfe5e(0x715)];break;}},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x8e4)]=function(){const _0x3d1597=_0x4376f0,_0x3f091d=this[_0x3d1597(0x6c1)]();switch(_0x3f091d){case _0x3d1597(0x438):return Window_StatusBase[_0x3d1597(0x705)][_0x3d1597(0x8e4)]['call'](this);break;case _0x3d1597(0x847):case'xp':case _0x3d1597(0xaf9):default:return 0x0;break;}},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x395)]=function(){const _0x226cfa=_0x4376f0;this[_0x226cfa(0x458)]()?Window_StatusBase['prototype'][_0x226cfa(0x395)][_0x226cfa(0x34b)](this):this[_0x226cfa(0x7fb)]=0x8;},Window_BattleStatus['prototype'][_0x4376f0(0x7aa)]=function(){const _0x310174=_0x4376f0,_0x2a18e7=VisuMZ[_0x310174(0x19c)][_0x310174(0xae8)][_0x310174(0x1a6)];_0x2a18e7[_0x310174(0x17e)]?this[_0x310174(0x1e8)]=ImageManager[_0x310174(0xadc)](_0x2a18e7[_0x310174(0x17e)]):Window_StatusBase[_0x310174(0x705)][_0x310174(0x7aa)]['call'](this);},Window_BattleStatus[_0x4376f0(0x705)]['drawItemBackground']=function(_0x5b2774){const _0x45fffc=_0x4376f0,_0x117fe4=VisuMZ['BattleCore']['Settings'][_0x45fffc(0x1a6)];if(_0x117fe4[_0x45fffc(0xaa8)])return;Window_StatusBase[_0x45fffc(0x705)]['drawItemBackground'][_0x45fffc(0x34b)](this,_0x5b2774);},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x3fc)]=function(){this['_requestRefresh']=!![];},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x75b)]=function(){const _0x4aea5c=_0x4376f0;Window_StatusBase['prototype'][_0x4aea5c(0x75b)][_0x4aea5c(0x34b)](this),this[_0x4aea5c(0x5d9)](),this[_0x4aea5c(0xa82)]();if(this[_0x4aea5c(0x6c1)]()===_0x4aea5c(0x937))this['updateBorderStyle']();},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x5d9)]=function(){const _0x46f68f=_0x4376f0;if($gameTemp['isBattleRefreshRequested']())this['preparePartyRefresh'](),this['_requestRefresh']=![],$gameTemp['clearBattleRefreshRequest']();else this['_requestRefresh']&&(this[_0x46f68f(0x6d0)]=![],this[_0x46f68f(0x31b)](),this['updateAttachmentSprites']());},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x330)]=function(){const _0x321954=_0x4376f0;Window_StatusBase[_0x321954(0x705)][_0x321954(0x330)][_0x321954(0x34b)](this);if(!$gameSystem['isSideView']())this[_0x321954(0x31b)]();},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0xa38)]=function(){const _0x5a0da0=_0x4376f0;if(this[_0x5a0da0(0xa32)]===Window_BattleStatus)return;Window_StatusBase[_0x5a0da0(0x705)][_0x5a0da0(0xa38)][_0x5a0da0(0x34b)](this);},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x93a)]=function(_0x11b927){const _0x50a78f=_0x4376f0,_0x29f5c6=this[_0x50a78f(0x6c1)]();switch(_0x29f5c6){case'xp':case _0x50a78f(0xaf9):break;case _0x50a78f(0x847):case _0x50a78f(0x438):case _0x50a78f(0x937):default:return Window_StatusBase[_0x50a78f(0x705)][_0x50a78f(0x93a)][_0x50a78f(0x34b)](this,_0x11b927);break;}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x993)]=Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x342)],Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x342)]=function(_0x32b7ca){const _0x16cd4f=_0x4376f0,_0x34b3f3=this[_0x16cd4f(0x6c1)]();switch(_0x34b3f3){case _0x16cd4f(0x438):this[_0x16cd4f(0x6b5)](_0x32b7ca);break;case'xp':this[_0x16cd4f(0x4a9)](_0x32b7ca);break;case _0x16cd4f(0xaf9):this[_0x16cd4f(0xb33)](_0x32b7ca);break;case'default':case _0x16cd4f(0x937):default:VisuMZ[_0x16cd4f(0x19c)][_0x16cd4f(0x993)][_0x16cd4f(0x34b)](this,_0x32b7ca);break;}},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x47f)]=function(_0x1076d0){const _0x5c215e=_0x4376f0,_0x3cb6b8=this[_0x5c215e(0x6c1)]();if(!$gameSystem[_0x5c215e(0x245)]())this[_0x5c215e(0x533)](_0x1076d0);switch(_0x3cb6b8){case _0x5c215e(0x438):this[_0x5c215e(0x496)](_0x1076d0);break;case'xp':case _0x5c215e(0xaf9):case _0x5c215e(0x847):case _0x5c215e(0x937):default:this[_0x5c215e(0x6d4)](_0x1076d0);break;}},Window_BattleStatus['prototype'][_0x4376f0(0x5df)]=function(){const _0x528545=_0x4376f0,_0x497462=this[_0x528545(0x6c1)]();if(['xp']['includes'](_0x497462)&&!$gameSystem[_0x528545(0x245)]()){this[_0x528545(0x2b3)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x528545(0x705)][_0x528545(0x5df)][_0x528545(0x34b)](this);},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x533)]=function(_0x1a902a){const _0x3ab015=_0x4376f0,_0x3572dd=this[_0x3ab015(0x965)](_0x1a902a)[_0x3ab015(0x3f1)]();if(!_0x3572dd)return;const _0x6ddad=this['battleLayoutStyle'](),_0x37fac0=this[_0x3ab015(0x47e)](_0x1a902a);let _0xad9ce2=Math[_0x3ab015(0x1c6)](_0x37fac0['x']+_0x37fac0[_0x3ab015(0x895)]/0x2)+this['padding'];[_0x3ab015(0x438)]['includes'](_0x6ddad)&&(_0xad9ce2=_0x37fac0[_0x3ab015(0x895)]/$gameParty[_0x3ab015(0x276)]()[_0x3ab015(0xa3a)],_0xad9ce2*=_0x1a902a,_0xad9ce2+=_0x37fac0[_0x3ab015(0x895)]/$gameParty[_0x3ab015(0x276)]()[_0x3ab015(0xa3a)]/0x2);let _0x5d457f=Math[_0x3ab015(0x1c6)](this[_0x3ab015(0xa55)](_0x1a902a,_0x3572dd,_0x37fac0));_0x3572dd['setHome'](_0xad9ce2,_0x5d457f),this[_0x3ab015(0x858)](_0x3572dd,0x1),_0x3572dd[_0x3ab015(0x330)](),this[_0x3ab015(0x5f0)](),this[_0x3ab015(0x3d1)]();},Window_BattleStatus['prototype'][_0x4376f0(0xa55)]=function(_0x3cf078,_0x3df44c,_0x4fad1c){const _0xd7dcb7=_0x4376f0,_0x4707e3=VisuMZ['BattleCore'][_0xd7dcb7(0xae8)][_0xd7dcb7(0x1a6)],_0x1c4b32=this[_0xd7dcb7(0x6c1)]();if(_0x1c4b32==='xp'){const _0x12ccb4=_0x4707e3[_0xd7dcb7(0x3e7)];switch(_0x12ccb4[_0xd7dcb7(0x177)]()['trim']()){case _0xd7dcb7(0x7f6):return _0x4fad1c[_0xd7dcb7(0x399)]-_0x3df44c[_0xd7dcb7(0xb25)][_0xd7dcb7(0x399)]/0x4;break;case _0xd7dcb7(0xbe8):const _0x3e441c=_0x4707e3[_0xd7dcb7(0x227)];return(_0x4fad1c[_0xd7dcb7(0x399)]+(_0x3df44c['height']||_0x3e441c))/0x2;break;case _0xd7dcb7(0x9bc):return 0x0;case _0xd7dcb7(0x7d3):default:return this[_0xd7dcb7(0x61b)](_0x4fad1c);break;}}else{if(_0x1c4b32===_0xd7dcb7(0xaf9)){}}return _0x3df44c['height'];},Sprite_Name[_0x4376f0(0x705)][_0x4376f0(0xb20)]=function(){return 0x24;},Sprite_Name['prototype'][_0x4376f0(0x4e1)]=function(){const _0x4bb40b=_0x4376f0,_0x3f2437=this['name'](),_0x2a010c=this[_0x4bb40b(0x1df)](),_0x25123a=this[_0x4bb40b(0xb20)]();this['setupFont'](),this[_0x4bb40b(0x1e6)]['clear'](),this['bitmap'][_0x4bb40b(0x11f)](_0x3f2437,0x4,0x0,_0x2a010c,_0x25123a,'left');},Bitmap[_0x4376f0(0x705)][_0x4376f0(0x11f)]=function(_0x584799,_0x3c77b5,_0x4f9c3f,_0x4beef3,_0x5d17d2,_0x4b1c8e){const _0xc947d4=_0x4376f0;TextManager['parseLocalizedText']&&(_0x584799=TextManager[_0xc947d4(0xb8b)](_0x584799));const _0x47bcfb=this[_0xc947d4(0xb74)],_0x3a9731=_0x47bcfb[_0xc947d4(0x12c)];_0x4beef3=_0x4beef3||0xffffffff;let _0x1fed13=_0x3c77b5,_0x1ebf1f=Math['round'](_0x4f9c3f+0x18/0x2+this[_0xc947d4(0x8e1)]*0.35);_0x4b1c8e==='center'&&(_0x1fed13+=_0x4beef3/0x2),_0x4b1c8e===_0xc947d4(0x77b)&&(_0x1fed13+=_0x4beef3),_0x47bcfb[_0xc947d4(0x9b8)](),_0x47bcfb[_0xc947d4(0x907)]=this[_0xc947d4(0x9ac)](),_0x47bcfb['textAlign']=_0x4b1c8e,_0x47bcfb[_0xc947d4(0x995)]='alphabetic',_0x47bcfb[_0xc947d4(0x12c)]=0x1,this[_0xc947d4(0x36e)](_0x584799,_0x1fed13,_0x1ebf1f,_0x4beef3),_0x47bcfb[_0xc947d4(0x12c)]=_0x3a9731,this[_0xc947d4(0xa4c)](_0x584799,_0x1fed13,_0x1ebf1f,_0x4beef3),_0x47bcfb['restore'](),this[_0xc947d4(0x9e7)][_0xc947d4(0x75b)]();},Window_BattleStatus['prototype'][_0x4376f0(0x61b)]=function(_0x591ab2){const _0x1fb188=_0x4376f0;return this[_0x1fb188(0xc2b)](_0x591ab2)-this[_0x1fb188(0x1d3)]();},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x6b5)]=function(_0x3c9e8a){const _0x467cc4=_0x4376f0;if(!VisuMZ[_0x467cc4(0x19c)][_0x467cc4(0xae8)][_0x467cc4(0x1a6)]['ShowFacesListStyle'])return;const _0x227b91=this[_0x467cc4(0x965)](_0x3c9e8a),_0x237bb6=this[_0x467cc4(0x47e)](_0x3c9e8a);_0x237bb6[_0x467cc4(0x895)]=ImageManager[_0x467cc4(0x6f5)],_0x237bb6[_0x467cc4(0x399)]-=0x2,this[_0x467cc4(0xac6)](_0x227b91,_0x237bb6['x']+0x1,_0x237bb6['y']+0x1,_0x237bb6[_0x467cc4(0x895)],_0x237bb6['height']);},Window_BattleStatus[_0x4376f0(0x705)]['drawItemStatusListStyle']=function(_0xe983f2){const _0x1a12f0=_0x4376f0,_0x56bf7c=VisuMZ['BattleCore'][_0x1a12f0(0xae8)]['BattleLayout'],_0x494faf=$dataSystem[_0x1a12f0(0x1fa)]?0x4:0x3,_0x3ce2d6=_0x494faf*0x80+(_0x494faf-0x1)*0x8+0x4,_0x5e04a2=this['actor'](_0xe983f2),_0x26f8b=this[_0x1a12f0(0x47e)](_0xe983f2);let _0x26193f=_0x26f8b['x']+this[_0x1a12f0(0x7fb)];_0x56bf7c['ShowFacesListStyle']?_0x26193f=_0x26f8b['x']+ImageManager[_0x1a12f0(0x6f5)]+0x8:_0x26193f+=ImageManager[_0x1a12f0(0x9da)];const _0x1d4c18=Math[_0x1a12f0(0x1c6)](Math[_0x1a12f0(0x136)](_0x26f8b['x']+_0x26f8b['width']-_0x3ce2d6,_0x26193f)),_0x42fce6=Math[_0x1a12f0(0x1c6)](_0x26f8b['y']+(_0x26f8b[_0x1a12f0(0x399)]-Sprite_Name['prototype'][_0x1a12f0(0xb20)]())/0x2),_0x2fcd1c=Math[_0x1a12f0(0x1c6)](_0x1d4c18-ImageManager[_0x1a12f0(0x9da)]/0x2-0x4),_0x30640f=Math['round'](_0x26f8b['y']+(_0x26f8b['height']-ImageManager['iconHeight'])/0x2+ImageManager[_0x1a12f0(0xa6b)]/0x2);let _0x163e8d=_0x1d4c18+0x88;const _0x4e09d2=_0x42fce6;this[_0x1a12f0(0x2ad)](_0x5e04a2,_0x1d4c18-0x4+(_0x56bf7c[_0x1a12f0(0xbf0)]||0x0),_0x42fce6+(_0x56bf7c[_0x1a12f0(0x868)]||0x0)),this[_0x1a12f0(0xb35)](_0x5e04a2,_0x1d4c18+(_0x56bf7c[_0x1a12f0(0x448)]||0x0),_0x42fce6+(_0x56bf7c[_0x1a12f0(0x666)]||0x0)),this[_0x1a12f0(0x363)](_0x5e04a2,_0x2fcd1c+(_0x56bf7c[_0x1a12f0(0xa3b)]||0x0),_0x30640f+(_0x56bf7c['StateIconOffsetY']||0x0)),this['placeGauge'](_0x5e04a2,'hp',_0x163e8d+0x88*0x0+(_0x56bf7c['HpGaugeOffsetX']||0x0),_0x4e09d2+(_0x56bf7c[_0x1a12f0(0x81f)]||0x0)),this[_0x1a12f0(0xa58)](_0x5e04a2,'mp',_0x163e8d+0x88*0x1+(_0x56bf7c['MpGaugeOffsetX']||0x0),_0x4e09d2+(_0x56bf7c['MpGaugeOffsetY']||0x0)),$dataSystem[_0x1a12f0(0x1fa)]&&this[_0x1a12f0(0xa58)](_0x5e04a2,'tp',_0x163e8d+0x88*0x2+(_0x56bf7c['TpGaugeOffsetX']||0x0),_0x4e09d2+(_0x56bf7c[_0x1a12f0(0x55e)]||0x0));},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x4a9)]=function(_0x1c07ae){const _0x50f3a0=_0x4376f0;if(!$gameSystem[_0x50f3a0(0x245)]())return;VisuMZ['BattleCore']['Window_BattleStatus_drawItemImage']['call'](this,_0x1c07ae);},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x6d4)]=function(_0x1f713e){const _0x2b2f9e=_0x4376f0,_0x159e56=VisuMZ[_0x2b2f9e(0x19c)]['Settings'][_0x2b2f9e(0x1a6)],_0x2c1076=this[_0x2b2f9e(0x965)](_0x1f713e),_0x6b62e5=this[_0x2b2f9e(0x47e)](_0x1f713e),_0x31eaef=Math['round'](_0x6b62e5['x']+(_0x6b62e5[_0x2b2f9e(0x895)]-0x80)/0x2),_0x69b625=this[_0x2b2f9e(0x61b)](_0x6b62e5);let _0x3c7a61=_0x31eaef-ImageManager[_0x2b2f9e(0x9da)]/0x2-0x4,_0x4133f6=_0x69b625+ImageManager[_0x2b2f9e(0xa6b)]/0x2;_0x3c7a61-ImageManager[_0x2b2f9e(0x9da)]/0x2<_0x6b62e5['x']&&(_0x3c7a61=_0x31eaef+ImageManager['iconWidth']/0x2-0x4,_0x4133f6=_0x69b625-ImageManager[_0x2b2f9e(0xa6b)]/0x2);const _0x1b0523=_0x31eaef,_0x2d954f=this[_0x2b2f9e(0xc2b)](_0x6b62e5);this[_0x2b2f9e(0x2ad)](_0x2c1076,_0x31eaef+(_0x159e56['TpbGaugeOffsetX']||0x0),_0x69b625+(_0x159e56[_0x2b2f9e(0x868)]||0x0)),this[_0x2b2f9e(0xb35)](_0x2c1076,_0x31eaef+(_0x159e56[_0x2b2f9e(0x448)]||0x0),_0x69b625+(_0x159e56['NameOffsetY']||0x0)),this[_0x2b2f9e(0x363)](_0x2c1076,_0x3c7a61+(_0x159e56[_0x2b2f9e(0xa3b)]||0x0),_0x4133f6+(_0x159e56[_0x2b2f9e(0x79c)]||0x0)),this[_0x2b2f9e(0xa58)](_0x2c1076,'hp',_0x1b0523+(_0x159e56['HpGaugeOffsetX']||0x0),_0x2d954f+(_0x159e56[_0x2b2f9e(0x81f)]||0x0)),this['placeGauge'](_0x2c1076,'mp',_0x1b0523+(_0x159e56['MpGaugeOffsetX']||0x0),_0x2d954f+this[_0x2b2f9e(0x1d3)]()+(_0x159e56[_0x2b2f9e(0xb36)]||0x0)),$dataSystem['optDisplayTp']&&this['placeGauge'](_0x2c1076,'tp',_0x1b0523+(_0x159e56[_0x2b2f9e(0x38f)]||0x0),_0x2d954f+this[_0x2b2f9e(0x1d3)]()*0x2+(_0x159e56[_0x2b2f9e(0x55e)]||0x0));},Window_BattleStatus['prototype'][_0x4376f0(0x2f9)]=function(_0xdee37f){const _0x24dccb=_0x4376f0;if(!VisuMZ['BattleCore']['Settings'][_0x24dccb(0x1a6)]['ShowPortraits'])return![];if(_0xdee37f[_0x24dccb(0x368)]())return!![];return Imported[_0x24dccb(0x19a)]&&_0xdee37f[_0x24dccb(0x2f7)]();},Game_Actor['prototype'][_0x4376f0(0xb41)]=function(){const _0x40fd54=_0x4376f0;if(this['actor']()[_0x40fd54(0x54f)][_0x40fd54(0x844)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x40fd54(0x965)]()[_0x40fd54(0x54f)][_0x40fd54(0x844)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x4376f0(0x705)][_0x4376f0(0x299)]=function(){const _0x327409=_0x4376f0;if(this[_0x327409(0x965)]()['note'][_0x327409(0x844)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x327409(0x965)]()[_0x327409(0x54f)][_0x327409(0x844)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0xb33)]=function(_0x298d4a){const _0x2a1455=_0x4376f0,_0x5b6ae2=this[_0x2a1455(0x965)](_0x298d4a);if(this[_0x2a1455(0x2f9)](_0x5b6ae2)){const _0x23f199=_0x2a1455(0x2e1)[_0x2a1455(0xa30)](_0x5b6ae2[_0x2a1455(0xb99)]()),_0x536770=this[_0x2a1455(0x18f)](_0x23f199,Sprite),_0x51369e=_0x5b6ae2[_0x2a1455(0xb27)]();_0x51369e!==''?_0x536770[_0x2a1455(0x1e6)]=ImageManager[_0x2a1455(0xb11)](_0x51369e):_0x536770['bitmap']=ImageManager[_0x2a1455(0x50e)];const _0x1fd1fd=this[_0x2a1455(0x47e)](_0x298d4a);_0x536770['anchor']['x']=0.5,_0x536770[_0x2a1455(0x7cf)]['y']=0x1;let _0x4b192b=Math[_0x2a1455(0x1c6)](_0x1fd1fd['x']+_0x1fd1fd[_0x2a1455(0x895)]/0x2)+this[_0x2a1455(0x7fb)];_0x4b192b+=_0x5b6ae2[_0x2a1455(0xb41)]();let _0x337242=Math[_0x2a1455(0x1c6)](this[_0x2a1455(0x399)]);_0x337242+=_0x5b6ae2[_0x2a1455(0x299)](),_0x536770[_0x2a1455(0x77c)](_0x4b192b,_0x337242);const _0x530072=VisuMZ[_0x2a1455(0x19c)][_0x2a1455(0xae8)][_0x2a1455(0x1a6)][_0x2a1455(0x3b6)];_0x536770[_0x2a1455(0xc02)]['x']=_0x530072,_0x536770[_0x2a1455(0xc02)]['y']=_0x530072,_0x536770[_0x2a1455(0x330)]();}else{const _0x23d9d6=this[_0x2a1455(0x3c2)](_0x298d4a);this[_0x2a1455(0xac6)](_0x5b6ae2,_0x23d9d6['x'],_0x23d9d6['y'],_0x23d9d6[_0x2a1455(0x895)],_0x23d9d6[_0x2a1455(0x399)]);}},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x18f)]=function(_0x170b76,_0xf0a66d){const _0x5553a8=_0x4376f0,_0x218a05=this['_additionalSprites'];if(_0x218a05[_0x170b76])return _0x218a05[_0x170b76];else{const _0x46f782=new _0xf0a66d();return _0x218a05[_0x170b76]=_0x46f782,this['addChildToBack'](_0x46f782),this[_0x5553a8(0x8b3)](this[_0x5553a8(0xaaa)]),_0x46f782;}},Window_BattleStatus['prototype'][_0x4376f0(0x184)]=function(){const _0x274f31=_0x4376f0;this['_createCursorArea'](),this[_0x274f31(0x229)](),Window_StatusBase['prototype'][_0x274f31(0x184)][_0x274f31(0x34b)](this),this[_0x274f31(0xc0e)]();},Window_BattleStatus['prototype']['_createCursorArea']=function(){const _0x3eac01=_0x4376f0;this[_0x3eac01(0xaaa)]=new Sprite(),this['_cursorArea'][_0x3eac01(0x8b8)]=[new PIXI[(_0x3eac01(0x8b8))][(_0x3eac01(0xabf))]()],this[_0x3eac01(0xaaa)][_0x3eac01(0xaef)]=new Rectangle(),this[_0x3eac01(0xaaa)][_0x3eac01(0x77c)](this[_0x3eac01(0x72a)],this[_0x3eac01(0x72a)]),this['addChild'](this[_0x3eac01(0xaaa)]);},Window_BattleStatus['prototype'][_0x4376f0(0x229)]=function(){const _0x13f408=_0x4376f0;this[_0x13f408(0xa8e)]=new Sprite(),this['addChild'](this[_0x13f408(0xa8e)]);},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x5f0)]=function(){const _0x49886d=_0x4376f0;this[_0x49886d(0xa8e)]&&this['addChild'](this[_0x49886d(0xa8e)]);},Window_BattleStatus[_0x4376f0(0x705)]['_createDamageContainer']=function(){const _0x252d74=_0x4376f0;this['_damageContainer']=new Sprite(),this[_0x252d74(0x3e4)](this['_damageContainer']);},Window_BattleStatus['prototype'][_0x4376f0(0x1e3)]=function(){const _0x2457f3=_0x4376f0;this[_0x2457f3(0x7ec)]=new Sprite();for(let _0x14986c=0x0;_0x14986c<0x9;_0x14986c++){this[_0x2457f3(0x7ec)]['addChild'](new Sprite());}this[_0x2457f3(0xaaa)]['addChild'](this['_cursorSprite']);},Window_BattleStatus['prototype'][_0x4376f0(0x657)]=function(){const _0x3f9144=_0x4376f0;Window_StatusBase['prototype'][_0x3f9144(0x657)][_0x3f9144(0x34b)](this),this[_0x3f9144(0x6c7)]();},Window_BattleStatus[_0x4376f0(0x705)]['_updateCursorArea']=function(){const _0x1914d9=_0x4376f0,_0x5e2d20=this[_0x1914d9(0x72a)];this[_0x1914d9(0xaaa)]['move'](_0x5e2d20,_0x5e2d20),this[_0x1914d9(0xaaa)]['x']=_0x5e2d20-this[_0x1914d9(0x333)]['x'],this['_cursorArea']['y']=_0x5e2d20-this['origin']['y'],this[_0x1914d9(0x3f6)]>0x0&&this[_0x1914d9(0x715)]>0x0?this['_cursorArea'][_0x1914d9(0x42f)]=this[_0x1914d9(0x6b2)]():this['_cursorArea'][_0x1914d9(0x42f)]=![];},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0xa9a)]=function(){const _0xfe9535=_0x4376f0;Window_StatusBase[_0xfe9535(0x705)][_0xfe9535(0xa9a)]['call'](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x1eb)]=function(){const _0x487fd2=_0x4376f0,_0x4a1733=this[_0x487fd2(0xaaa)][_0x487fd2(0x4fb)][_0x487fd2(0xb01)](new Point(0x0,0x0)),_0x2edd1d=this['_cursorArea'][_0x487fd2(0xaef)];_0x2edd1d['x']=_0x4a1733['x']+this[_0x487fd2(0x333)]['x'],_0x2edd1d['y']=_0x4a1733['y']+this[_0x487fd2(0x333)]['y'],_0x2edd1d[_0x487fd2(0x895)]=this['innerWidth'],_0x2edd1d[_0x487fd2(0x399)]=this[_0x487fd2(0x715)];},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x484)]=function(_0x568d98){const _0x1c1661=_0x4376f0;if(this[_0x1c1661(0x6c1)]()!=='portrait')return;this[_0x1c1661(0xb33)](_0x568d98[_0x1c1661(0xab2)]());},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x936)]=function(_0x21733d,_0x574314){const _0x241782=_0x4376f0;if(!this[_0x241782(0x4b7)])return;if(!_0x21733d)return;if(!_0x574314)return;const _0x1c9375=this[_0x241782(0x47e)](_0x574314[_0x241782(0xab2)]());_0x1c9375['x']+=_0x1c9375[_0x241782(0x895)]/0x2+this['padding'],_0x21733d['x']=_0x1c9375['x'],_0x21733d['y']=_0x1c9375['y'],this[_0x241782(0x4b7)][_0x241782(0x3e4)](_0x21733d);},Window_BattleStatus['prototype']['removeDamageSprite']=function(_0x2df240){const _0x1ba538=_0x4376f0;if(!this[_0x1ba538(0x4b7)])return;if(!_0x2df240)return;this[_0x1ba538(0x4b7)][_0x1ba538(0x9e3)](_0x2df240);},Window_BattleStatus['prototype'][_0x4376f0(0x56b)]=function(){const _0x57c550=_0x4376f0;if(!this[_0x57c550(0x51a)]())return;if(!this['_borderPortraitSprite'])this[_0x57c550(0x99f)]();this[_0x57c550(0x55b)](),this['updateBorderSprite']();},Window_BattleStatus['prototype'][_0x4376f0(0x51a)]=function(){const _0x7ae0f1=_0x4376f0;if(this[_0x7ae0f1(0xa32)]!==Window_BattleStatus)return![];if(!SceneManager['isSceneBattle']())return![];return VisuMZ[_0x7ae0f1(0x19c)][_0x7ae0f1(0xae8)][_0x7ae0f1(0x1a6)][_0x7ae0f1(0x2bb)];},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x99f)]=function(){const _0x3e9d18=_0x4376f0;this[_0x3e9d18(0x25d)]=new Sprite();const _0x464b7d=SceneManager['_scene'],_0x15f25f=_0x464b7d[_0x3e9d18(0x617)][_0x3e9d18(0x68d)](_0x464b7d[_0x3e9d18(0x3f4)]);_0x464b7d[_0x3e9d18(0x858)](this[_0x3e9d18(0x25d)],_0x15f25f),this['_borderPortraitSprite'][_0x3e9d18(0x7cf)]['x']=0.5,this['_borderPortraitSprite'][_0x3e9d18(0x7cf)]['y']=0x1;const _0xb9c742=VisuMZ[_0x3e9d18(0x19c)][_0x3e9d18(0xae8)][_0x3e9d18(0x1a6)][_0x3e9d18(0x843)];this[_0x3e9d18(0x25d)]['scale']['x']=_0xb9c742,this[_0x3e9d18(0x25d)][_0x3e9d18(0xc02)]['y']=_0xb9c742,this[_0x3e9d18(0x25d)]['y']=this['y']+this[_0x3e9d18(0x399)],this[_0x3e9d18(0xba4)]=0x0;},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x59f)]=function(){const _0x468ab4=_0x4376f0;return BattleManager[_0x468ab4(0x671)]();},Window_BattleStatus['prototype'][_0x4376f0(0x55b)]=function(){const _0x323ce0=_0x4376f0;this[_0x323ce0(0x25d)][_0x323ce0(0x42f)]=this[_0x323ce0(0x59f)]();const _0x360cc6=BattleManager['actor'](),_0x4b2ad6=_0x360cc6?_0x360cc6[_0x323ce0(0xb27)]()||'':'';if(_0x360cc6===this[_0x323ce0(0x25d)]['actor']&&_0x4b2ad6===this[_0x323ce0(0x25d)]['lastFilename'])return;this[_0x323ce0(0x25d)][_0x323ce0(0x965)]=_0x360cc6||this[_0x323ce0(0x25d)]['actor'],this[_0x323ce0(0x25d)][_0x323ce0(0x4a4)]=_0x4b2ad6;if(!_0x360cc6)return;else{if(_0x4b2ad6===''){this[_0x323ce0(0x25d)][_0x323ce0(0x1e6)]=ImageManager[_0x323ce0(0x50e)],this[_0x323ce0(0x25d)][_0x323ce0(0x4a4)]='';return;}else{const _0x268bc1=ImageManager['loadPicture'](_0x4b2ad6);this[_0x323ce0(0x25d)][_0x323ce0(0x945)]=0x0,_0x268bc1[_0x323ce0(0x6ff)](this[_0x323ce0(0x845)][_0x323ce0(0x54e)](this,_0x268bc1));}}},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x845)]=function(_0x27b6cd){const _0x1597c0=_0x4376f0;this[_0x1597c0(0xba4)]=0x14,this[_0x1597c0(0x25d)]['bitmap']=_0x27b6cd;SceneManager[_0x1597c0(0x982)][_0x1597c0(0x380)]()?(this[_0x1597c0(0x25d)]['x']=0x0,this['_borderPortraitTargetX']=Math[_0x1597c0(0x554)](_0x27b6cd['width']/0x2)):(this[_0x1597c0(0x25d)]['x']=this[_0x1597c0(0x895)],this['_borderPortraitTargetX']=this[_0x1597c0(0x895)]*0x3/0x4);this[_0x1597c0(0x25d)]['opacity']=0x0,this[_0x1597c0(0x25d)]['y']=this['y']+this['height'];const _0x2de6a7=BattleManager[_0x1597c0(0x965)]();_0x2de6a7&&(this[_0x1597c0(0x7ce)]+=_0x2de6a7[_0x1597c0(0xb41)](),this[_0x1597c0(0x25d)]['y']+=_0x2de6a7[_0x1597c0(0x299)]());},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x26b)]=function(){const _0x357dbf=_0x4376f0;if(this[_0x357dbf(0xba4)]>0x0){const _0x5c5764=this[_0x357dbf(0xba4)],_0x264e5b=this[_0x357dbf(0x25d)];_0x264e5b['x']=(_0x264e5b['x']*(_0x5c5764-0x1)+this[_0x357dbf(0x7ce)])/_0x5c5764,_0x264e5b[_0x357dbf(0x945)]=(_0x264e5b[_0x357dbf(0x945)]*(_0x5c5764-0x1)+0xff)/_0x5c5764,this[_0x357dbf(0xba4)]--;}},Window_BattleStatus['prototype']['updateEffectContainers']=function(){const _0x288f1f=_0x4376f0;return;this[_0x288f1f(0xa8e)]&&(this['_effectsContainer']['x']=this['x'],this[_0x288f1f(0xa8e)]['y']=this['y']),this[_0x288f1f(0x4b7)]&&(this[_0x288f1f(0x4b7)]['x']=this['x'],this[_0x288f1f(0x4b7)]['y']=this['y']);},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x7b8)]=function(){const _0x523533=_0x4376f0,_0x46e13e=VisuMZ[_0x523533(0x19c)]['Settings']['BattleLayout'];if(_0x46e13e[_0x523533(0x5b7)]){const _0x513feb=new Sprite();_0x513feb[_0x523533(0x1e6)]=ImageManager[_0x523533(0xadc)](_0x46e13e[_0x523533(0x5b7)]),_0x513feb['x']=_0x46e13e[_0x523533(0x73f)]||0x0,_0x513feb['y']=_0x46e13e[_0x523533(0x611)]||0x0,this[_0x523533(0x8b3)](_0x513feb),this[_0x523533(0xab1)]=_0x513feb;}if(_0x46e13e['StatusWindowAttachmentFront']){const _0x593548=new Sprite();_0x593548[_0x523533(0x1e6)]=ImageManager[_0x523533(0xadc)](_0x46e13e[_0x523533(0xa86)]),_0x593548['x']=_0x46e13e[_0x523533(0x376)]||0x0,_0x593548['y']=_0x46e13e['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0x523533(0x3e4)](_0x593548),this[_0x523533(0x79b)]=_0x593548;}},Window_BattleStatus[_0x4376f0(0x705)][_0x4376f0(0x3d1)]=function(){const _0x2fbfb5=_0x4376f0;this[_0x2fbfb5(0x79b)]&&this[_0x2fbfb5(0x3e4)](this[_0x2fbfb5(0x79b)]),this[_0x2fbfb5(0xab1)]&&this['addChildToBack'](this[_0x2fbfb5(0xab1)]);},Window_BattleActor[_0x4376f0(0x705)][_0x4376f0(0x39f)]=function(){const _0x121b29=_0x4376f0;return this[_0x121b29(0x869)]();},Window_BattleActor[_0x4376f0(0x705)]['isActionSelectionValid']=function(){const _0x4d926b=_0x4376f0,_0x165c31=BattleManager[_0x4d926b(0x8af)]();if(!_0x165c31)return!![];if(!_0x165c31[_0x4d926b(0x269)]())return!![];const _0x1a0ea1=this[_0x4d926b(0x965)](this[_0x4d926b(0xab2)]()),_0x2459bd=_0x165c31['item']()[_0x4d926b(0x54f)];if(_0x165c31['isForNotUser']()){if(_0x1a0ea1===BattleManager[_0x4d926b(0x965)]())return![];}if(_0x165c31[_0x4d926b(0x5f1)]()){if(!_0x1a0ea1['isDead']())return![];}if(_0x165c31[_0x4d926b(0xbb2)]()){if(!_0x1a0ea1['isAlive']())return![];}return!![];},Window_BattleActor[_0x4376f0(0x705)]['setEnemyWindowMode']=function(_0x40e6c4){this['_enemyWindowMode']=_0x40e6c4;},VisuMZ['BattleCore'][_0x4376f0(0xaa4)]=Window_BattleActor[_0x4376f0(0x705)][_0x4376f0(0x833)],Window_BattleActor['prototype'][_0x4376f0(0x833)]=function(){const _0x83e244=_0x4376f0;Window_BattleStatus[_0x83e244(0x705)][_0x83e244(0x833)]['call'](this),this[_0x83e244(0xb84)]?this[_0x83e244(0x5f6)]():VisuMZ[_0x83e244(0x19c)][_0x83e244(0xaa4)]['call'](this);},Window_BattleActor[_0x4376f0(0x705)]['processEnemyModeTouchBattleCore']=function(){const _0x849314=_0x4376f0,_0x14e3dd=SceneManager[_0x849314(0x982)]['_enemyWindow'];if(!_0x14e3dd)return;this['_doubleTouch']=![];const _0x53b108=this[_0x849314(0x8bc)]();if(_0x53b108>=0x0){this[_0x849314(0x7c3)](_0x53b108);if(TouchInput[_0x849314(0x405)]()){const _0x274a3e=$gameParty['members']()[_0x53b108],_0x4c8c2f=_0x14e3dd[_0x849314(0x2e9)][_0x849314(0x68d)](_0x274a3e);_0x4c8c2f>=0x0&&(_0x14e3dd[_0x849314(0x7c3)](_0x4c8c2f),_0x14e3dd[_0x849314(0x9ce)]());}}},Window_BattleActor[_0x4376f0(0x705)][_0x4376f0(0x621)]=function(){const _0x3dac8b=_0x4376f0;this[_0x3dac8b(0xb84)]&&(this[_0x3dac8b(0x797)]++,this['active']=!![]);const _0x522a6e=Window_BattleStatus[_0x3dac8b(0x705)]['_makeCursorAlpha'][_0x3dac8b(0x34b)](this);return this[_0x3dac8b(0xb84)]&&(this[_0x3dac8b(0xb71)]=![]),_0x522a6e;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x736)]=Window_BattleActor['prototype'][_0x4376f0(0x330)],Window_BattleActor[_0x4376f0(0x705)]['show']=function(){const _0x4ae5e0=_0x4376f0;VisuMZ[_0x4ae5e0(0x19c)][_0x4ae5e0(0x736)]['call'](this);const _0x1a4216=BattleManager[_0x4ae5e0(0x8af)]();if(_0x1a4216){const _0x46df94=$gameParty[_0x4ae5e0(0x3a7)]();_0x1a4216[_0x4ae5e0(0x2c9)]()&&_0x46df94[_0x4ae5e0(0xa3a)]>0x1&&this[_0x4ae5e0(0xb3a)]('pagedown',this['selectAllActors']['bind'](this));}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xbac)]=Window_BattleActor[_0x4376f0(0x705)][_0x4376f0(0xa38)],Window_BattleActor[_0x4376f0(0x705)]['hide']=function(){const _0x191ed=_0x4376f0;VisuMZ[_0x191ed(0x19c)]['Window_BattleActor_hide'][_0x191ed(0x34b)](this),delete this[_0x191ed(0x2a2)]['pageup'],delete this['_handlers']['pagedown'];},Window_BattleActor[_0x4376f0(0x705)][_0x4376f0(0x75d)]=function(){const _0x503f0e=_0x4376f0,_0x2b7e42=BattleManager['inputtingAction']();if(_0x2b7e42)_0x2b7e42[_0x503f0e(0x370)](_0x503f0e(0x821));this['processOk']();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xb7b)]=Window_BattleEnemy['prototype'][_0x4376f0(0x72f)],Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x72f)]=function(_0x1e834d){const _0x839fa2=_0x4376f0;this[_0x839fa2(0x4eb)]=null,VisuMZ[_0x839fa2(0x19c)][_0x839fa2(0xb7b)][_0x839fa2(0x34b)](this,_0x1e834d);if(Imported[_0x839fa2(0x1e9)]){if(VisuMZ[_0x839fa2(0x6bf)][_0x839fa2(0x351)]<1.12){let _0x34fdb6='';_0x34fdb6+='VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20',_0x34fdb6+=_0x839fa2(0x8a3),_0x34fdb6+=_0x839fa2(0xaaf),alert(_0x34fdb6),SceneManager[_0x839fa2(0x9d4)]();}}},Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x402)]=function(){const _0xcc47=_0x4376f0;return this[_0xcc47(0xadf)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x2f6)]=Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x330)],Window_BattleEnemy[_0x4376f0(0x705)]['show']=function(){const _0x4fd7b5=_0x4376f0;VisuMZ[_0x4fd7b5(0x19c)]['Window_BattleEnemy_show'][_0x4fd7b5(0x34b)](this),this['y']=Graphics[_0x4fd7b5(0x399)]*0xa,this[_0x4fd7b5(0x5b1)]()&&this['openBattleActorWindow']();},VisuMZ['BattleCore'][_0x4376f0(0x1ce)]=Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0xa38)],Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0xa38)]=function(){const _0x372f59=_0x4376f0;VisuMZ[_0x372f59(0x19c)][_0x372f59(0x1ce)]['call'](this),$gameParty['select'](null),delete this['_handlers'][_0x372f59(0xb4c)],delete this[_0x372f59(0x2a2)][_0x372f59(0x512)];},Window_BattleEnemy['prototype'][_0x4376f0(0x8e9)]=function(){const _0x4103ae=_0x4376f0;let _0x135164=$gameTroop[_0x4103ae(0x3a7)]();const _0x4cfc36=BattleManager[_0x4103ae(0x8af)]();if(_0x4cfc36){_0x4cfc36[_0x4103ae(0x2c9)]()&&_0x135164['length']>0x1&&this[_0x4103ae(0xb3a)]('pageup',this[_0x4103ae(0x160)][_0x4103ae(0x54e)](this));if(_0x4cfc36[_0x4103ae(0x84d)]()){const _0x453ac5=$gameParty[_0x4103ae(0x3a7)]();_0x135164=_0x135164[_0x4103ae(0x4f7)](_0x453ac5),_0x4cfc36[_0x4103ae(0x2c9)]()&&_0x453ac5[_0x4103ae(0xa3a)]>0x1&&this['setHandler'](_0x4103ae(0x512),this[_0x4103ae(0x75d)][_0x4103ae(0x54e)](this));}}return _0x135164;},Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x31b)]=function(){const _0x116901=_0x4376f0;this['_enemies']=this[_0x116901(0x8e9)](),this['sortEnemies'](),Window_Selectable[_0x116901(0x705)][_0x116901(0x31b)][_0x116901(0x34b)](this);},Window_BattleEnemy['prototype'][_0x4376f0(0x812)]=function(){const _0x57164d=_0x4376f0;this['_enemies'][_0x57164d(0xc3a)]((_0x172f14,_0x1290f1)=>{const _0x2ef634=_0x57164d;if(_0x172f14[_0x2ef634(0xb9d)]()!==_0x1290f1['isActor']()){if(_0x172f14[_0x2ef634(0x7b4)]())return-0x1;if(_0x1290f1[_0x2ef634(0x7b4)]())return 0x1;}if(_0x172f14['isActor']()&&_0x1290f1['isActor']())return _0x172f14[_0x2ef634(0xab2)]()-_0x1290f1[_0x2ef634(0xab2)]();return _0x172f14[_0x2ef634(0x3f1)]()[_0x2ef634(0x4f3)]===_0x1290f1['battler']()[_0x2ef634(0x4f3)]?_0x172f14[_0x2ef634(0x3f1)]()[_0x2ef634(0x90f)]-_0x1290f1[_0x2ef634(0x3f1)]()['_baseY']:_0x172f14[_0x2ef634(0x3f1)]()[_0x2ef634(0x4f3)]-_0x1290f1[_0x2ef634(0x3f1)]()['_baseX'];}),SceneManager[_0x57164d(0x20d)]()&&this['_enemies'][_0x57164d(0x294)]();},Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x3dd)]=function(){const _0x1bd6eb=_0x4376f0,_0x4d4990=VisuMZ['BattleCore'][_0x1bd6eb(0xae8)]['Enemy'];_0x4d4990[_0x1bd6eb(0x73c)]?this[_0x1bd6eb(0x280)]():this[_0x1bd6eb(0x447)]();},Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x280)]=function(){const _0x3a8eda=_0x4376f0,_0x4eda3e=BattleManager[_0x3a8eda(0x8af)]();if(_0x4eda3e&&_0x4eda3e[_0x3a8eda(0x84d)]()){if(_0x4eda3e[_0x3a8eda(0x3f0)]()){if(this[_0x3a8eda(0x5d2)]&&this[_0x3a8eda(0x2e9)][_0x3a8eda(0x3e9)](this['_lastActor'])){const _0x492081=this['_enemies']['indexOf'](this['_lastActor']);return this[_0x3a8eda(0x265)](_0x492081);}else return this[_0x3a8eda(0x447)]();}}if(this['_lastEnemy']&&this[_0x3a8eda(0x2e9)]['includes'](this[_0x3a8eda(0x4eb)])){const _0x1a7cd4=this['_enemies']['indexOf'](this[_0x3a8eda(0x4eb)]);this['forceSelect'](_0x1a7cd4);}else this['autoSelectPriority']();},Window_BattleEnemy[_0x4376f0(0x705)]['autoSelectPriority']=function(){const _0x5c62e8=_0x4376f0,_0xf7e65d=BattleManager[_0x5c62e8(0x8af)]();if(_0xf7e65d&&_0xf7e65d[_0x5c62e8(0x84d)]()){const _0x250aeb=$gameParty[_0x5c62e8(0x3a7)]()[0x0];let _0x34fda2=this[_0x5c62e8(0x2e9)][_0x5c62e8(0x68d)](_0x250aeb);const _0xbe7c8f=_0xf7e65d[_0x5c62e8(0x269)]()[_0x5c62e8(0x4e9)];if(_0xbe7c8f[_0x5c62e8(0x844)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x5c62e8(0x265)](_0x34fda2);return;}else{if(_0xbe7c8f[_0x5c62e8(0x844)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this['forceSelect'](_0x34fda2-0x1);return;}}}const _0x1c3252=VisuMZ[_0x5c62e8(0x19c)][_0x5c62e8(0xae8)][_0x5c62e8(0x653)];let _0x312656=![];$gameSystem[_0x5c62e8(0x245)]()?_0x312656=_0x1c3252[_0x5c62e8(0x8c6)]:_0x312656=_0x1c3252['FrontViewSelect'],this['forceSelect'](_0x312656?this['maxItems']()-0x1:0x0);},Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x3c7)]=function(){const _0x486a93=_0x4376f0;Window_Selectable['prototype'][_0x486a93(0x3c7)][_0x486a93(0x34b)](this);if(!this[_0x486a93(0x9b1)]())return;if(this['enemy']()['isEnemy']())this[_0x486a93(0x4eb)]=this[_0x486a93(0x9b1)]();if(this[_0x486a93(0x9b1)]()[_0x486a93(0xb9d)]())this[_0x486a93(0x5d2)]=this['enemy']();},Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x7c3)]=function(_0xf80779){const _0x2e5323=_0x4376f0;Window_Selectable[_0x2e5323(0x705)]['select'][_0x2e5323(0x34b)](this,_0xf80779),$gameTroop['select'](this[_0x2e5323(0x9b1)]()),$gameParty[_0x2e5323(0x7c3)](this['enemy']());if(!this[_0x2e5323(0x9b1)]())return;if(this[_0x2e5323(0x5b1)]()){const _0x43786f=SceneManager['_scene'][_0x2e5323(0x26e)];this['enemy']()[_0x2e5323(0xb9d)]()?_0x43786f['select'](this[_0x2e5323(0x9b1)]()[_0x2e5323(0xab2)]()):_0x43786f[_0x2e5323(0x2d5)]();}},Window_BattleEnemy['prototype'][_0x4376f0(0x5b1)]=function(){const _0x1be214=_0x4376f0;if(!this[_0x1be214(0x42f)])return![];if($gameSystem['isSideView']())return![];const _0x43e49f=SceneManager[_0x1be214(0x982)][_0x1be214(0x6c1)](),_0xa4ec35=[_0x1be214(0x847),_0x1be214(0x438),'xp',_0x1be214(0xaf9),_0x1be214(0x937)];return _0xa4ec35[_0x1be214(0x3e9)](_0x43e49f);},Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x753)]=function(){const _0x466c48=_0x4376f0,_0x4f1803=SceneManager[_0x466c48(0x982)][_0x466c48(0x26e)];_0x4f1803[_0x466c48(0x330)](),_0x4f1803[_0x466c48(0x9c2)](!![]),_0x4f1803[_0x466c48(0x31b)](),_0x4f1803[_0x466c48(0x2d5)]();const _0x212d12=SceneManager['_scene'][_0x466c48(0x6c1)](),_0x1f790b=['xp',_0x466c48(0xaf9),_0x466c48(0x937)];if(_0x1f790b[_0x466c48(0x3e9)](_0x212d12)){const _0x27944d=SceneManager['_scene']['_statusWindow'];_0x27944d[_0x466c48(0xc02)]['y']=0x0;}},Window_BattleEnemy[_0x4376f0(0x705)]['closeBattleActorWindow']=function(){const _0x297134=_0x4376f0,_0x516e24=SceneManager['_scene'][_0x297134(0x26e)];_0x516e24[_0x297134(0xa38)](),_0x516e24[_0x297134(0x9c2)](![]),_0x516e24[_0x297134(0x2d5)]();const _0x2cfb04=SceneManager[_0x297134(0x982)]['_statusWindow'];_0x2cfb04['scale']['y']=0x1;},Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x160)]=function(){const _0x40a059=_0x4376f0,_0x36332a=BattleManager[_0x40a059(0x8af)]();if(_0x36332a)_0x36332a[_0x40a059(0x370)](_0x40a059(0x44b));this[_0x40a059(0x9ce)]();},Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x75d)]=function(){const _0x19185a=_0x4376f0,_0x140d61=BattleManager[_0x19185a(0x8af)]();if(_0x140d61)_0x140d61[_0x19185a(0x370)]('all\x20actors');this['processOk']();},Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x39f)]=function(){const _0x517939=_0x4376f0;return this[_0x517939(0x869)]();},Window_BattleEnemy[_0x4376f0(0x705)][_0x4376f0(0x869)]=function(){const _0x23d400=_0x4376f0,_0x2f830a=BattleManager['inputtingAction']();if(!_0x2f830a)return!![];if(!_0x2f830a['item']())return!![];const _0x1b4fdf=this[_0x23d400(0x9b1)](),_0x16e654=_0x2f830a[_0x23d400(0x269)]()[_0x23d400(0x54f)];if(_0x2f830a[_0x23d400(0x549)]()){if(_0x1b4fdf===BattleManager[_0x23d400(0x965)]())return![];}return!![];},Window_BattleItem[_0x4376f0(0x705)][_0x4376f0(0x3e9)]=function(_0x275d25){const _0x4fa0a4=_0x4376f0;if(!_0x275d25)return![];return _0x275d25[_0x4fa0a4(0x43a)]===0x0||_0x275d25[_0x4fa0a4(0x43a)]===0x1;};function Window_AutoBattleCancel(){const _0x40b340=_0x4376f0;this[_0x40b340(0x72f)](...arguments);}Window_AutoBattleCancel[_0x4376f0(0x705)]=Object[_0x4376f0(0xbdd)](Window_Base[_0x4376f0(0x705)]),Window_AutoBattleCancel[_0x4376f0(0x705)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x4376f0(0x705)][_0x4376f0(0x72f)]=function(_0x323478){const _0x498ffc=_0x4376f0;Window_Base[_0x498ffc(0x705)][_0x498ffc(0x72f)][_0x498ffc(0x34b)](this,_0x323478),this[_0x498ffc(0x48d)](this[_0x498ffc(0x92d)]()),this[_0x498ffc(0x31b)]();},Window_AutoBattleCancel[_0x4376f0(0x705)][_0x4376f0(0x92d)]=function(){const _0x2859d2=_0x4376f0;return VisuMZ['BattleCore'][_0x2859d2(0xae8)]['AutoBattle'][_0x2859d2(0xbc8)];},Window_AutoBattleCancel['prototype'][_0x4376f0(0x31b)]=function(){const _0x2a31bf=_0x4376f0;this[_0x2a31bf(0x5c0)]['clear']();const _0x245cd0=VisuMZ['BattleCore'][_0x2a31bf(0xae8)]['AutoBattle'][_0x2a31bf(0xb88)],_0x156bbe=_0x245cd0['format'](this[_0x2a31bf(0xba9)](),this[_0x2a31bf(0x43f)]()),_0x5bf600=this[_0x2a31bf(0x629)](_0x156bbe)['width'],_0x48ff38=Math[_0x2a31bf(0x627)]((this[_0x2a31bf(0x3f6)]-_0x5bf600)/0x2);this[_0x2a31bf(0x693)](_0x156bbe,_0x48ff38,0x0,_0x5bf600);},Window_AutoBattleCancel[_0x4376f0(0x705)][_0x4376f0(0xba9)]=function(){const _0xf3155b=_0x4376f0;return Imported[_0xf3155b(0x7ba)]?TextManager[_0xf3155b(0xc1a)]('ok'):VisuMZ[_0xf3155b(0x19c)][_0xf3155b(0xae8)][_0xf3155b(0x6d8)][_0xf3155b(0x77e)];},Window_AutoBattleCancel[_0x4376f0(0x705)][_0x4376f0(0x43f)]=function(){const _0x11fff5=_0x4376f0;return Imported[_0x11fff5(0x7ba)]?TextManager['getInputButtonString'](_0x11fff5(0x67b)):VisuMZ['BattleCore'][_0x11fff5(0xae8)][_0x11fff5(0x6d8)][_0x11fff5(0x8df)];},Window_AutoBattleCancel[_0x4376f0(0x705)][_0x4376f0(0x75b)]=function(){const _0x370a7b=_0x4376f0;Window_Base[_0x370a7b(0x705)][_0x370a7b(0x75b)]['call'](this),this[_0x370a7b(0x7a3)](),this[_0x370a7b(0xa04)]();},Window_AutoBattleCancel['prototype']['updateVisibility']=function(){const _0xf01c32=_0x4376f0;this['visible']=BattleManager[_0xf01c32(0xa3c)];},Window_AutoBattleCancel['prototype'][_0x4376f0(0xa04)]=function(){const _0x96c4d0=_0x4376f0;if(!BattleManager[_0x96c4d0(0xa3c)])return;(Input['isTriggered']('ok')||Input[_0x96c4d0(0x55f)](_0x96c4d0(0x67b))||TouchInput[_0x96c4d0(0x405)]()||TouchInput[_0x96c4d0(0x1ff)]())&&(SoundManager[_0x96c4d0(0xb30)](),BattleManager['_autoBattle']=![],Input[_0x96c4d0(0x976)](),TouchInput[_0x96c4d0(0x976)]());};function Window_EnemyName(){this['initialize'](...arguments);}Window_EnemyName[_0x4376f0(0x705)]=Object[_0x4376f0(0xbdd)](Window_StatusBase[_0x4376f0(0x705)]),Window_EnemyName['prototype'][_0x4376f0(0xa32)]=Window_EnemyName,Window_EnemyName[_0x4376f0(0x705)]['initialize']=function(_0x5c5a3e){const _0x1ba256=_0x4376f0;this[_0x1ba256(0x765)]=_0x5c5a3e,this['_text']='';const _0x155afe=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x1ba256(0x552)]()*0x4);Window_StatusBase[_0x1ba256(0x705)][_0x1ba256(0x72f)][_0x1ba256(0x34b)](this,_0x155afe),this['setBackgroundType'](0x2),this['contentsOpacity']=0x0;},Window_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x395)]=function(){const _0x33e6c3=_0x4376f0;this[_0x33e6c3(0x7fb)]=0x0;},Window_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x9b1)]=function(){const _0x31bf2a=_0x4376f0;return $gameTroop[_0x31bf2a(0x277)]()[this['_enemyID']];},Window_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x75b)]=function(){const _0x4bcc4f=_0x4376f0;Window_StatusBase[_0x4bcc4f(0x705)]['update'][_0x4bcc4f(0x34b)](this),this['enemy']()&&this[_0x4bcc4f(0x9b1)]()[_0x4bcc4f(0x7d3)]()!==this[_0x4bcc4f(0x879)]&&(this[_0x4bcc4f(0x879)]=this['enemy']()[_0x4bcc4f(0x7d3)](),this[_0x4bcc4f(0x31b)]()),this[_0x4bcc4f(0xc47)](),this[_0x4bcc4f(0x68f)]();},Window_EnemyName[_0x4376f0(0x705)][_0x4376f0(0xc47)]=function(){const _0x1d2239=_0x4376f0;if(!this[_0x1d2239(0x9b1)]()){if(this[_0x1d2239(0xafd)]>0x0)this[_0x1d2239(0xafd)]-=0x10;}else{if(this[_0x1d2239(0x9b1)]()[_0x1d2239(0x57e)]()){if(this['contentsOpacity']>0x0)this[_0x1d2239(0xafd)]-=0x10;}else{if(SceneManager['_scene'][_0x1d2239(0x1d8)]&&SceneManager[_0x1d2239(0x982)][_0x1d2239(0x1d8)][_0x1d2239(0xb71)]&&SceneManager[_0x1d2239(0x982)][_0x1d2239(0x1d8)][_0x1d2239(0x2e9)][_0x1d2239(0x3e9)](this[_0x1d2239(0x9b1)]())){if(this[_0x1d2239(0xafd)]<0xff)this['contentsOpacity']+=0x10;}else this[_0x1d2239(0xafd)]>0x0&&(this[_0x1d2239(0xafd)]-=0x10);}}},Window_EnemyName[_0x4376f0(0x705)]['updatePosition']=function(){const _0x47daaa=_0x4376f0;if(!this[_0x47daaa(0x9b1)]())return;SceneManager[_0x47daaa(0x20d)]()?this['x']=Graphics[_0x47daaa(0x375)]-this['enemy']()[_0x47daaa(0x3f1)]()[_0x47daaa(0x4f3)]:this['x']=this[_0x47daaa(0x9b1)]()['battler']()[_0x47daaa(0x4f3)];this['x']-=Math[_0x47daaa(0x1c6)](this[_0x47daaa(0x895)]/0x2),this['y']=this['enemy']()[_0x47daaa(0x3f1)]()[_0x47daaa(0x90f)]-Math['round'](this[_0x47daaa(0x552)]()*1.5);const _0x46792b=VisuMZ[_0x47daaa(0x19c)][_0x47daaa(0xae8)][_0x47daaa(0x653)];this['x']+=_0x46792b[_0x47daaa(0x448)]||0x0,this['y']+=_0x46792b[_0x47daaa(0x666)]||0x0;},Window_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x326)]=function(){const _0x802f41=_0x4376f0;Window_Base['prototype']['resetFontSettings'][_0x802f41(0x34b)](this),this[_0x802f41(0x5c0)][_0x802f41(0x8e1)]=VisuMZ['BattleCore'][_0x802f41(0xae8)][_0x802f41(0x653)][_0x802f41(0x6c6)];},Window_EnemyName[_0x4376f0(0x705)][_0x4376f0(0x31b)]=function(){const _0x26d136=_0x4376f0;Window_StatusBase[_0x26d136(0x705)][_0x26d136(0x31b)]['call'](this),this[_0x26d136(0x5c0)][_0x26d136(0x976)]();if(!this[_0x26d136(0x9b1)]())return;this['drawEnemyName']();},Window_EnemyName[_0x4376f0(0x705)]['drawEnemyName']=function(){const _0x10679a=_0x4376f0;this[_0x10679a(0x879)]=this[_0x10679a(0x9b1)]()[_0x10679a(0x7d3)]();const _0x21531a=this['textSizeEx'](this[_0x10679a(0x879)])[_0x10679a(0x895)],_0x4b2b19=Math[_0x10679a(0x1c6)]((this[_0x10679a(0x3f6)]-_0x21531a)/0x2);this[_0x10679a(0x693)](this['_text'],_0x4b2b19,0x0,_0x21531a+0x8);},Window_BattleLog['prototype']['maxLines']=function(){const _0x300995=_0x4376f0;return VisuMZ[_0x300995(0x19c)][_0x300995(0xae8)]['BattleLog']['MaxLines'];},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x62f)]=function(){const _0x470b0c=_0x4376f0;return VisuMZ[_0x470b0c(0x19c)][_0x470b0c(0xae8)][_0x470b0c(0xa03)][_0x470b0c(0x749)];},Window_BattleLog[_0x4376f0(0x705)]['backColor']=function(){const _0x2a57b9=_0x4376f0;return VisuMZ[_0x2a57b9(0x19c)][_0x2a57b9(0xae8)]['BattleLog'][_0x2a57b9(0x87c)];},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x1a7)]=function(){return![];},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x8ab)]=function(_0xf3276a,_0x580dd2){const _0x243ef8=_0x4376f0;this[_0x243ef8(0xc0b)](_0x243ef8(0x583)),BattleManager['invokeAction'](_0xf3276a,_0x580dd2),this[_0x243ef8(0x8f8)]();},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x7e9)]=function(_0x37e300,_0x57221e,_0x5b5786){const _0xc90532=_0x4376f0;this[_0xc90532(0xc0b)]('actionSplicePoint'),BattleManager[_0xc90532(0x9c7)](_0x37e300,_0x57221e,_0x5b5786),this[_0xc90532(0x8f8)]();},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x583)]=function(){this['callNextMethod']();},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x6b0)]=function(_0x25f17f){const _0x52c6de=_0x4376f0,_0x189e97=Array[_0x52c6de(0x705)][_0x52c6de(0x393)][_0x52c6de(0x34b)](arguments,0x1),_0x58e532={'name':_0x25f17f,'params':_0x189e97},_0x2d2e84=this[_0x52c6de(0xbd4)][_0x52c6de(0x424)](_0x1f9f0b=>_0x1f9f0b[_0x52c6de(0x7d3)])[_0x52c6de(0x68d)](_0x52c6de(0x583));_0x2d2e84>=0x0?this[_0x52c6de(0xbd4)][_0x52c6de(0x4f4)](_0x2d2e84,0x0,_0x58e532):this[_0x52c6de(0xbd4)]['push'](_0x58e532);},Window_BattleLog[_0x4376f0(0x705)]['unshift']=function(_0x54cedd){const _0x3597f5=_0x4376f0,_0x33ab38=Array['prototype'][_0x3597f5(0x393)][_0x3597f5(0x34b)](arguments,0x1);this[_0x3597f5(0xbd4)][_0x3597f5(0xc0b)]({'name':_0x54cedd,'params':_0x33ab38});},Window_BattleLog['prototype'][_0x4376f0(0x154)]=function(){const _0x49a41e=_0x4376f0;if(!$gameTemp[_0x49a41e(0xb0f)]())return;console[_0x49a41e(0x28e)](this['_methods'][_0x49a41e(0x424)](_0x34ef34=>_0x34ef34['name'])[_0x49a41e(0x39c)]('\x0a'));},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x1f3)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x31b)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x31b)]=function(){const _0x27d962=_0x4376f0;this[_0x27d962(0x6d0)]=!![];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x3dc)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x75b)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x75b)]=function(){const _0x282d52=_0x4376f0;VisuMZ[_0x282d52(0x19c)][_0x282d52(0x3dc)][_0x282d52(0x34b)](this);if(this[_0x282d52(0x6d0)])this[_0x282d52(0x84c)]();},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x84c)]=function(){const _0x8b5c89=_0x4376f0;this[_0x8b5c89(0x6d0)]=![],VisuMZ['BattleCore'][_0x8b5c89(0x1f3)][_0x8b5c89(0x34b)](this);},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x728)]=function(_0x48f209){const _0x58ec75=_0x4376f0;let _0x53444c=VisuMZ[_0x58ec75(0x19c)][_0x58ec75(0xae8)][_0x58ec75(0xa03)]['TextAlign']['toLowerCase']()['trim'](),_0x16476d=this['_lines'][_0x48f209];if(_0x16476d[_0x58ec75(0x844)](/<LEFT>/i))_0x53444c=_0x58ec75(0x220);else{if(_0x16476d[_0x58ec75(0x844)](/<CENTER>/i))_0x53444c='center';else _0x16476d[_0x58ec75(0x844)](/<RIGHT>/i)&&(_0x53444c=_0x58ec75(0x77b));}_0x16476d=_0x16476d[_0x58ec75(0x6f6)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x16476d=_0x16476d['replace'](/\\I\[0\]/gi,'');const _0x331ff6=this[_0x58ec75(0xc3c)](_0x48f209);this[_0x58ec75(0x5c0)][_0x58ec75(0xb07)](_0x331ff6['x'],_0x331ff6['y'],_0x331ff6[_0x58ec75(0x895)],_0x331ff6[_0x58ec75(0x399)]);const _0x1ac1b8=this[_0x58ec75(0x629)](_0x16476d)[_0x58ec75(0x895)];let _0x1fe940=_0x331ff6['x'];if(_0x53444c===_0x58ec75(0xbe8))_0x1fe940+=(_0x331ff6[_0x58ec75(0x895)]-_0x1ac1b8)/0x2;else _0x53444c===_0x58ec75(0x77b)&&(_0x1fe940+=_0x331ff6[_0x58ec75(0x895)]-_0x1ac1b8);this[_0x58ec75(0x693)](_0x16476d,_0x1fe940,_0x331ff6['y'],_0x1ac1b8+0x8);},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x6e3)]=function(_0x518b0d){const _0x20f6d7=_0x4376f0;this[_0x20f6d7(0x5d8)][_0x20f6d7(0x6b0)](_0x518b0d),this['refresh'](),this[_0x20f6d7(0x8f8)]();},Window_BattleLog[_0x4376f0(0x705)]['updateWaitMode']=function(){const _0x5aa02c=_0x4376f0;let _0x8e55fa=![];switch(this['_waitMode']){case _0x5aa02c(0xc0d):_0x8e55fa=this[_0x5aa02c(0x86d)][_0x5aa02c(0x799)]();break;case _0x5aa02c(0xbc2):_0x8e55fa=this['_spriteset'][_0x5aa02c(0x307)]();break;case'animation':_0x8e55fa=this[_0x5aa02c(0x86d)][_0x5aa02c(0x898)]();break;case _0x5aa02c(0xb29):_0x8e55fa=this[_0x5aa02c(0x86d)][_0x5aa02c(0x91a)]();break;case'jump':_0x8e55fa=this[_0x5aa02c(0x86d)][_0x5aa02c(0x22a)]();break;case _0x5aa02c(0x945):_0x8e55fa=this[_0x5aa02c(0x86d)]['isAnyoneChangingOpacity']();break;}return!_0x8e55fa&&(this[_0x5aa02c(0x5ac)]=''),_0x8e55fa;},Window_BattleLog['prototype'][_0x4376f0(0x183)]=function(){const _0x5be3ed=_0x4376f0;this[_0x5be3ed(0x8d7)]('animation');},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x7bb)]=function(){const _0x1907ff=_0x4376f0;this[_0x1907ff(0x8d7)](_0x1907ff(0xb29));},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x328)]=function(){const _0x516b87=_0x4376f0;this['setWaitMode'](_0x516b87(0x9a3));},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xb7c)]=function(){const _0xab4638=_0x4376f0;this[_0xab4638(0x8d7)](_0xab4638(0x945));},Window_BattleLog[_0x4376f0(0x705)]['startTurn']=function(){const _0x447517=_0x4376f0,_0x46d2ee=VisuMZ[_0x447517(0x19c)]['Settings'][_0x447517(0xa03)];if(!_0x46d2ee[_0x447517(0x4df)])return;this[_0x447517(0x6b0)](_0x447517(0x6e3),_0x46d2ee[_0x447517(0x1a8)][_0x447517(0xa30)]($gameTroop[_0x447517(0xb39)]())),this['push']('waitCount',_0x46d2ee[_0x447517(0xba7)]),this[_0x447517(0x6b0)](_0x447517(0x976));};var $subject,$action,$targets;Window_BattleLog['prototype'][_0x4376f0(0xaa0)]=function(_0x1d3d8f,_0x2a94ea,_0x3ddc9f){const _0x2b67b7=_0x4376f0;$subject=_0x1d3d8f,$action=_0x2a94ea,$targets=_0x3ddc9f,this[_0x2b67b7(0x12d)](_0x2a94ea)?BattleManager[_0x2b67b7(0x23c)]():this['usePremadeActionSequence'](_0x1d3d8f,_0x2a94ea,_0x3ddc9f);},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x12d)]=function(_0x3041ab){const _0x2676ec=_0x4376f0;if(!SceneManager['isSceneBattle']())return![];if(!_0x3041ab)return![];if(!_0x3041ab[_0x2676ec(0x269)]())return![];if(_0x3041ab[_0x2676ec(0x269)]()[_0x2676ec(0x54f)][_0x2676ec(0x844)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x2676ec(0x23e)](_0x3041ab[_0x2676ec(0x269)]()))return!![];return![];},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xade)]=function(_0x2f1df1,_0x3f4ae,_0xfdb0d9){const _0x77a9a4=_0x4376f0;this[_0x77a9a4(0x877)](_0x2f1df1,_0x3f4ae,_0xfdb0d9),this[_0x77a9a4(0x2ba)](_0x2f1df1,_0x3f4ae,_0xfdb0d9),this[_0x77a9a4(0x4de)](_0x2f1df1,_0x3f4ae,_0xfdb0d9);},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x377)]=function(_0x3f0bea,_0x24fd19){const _0x89814d=_0x4376f0,_0x1ef570=VisuMZ[_0x89814d(0x19c)][_0x89814d(0xae8)][_0x89814d(0xa03)];_0x1ef570[_0x89814d(0x76f)]&&this['push']('addText','<CENTER>%1'[_0x89814d(0xa30)](DataManager['battleDisplayText'](_0x24fd19)));if(DataManager[_0x89814d(0x842)](_0x24fd19)){if(_0x1ef570[_0x89814d(0xab6)])this[_0x89814d(0x91f)](_0x24fd19[_0x89814d(0x626)],_0x3f0bea,_0x24fd19);if(_0x1ef570[_0x89814d(0xc32)])this[_0x89814d(0x91f)](_0x24fd19[_0x89814d(0x397)],_0x3f0bea,_0x24fd19);}else{if(_0x1ef570[_0x89814d(0x8c2)])this[_0x89814d(0x91f)](TextManager[_0x89814d(0xa42)],_0x3f0bea,_0x24fd19);}},Window_BattleLog['prototype'][_0x4376f0(0x877)]=function(_0x4bc234,_0x5b365b,_0x35ef8e){const _0x2a0000=_0x4376f0,_0x32cf4f=_0x5b365b[_0x2a0000(0x269)]();this[_0x2a0000(0x377)](_0x4bc234,_0x32cf4f),this[_0x2a0000(0x6b0)](_0x2a0000(0x510),_0x4bc234,_0x35ef8e,!![]),this[_0x2a0000(0x6b0)](_0x2a0000(0x1bf),_0x4bc234,_0x5b365b),this[_0x2a0000(0x6b0)]('waitForMovement'),this[_0x2a0000(0x6b0)](_0x2a0000(0xb2d),_0x4bc234,_0x5b365b),this[_0x2a0000(0x6b0)](_0x2a0000(0x183));},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x2ba)]=function(_0xd270d1,_0x2b7b92,_0x396a9c){const _0x3f280e=_0x4376f0;if(this[_0x3f280e(0x584)](_0x2b7b92))this['autoMeleeSingleTargetActionSet'](_0xd270d1,_0x2b7b92,_0x396a9c);else{if(this[_0x3f280e(0xbcd)](_0x2b7b92))this['autoMeleeMultiTargetActionSet'](_0xd270d1,_0x2b7b92,_0x396a9c);else _0x2b7b92[_0x3f280e(0xa40)]()?this[_0x3f280e(0x7ae)](_0xd270d1,_0x2b7b92,_0x396a9c):this[_0x3f280e(0x86f)](_0xd270d1,_0x2b7b92,_0x396a9c);}},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x9c1)]=function(_0x5c5117,_0x13eb4b,_0x489990,_0x362d8b){const _0x5b2a90=_0x4376f0;if(_0x13eb4b){const _0xd6f48b=_0x5c5117[_0x5b2a90(0x3f1)]();this['push']('performJump',[_0x5c5117],_0x489990,_0x362d8b),this[_0x5b2a90(0x6b0)]('performMoveToPoint',_0x5c5117,_0xd6f48b[_0x5b2a90(0x6e9)],_0xd6f48b[_0x5b2a90(0x62b)],_0x362d8b,![],_0x5b2a90(0x544)),this[_0x5b2a90(0x6b0)](_0x5b2a90(0x6cf),[_0x5c5117],_0x5b2a90(0x7bc)),this[_0x5b2a90(0x6b0)](_0x5b2a90(0x417)),this[_0x5b2a90(0x6b0)](_0x5b2a90(0x6cf),[_0x5c5117],'walk');}},Window_BattleLog['prototype']['isMeleeSingleTargetAction']=function(_0x1845fa){const _0x264708=_0x4376f0;if(!_0x1845fa[_0x264708(0x620)]())return![];if(!_0x1845fa[_0x264708(0x82c)]())return![];if(!_0x1845fa[_0x264708(0x192)]())return![];return VisuMZ['BattleCore'][_0x264708(0xae8)][_0x264708(0x1e5)][_0x264708(0x6c2)];},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xaf4)]=function(_0x1b1e17,_0x40381c,_0x4ef533){const _0x285b79=_0x4376f0,_0x2a7aac=_0x1b1e17[_0x285b79(0xab8)]()[_0x285b79(0x2a6)]<0x2,_0x12ced3=0x14,_0x262c3c=0x30;let _0x4de69f=!![];_0x4ef533[_0x285b79(0xa3a)]>0x0&&_0x1b1e17[_0x285b79(0xb9d)]()===_0x4ef533[0x0][_0x285b79(0xb9d)]()&&(_0x4de69f=![]);_0x2a7aac&&_0x4de69f&&(this['push'](_0x285b79(0x211),[_0x1b1e17],_0x262c3c,_0x12ced3),this['push'](_0x285b79(0x707),_0x1b1e17,_0x4ef533,_0x285b79(0x577),_0x12ced3,!![],'Linear',!![]),this['push']('requestMotion',[_0x1b1e17],'walk'),this[_0x285b79(0x6b0)]('waitForMovement'));let _0xec4bbb=_0x40381c[_0x285b79(0x66c)]()?this[_0x285b79(0xc49)](_0x1b1e17):0x1;for(let _0x449f36=0x0;_0x449f36<_0xec4bbb;_0x449f36++){_0x40381c[_0x285b79(0x66c)]()&&_0x1b1e17[_0x285b79(0xb9d)]()&&this[_0x285b79(0x6b0)](_0x285b79(0x673),_0x1b1e17,_0x449f36),_0x40381c['item']()['animationId']<0x0?this['targetActionSet'](_0x1b1e17,_0x40381c,_0x4ef533):this[_0x285b79(0x86f)](_0x1b1e17,_0x40381c,_0x4ef533);}_0x40381c[_0x285b79(0x66c)]()&&_0x1b1e17['isActor']()&&this[_0x285b79(0x6b0)](_0x285b79(0xc16),_0x1b1e17),this[_0x285b79(0x6b0)](_0x285b79(0x510),_0x1b1e17,_0x4ef533,![]),this[_0x285b79(0x9c1)](_0x1b1e17,_0x2a7aac,_0x262c3c,_0x12ced3);},Window_BattleLog['prototype'][_0x4376f0(0xbcd)]=function(_0x37f107){const _0x4ae425=_0x4376f0;if(!_0x37f107['isPhysical']())return![];if(!_0x37f107[_0x4ae425(0x539)]())return![];if(!_0x37f107[_0x4ae425(0x192)]())return![];return VisuMZ[_0x4ae425(0x19c)][_0x4ae425(0xae8)][_0x4ae425(0x1e5)]['AutoMeleeAoE'];},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x228)]=function(_0x3b2ada,_0x4e225b,_0xee2536){const _0xa67418=_0x4376f0,_0x290858=_0x3b2ada[_0xa67418(0xab8)]()[_0xa67418(0x2a6)]<0x2,_0x2ec52f=0x14,_0x317eb7=0x30;if(_0x290858){this['push']('performJump',[_0x3b2ada],_0x317eb7,_0x2ec52f);const _0x1382f6=_0xee2536[_0xa67418(0xa3a)]>0x1?_0xa67418(0x78d):_0xa67418(0x577);this[_0xa67418(0x6b0)](_0xa67418(0x707),_0x3b2ada,_0xee2536,_0x1382f6,_0x2ec52f,!![],_0xa67418(0x544),!![]),this[_0xa67418(0x6b0)](_0xa67418(0x6cf),[_0x3b2ada],_0xa67418(0x175)),this[_0xa67418(0x6b0)](_0xa67418(0x417));}let _0x90f46=_0x4e225b[_0xa67418(0x66c)]()?this[_0xa67418(0xc49)](_0x3b2ada):0x1;for(let _0x179115=0x0;_0x179115<_0x90f46;_0x179115++){_0x4e225b[_0xa67418(0x66c)]()&&_0x3b2ada[_0xa67418(0xb9d)]()&&this[_0xa67418(0x6b0)](_0xa67418(0x673),_0x3b2ada,_0x179115),this[_0xa67418(0x86f)](_0x3b2ada,_0x4e225b,_0xee2536);}_0x4e225b[_0xa67418(0x66c)]()&&_0x3b2ada[_0xa67418(0xb9d)]()&&this[_0xa67418(0x6b0)]('clearActiveWeaponSet',_0x3b2ada),this[_0xa67418(0x6b0)]('applyImmortal',_0x3b2ada,_0xee2536,![]),this[_0xa67418(0x9c1)](_0x3b2ada,_0x290858,_0x317eb7,_0x2ec52f);},Window_BattleLog['prototype'][_0x4376f0(0x7ae)]=function(_0x2e70c1,_0x388753,_0x11737f){const _0x30d7e0=_0x4376f0,_0x408d54=_0x388753[_0x30d7e0(0x269)]();for(const _0x394b43 of _0x11737f){if(!_0x394b43)continue;this[_0x30d7e0(0x6b0)](_0x30d7e0(0x5ff),_0x2e70c1,_0x388753),this[_0x30d7e0(0x6b0)](_0x30d7e0(0x199),Sprite_Battler[_0x30d7e0(0x8c1)]),this[_0x30d7e0(0x6b0)]('showAnimation',_0x2e70c1,[_0x394b43],_0x408d54[_0x30d7e0(0x8d4)]),this[_0x30d7e0(0x6b0)](_0x30d7e0(0x199),0x18),this['push'](_0x30d7e0(0x8ab),_0x2e70c1,_0x394b43);}},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x86f)]=function(_0x5db590,_0x54be74,_0x2c03aa){const _0x5e0e1d=_0x4376f0,_0x1dd7e6=_0x54be74[_0x5e0e1d(0x269)]();let _0x3d2462=_0x54be74[_0x5e0e1d(0x66c)]()?0x1+_0x5db590[_0x5e0e1d(0x63c)]():0x1;while(_0x3d2462--){this[_0x5e0e1d(0x6b0)](_0x5e0e1d(0x5ff),_0x5db590,_0x54be74),this[_0x5e0e1d(0x6b0)](_0x5e0e1d(0x199),Sprite_Battler[_0x5e0e1d(0x8c1)]),this[_0x5e0e1d(0x6b0)](_0x5e0e1d(0x9a7),_0x5db590,_0x2c03aa[_0x5e0e1d(0xb80)](),_0x1dd7e6[_0x5e0e1d(0x8d4)]),this[_0x5e0e1d(0x6b0)](_0x5e0e1d(0x183));}for(const _0x355297 of _0x2c03aa){if(!_0x355297)continue;this[_0x5e0e1d(0x6b0)](_0x5e0e1d(0x8ab),_0x5db590,_0x355297);}},Window_BattleLog['prototype'][_0x4376f0(0x4de)]=function(_0x3d1f8d,_0x2697c5,_0x19498b){const _0x510722=_0x4376f0,_0x3b38d2=_0x2697c5[_0x510722(0x269)]();this['push']('applyImmortal',_0x3d1f8d,_0x19498b,![]),this[_0x510722(0x6b0)](_0x510722(0x9d0)),this[_0x510722(0x6b0)](_0x510722(0x2ee)),this[_0x510722(0x6b0)](_0x510722(0x976)),this[_0x510722(0x6b0)]('performActionEnd',_0x3d1f8d),this[_0x510722(0x6b0)](_0x510722(0x417));},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xa1d)]=function(_0x4bb130){$subject=null,$action=null,$targets=[];},VisuMZ[_0x4376f0(0x19c)]['Window_BattleLog_displayCurrentState']=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x81d)],Window_BattleLog['prototype']['displayCurrentState']=function(_0x549739){const _0x420652=_0x4376f0;if(!VisuMZ[_0x420652(0x19c)]['Settings'][_0x420652(0xa03)][_0x420652(0x769)])return;VisuMZ[_0x420652(0x19c)][_0x420652(0xa64)]['call'](this,_0x549739);},Window_BattleLog[_0x4376f0(0x705)]['displayCounter']=function(_0x3b4b9d){const _0x505248=_0x4376f0;this[_0x505248(0x6b0)](_0x505248(0x909),_0x3b4b9d);VisuMZ['BattleCore']['Settings'][_0x505248(0x1e5)][_0x505248(0x83f)]&&this[_0x505248(0x6b0)](_0x505248(0x9a7),_0x3b4b9d,[BattleManager['_subject']],-0x1);if(!VisuMZ[_0x505248(0x19c)][_0x505248(0xae8)]['BattleLog']['ShowCounter'])return;this[_0x505248(0x6b0)](_0x505248(0x6e3),TextManager[_0x505248(0xba5)][_0x505248(0xa30)](_0x3b4b9d['name']()));const _0x53fdcc=VisuMZ[_0x505248(0x19c)][_0x505248(0xae8)][_0x505248(0xa03)]['ShowCounterWait']??0x0;if(_0x53fdcc>0x0)this[_0x505248(0x6b0)](_0x505248(0x199),_0x53fdcc);;},Window_BattleLog[_0x4376f0(0x705)]['displayReflection']=function(_0x554c66){const _0x5873d5=_0x4376f0;this[_0x5873d5(0x6b0)]('performReflection',_0x554c66);if(!VisuMZ['BattleCore'][_0x5873d5(0xae8)][_0x5873d5(0xa03)]['ShowReflect'])return;this[_0x5873d5(0x6b0)](_0x5873d5(0x6e3),TextManager[_0x5873d5(0x8ff)][_0x5873d5(0xa30)](_0x554c66[_0x5873d5(0x7d3)]()));const _0xd46dca=VisuMZ['BattleCore'][_0x5873d5(0xae8)]['BattleLog'][_0x5873d5(0x62c)]??0x0;if(_0xd46dca>0x0)this['push']('waitCount',_0xd46dca);;},Window_BattleLog[_0x4376f0(0x705)]['displayReflectionPlayBack']=function(_0x4f66eb,_0x570b85){const _0x2d376b=_0x4376f0;if(VisuMZ['BattleCore'][_0x2d376b(0xae8)][_0x2d376b(0x1e5)][_0x2d376b(0x1af)]){const _0x110199=_0x570b85[_0x2d376b(0x269)]();this['push'](_0x2d376b(0x9a7),_0x4f66eb,[_0x4f66eb],_0x110199[_0x2d376b(0x8d4)]);}},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x61c)]=function(_0x312200,_0x2b84ad){const _0x45d21c=_0x4376f0;this[_0x45d21c(0x6b0)](_0x45d21c(0x33e),_0x312200,_0x2b84ad);if(!VisuMZ[_0x45d21c(0x19c)][_0x45d21c(0xae8)]['BattleLog']['ShowSubstitute'])return;const _0x128f55=_0x312200[_0x45d21c(0x7d3)](),_0x2d730e=TextManager[_0x45d21c(0x4c0)][_0x45d21c(0xa30)](_0x128f55,_0x2b84ad['name']());this[_0x45d21c(0x6b0)](_0x45d21c(0x6e3),_0x2d730e);const _0x13772e=VisuMZ[_0x45d21c(0x19c)][_0x45d21c(0xae8)][_0x45d21c(0xa03)]['ShowSubstituteWait']??0x0;if(_0x13772e>0x0)this['push'](_0x45d21c(0x199),_0x13772e);;},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa39)]=Window_BattleLog['prototype'][_0x4376f0(0xb1c)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xb1c)]=function(_0xfdbf09,_0x72c9c6){const _0x1db850=_0x4376f0;VisuMZ[_0x1db850(0x19c)][_0x1db850(0xa39)][_0x1db850(0x34b)](this,_0xfdbf09,_0x72c9c6);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x71e)]=Window_BattleLog['prototype'][_0x4376f0(0x910)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x910)]=function(_0x5ca8a6){const _0x513600=_0x4376f0;if(!VisuMZ[_0x513600(0x19c)][_0x513600(0xae8)]['BattleLog']['ShowFailure'])return;VisuMZ['BattleCore'][_0x513600(0x71e)][_0x513600(0x34b)](this,_0x5ca8a6);},VisuMZ['BattleCore']['Window_BattleLog_displayCritical']=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x31e)],Window_BattleLog['prototype'][_0x4376f0(0x31e)]=function(_0x291624){const _0x1a1e4d=_0x4376f0;if(!VisuMZ[_0x1a1e4d(0x19c)][_0x1a1e4d(0xae8)]['BattleLog']['ShowCritical'])return;VisuMZ[_0x1a1e4d(0x19c)][_0x1a1e4d(0x711)]['call'](this,_0x291624);},VisuMZ['BattleCore'][_0x4376f0(0x8f3)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x787)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x787)]=function(_0x234cef){const _0x1a56fc=_0x4376f0;!VisuMZ[_0x1a56fc(0x19c)]['Settings'][_0x1a56fc(0xa03)][_0x1a56fc(0x814)]?this['push'](_0x1a56fc(0xafc),_0x234cef):VisuMZ['BattleCore']['Window_BattleLog_displayMiss']['call'](this,_0x234cef);},VisuMZ['BattleCore'][_0x4376f0(0x414)]=Window_BattleLog['prototype'][_0x4376f0(0x390)],Window_BattleLog['prototype'][_0x4376f0(0x390)]=function(_0x3a64c3){const _0x287d21=_0x4376f0;!VisuMZ[_0x287d21(0x19c)][_0x287d21(0xae8)][_0x287d21(0xa03)][_0x287d21(0x814)]?_0x3a64c3[_0x287d21(0xbb6)]()['physical']?this[_0x287d21(0x6b0)](_0x287d21(0x721),_0x3a64c3):this['push'](_0x287d21(0x4b5),_0x3a64c3):VisuMZ['BattleCore'][_0x287d21(0x414)][_0x287d21(0x34b)](this,_0x3a64c3);},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xbd2)]=function(_0x10287d){const _0x44f2df=_0x4376f0;_0x10287d[_0x44f2df(0x5ca)]=0x0,_0x10287d['result']()['hpAffected']&&(_0x10287d['result']()[_0x44f2df(0x8c0)]>0x0&&!_0x10287d[_0x44f2df(0xbb6)]()['drain']&&(_0x10287d[_0x44f2df(0x5ca)]=_0x10287d[_0x44f2df(0xbb6)]()[_0x44f2df(0x8c0)],this[_0x44f2df(0x6b0)](_0x44f2df(0xb77),_0x10287d)),_0x10287d[_0x44f2df(0xbb6)]()['hpDamage']<0x0&&this['push'](_0x44f2df(0x507),_0x10287d),VisuMZ['BattleCore'][_0x44f2df(0xae8)][_0x44f2df(0xa03)][_0x44f2df(0x2fc)]&&this[_0x44f2df(0x6b0)](_0x44f2df(0x6e3),this['makeHpDamageText'](_0x10287d)));},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x243)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xb9c)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xb9c)]=function(_0xa471b7){const _0x53694b=_0x4376f0;_0xa471b7['_lastMpDamage']=0x0;$action&&$action[_0x53694b(0x269)]()&&$action[_0x53694b(0x269)]()['note'][_0x53694b(0x844)](/<(?:DAMAGE|DMG|SHAKE) FLINCH>/i)&&(_0xa471b7[_0x53694b(0xbb6)]()[_0x53694b(0xb22)]>0x0&&!_0xa471b7[_0x53694b(0xbb6)]()['drain']&&(_0xa471b7['_lastMpDamage']=_0xa471b7[_0x53694b(0xbb6)]()[_0x53694b(0xb22)],this[_0x53694b(0x6b0)](_0x53694b(0xb77),_0xa471b7)));if(!VisuMZ[_0x53694b(0x19c)][_0x53694b(0xae8)][_0x53694b(0xa03)][_0x53694b(0x726)])return;VisuMZ['BattleCore'][_0x53694b(0x243)][_0x53694b(0x34b)](this,_0xa471b7);},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x732)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x9b6)],Window_BattleLog[_0x4376f0(0x705)]['displayTpDamage']=function(_0x28c6b2){const _0x1107b5=_0x4376f0;_0x28c6b2[_0x1107b5(0x57b)]=0x0;$action&&$action['item']()&&$action['item']()[_0x1107b5(0x54f)][_0x1107b5(0x844)](/<(?:DAMAGE|DMG|SHAKE) FLINCH>/i)&&(_0x28c6b2[_0x1107b5(0xbb6)]()['tpDamage']>0x0&&(_0x28c6b2[_0x1107b5(0x57b)]=_0x28c6b2[_0x1107b5(0xbb6)]()[_0x1107b5(0x98a)],this[_0x1107b5(0x6b0)](_0x1107b5(0xb77),_0x28c6b2)));if(!VisuMZ[_0x1107b5(0x19c)]['Settings']['BattleLog'][_0x1107b5(0xaf8)])return;VisuMZ[_0x1107b5(0x19c)][_0x1107b5(0x732)][_0x1107b5(0x34b)](this,_0x28c6b2);},Window_BattleLog['prototype']['displayAffectedStatus']=function(_0x181597){const _0x1956a6=_0x4376f0;_0x181597[_0x1956a6(0xbb6)]()[_0x1956a6(0x874)]()&&(this[_0x1956a6(0x6b0)](_0x1956a6(0x91e)),this[_0x1956a6(0x938)](_0x181597),this[_0x1956a6(0x89a)](_0x181597),this[_0x1956a6(0x6b0)](_0x1956a6(0x9d0)));},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xbc5)]=function(_0x645c9){const _0x15c1e3=_0x4376f0,_0x572e62=_0x645c9[_0x15c1e3(0xbb6)](),_0x288ae1=_0x572e62[_0x15c1e3(0x4e8)]();for(const _0x11365b of _0x288ae1){const _0x4f7d7a=_0x645c9[_0x15c1e3(0xb9d)]()?_0x11365b[_0x15c1e3(0x626)]:_0x11365b[_0x15c1e3(0x397)];_0x4f7d7a&&VisuMZ[_0x15c1e3(0x19c)]['Settings'][_0x15c1e3(0xa03)][_0x15c1e3(0xab3)]&&(this[_0x15c1e3(0x6b0)](_0x15c1e3(0x998)),this['push'](_0x15c1e3(0x91e)),this[_0x15c1e3(0x6b0)]('addText',_0x4f7d7a['format'](_0x645c9[_0x15c1e3(0x7d3)]())),this[_0x15c1e3(0x6b0)](_0x15c1e3(0xc3e))),_0x11365b['id']===_0x645c9[_0x15c1e3(0x706)]()&&this[_0x15c1e3(0x6b0)](_0x15c1e3(0x5a8),_0x645c9);}},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x908)]=function(_0x164c26){const _0x43ce13=_0x4376f0;if(!VisuMZ[_0x43ce13(0x19c)][_0x43ce13(0xae8)][_0x43ce13(0xa03)]['ShowRemovedState'])return;const _0x483de3=_0x164c26['result'](),_0x3b197e=_0x483de3['removedStateObjects']();for(const _0x195957 of _0x3b197e){_0x195957[_0x43ce13(0x6e2)]&&(this[_0x43ce13(0x6b0)]('popBaseLine'),this[_0x43ce13(0x6b0)](_0x43ce13(0x91e)),this[_0x43ce13(0x6b0)](_0x43ce13(0x6e3),_0x195957['message4']['format'](_0x164c26[_0x43ce13(0x7d3)]())),this[_0x43ce13(0x6b0)](_0x43ce13(0xc3e)));}},Window_BattleLog['prototype'][_0x4376f0(0x89a)]=function(_0x429672){const _0x44a84e=_0x4376f0,_0x2f4f47=VisuMZ[_0x44a84e(0x19c)][_0x44a84e(0xae8)][_0x44a84e(0xa03)],_0x11ba2c=_0x429672[_0x44a84e(0xbb6)]();if(_0x2f4f47[_0x44a84e(0xc08)])this[_0x44a84e(0x579)](_0x429672,_0x11ba2c[_0x44a84e(0x1e0)],TextManager[_0x44a84e(0x2b6)]);if(_0x2f4f47[_0x44a84e(0x66a)])this[_0x44a84e(0x579)](_0x429672,_0x11ba2c[_0x44a84e(0x25e)],TextManager[_0x44a84e(0x1d5)]);if(_0x2f4f47[_0x44a84e(0x53e)])this[_0x44a84e(0x579)](_0x429672,_0x11ba2c[_0x44a84e(0x4bf)],TextManager[_0x44a84e(0x9ec)]);},Window_BattleLog['prototype'][_0x4376f0(0x579)]=function(_0x510b82,_0x24f202,_0x50dc5b){const _0x95e7d2=_0x4376f0;for(const _0x37d7b5 of _0x24f202){const _0x3042d2=_0x50dc5b[_0x95e7d2(0xa30)](_0x510b82[_0x95e7d2(0x7d3)](),TextManager['param'](_0x37d7b5));this[_0x95e7d2(0x6b0)](_0x95e7d2(0x998)),this['push'](_0x95e7d2(0x91e)),this[_0x95e7d2(0x6b0)]('addText',_0x3042d2),this[_0x95e7d2(0x6b0)](_0x95e7d2(0xc3e));}},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x47c)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x976)],Window_BattleLog[_0x4376f0(0x705)]['clear']=function(){const _0x26f4aa=_0x4376f0;VisuMZ[_0x26f4aa(0x19c)][_0x26f4aa(0x47c)][_0x26f4aa(0x34b)](this),this[_0x26f4aa(0x8f8)]();},VisuMZ['BattleCore'][_0x4376f0(0x327)]=Window_BattleLog['prototype'][_0x4376f0(0x91e)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x91e)]=function(){const _0x91805e=_0x4376f0;VisuMZ[_0x91805e(0x19c)][_0x91805e(0x327)][_0x91805e(0x34b)](this),this[_0x91805e(0x8f8)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x8e6)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x998)],Window_BattleLog['prototype']['popBaseLine']=function(){const _0x5b2921=_0x4376f0;VisuMZ[_0x5b2921(0x19c)]['Window_BattleLog_popBaseLine'][_0x5b2921(0x34b)](this),this[_0x5b2921(0x84c)](),this[_0x5b2921(0x8f8)]();},VisuMZ[_0x4376f0(0x19c)]['Window_BattleLog_popupDamage']=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x135)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x135)]=function(_0x1275b0){const _0x3992f8=_0x4376f0;VisuMZ[_0x3992f8(0x19c)][_0x3992f8(0x33a)][_0x3992f8(0x34b)](this,_0x1275b0),this[_0x3992f8(0x8f8)]();},Window_BattleLog[_0x4376f0(0x705)]['waitForNewLine']=function(){const _0x3ac36f=_0x4376f0;let _0x25d111=0x0;this[_0x3ac36f(0x733)][_0x3ac36f(0xa3a)]>0x0&&(_0x25d111=this['_baseLineStack'][this[_0x3ac36f(0x733)]['length']-0x1]),this[_0x3ac36f(0x5d8)][_0x3ac36f(0xa3a)]>_0x25d111?this[_0x3ac36f(0xc3e)]():this[_0x3ac36f(0x8f8)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x1b0)]=Window_BattleLog['prototype'][_0x4376f0(0x1bf)],Window_BattleLog[_0x4376f0(0x705)]['performActionStart']=function(_0x20bbeb,_0x4818){const _0x425e6e=_0x4376f0;VisuMZ['BattleCore'][_0x425e6e(0x1b0)][_0x425e6e(0x34b)](this,_0x20bbeb,_0x4818),this[_0x425e6e(0x8f8)]();},VisuMZ['BattleCore']['Window_BattleLog_performAction']=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x5ff)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x5ff)]=function(_0x5d0084,_0x27c497){const _0x1129d4=_0x4376f0;VisuMZ[_0x1129d4(0x19c)][_0x1129d4(0x6ae)][_0x1129d4(0x34b)](this,_0x5d0084,_0x27c497),this['callNextMethod']();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x407)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x95c)],Window_BattleLog['prototype'][_0x4376f0(0x95c)]=function(_0x263d4f){const _0x46c240=_0x4376f0;VisuMZ[_0x46c240(0x19c)][_0x46c240(0x407)][_0x46c240(0x34b)](this,_0x263d4f);for(const _0x16b5ee of BattleManager[_0x46c240(0x559)]()){if(!_0x16b5ee)continue;if(_0x16b5ee[_0x46c240(0x57e)]())continue;_0x16b5ee['performActionEndMembers']();}this[_0x46c240(0x8f8)]();},VisuMZ[_0x4376f0(0x19c)]['Window_BattleLog_performDamage']=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xb77)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xb77)]=function(_0x1cc54a){const _0x21f81c=_0x4376f0;VisuMZ[_0x21f81c(0x19c)][_0x21f81c(0x23a)][_0x21f81c(0x34b)](this,_0x1cc54a),this[_0x21f81c(0x8f8)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xc07)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xafc)],Window_BattleLog['prototype'][_0x4376f0(0xafc)]=function(_0x405fd0){const _0x3ab4c1=_0x4376f0;VisuMZ[_0x3ab4c1(0x19c)]['Window_BattleLog_performMiss'][_0x3ab4c1(0x34b)](this,_0x405fd0),this[_0x3ab4c1(0x8f8)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa28)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x507)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x507)]=function(_0x24afa2){const _0x167e56=_0x4376f0;VisuMZ[_0x167e56(0x19c)]['Window_BattleLog_performRecovery'][_0x167e56(0x34b)](this,_0x24afa2),this[_0x167e56(0x8f8)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xba0)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x721)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x721)]=function(_0x1faf3c){const _0x52d509=_0x4376f0;VisuMZ[_0x52d509(0x19c)][_0x52d509(0xba0)][_0x52d509(0x34b)](this,_0x1faf3c),this[_0x52d509(0x8f8)]();},VisuMZ[_0x4376f0(0x19c)]['Window_BattleLog_performMagicEvasion']=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x4b5)],Window_BattleLog['prototype']['performMagicEvasion']=function(_0x2aa6b4){const _0x36f3bf=_0x4376f0;VisuMZ[_0x36f3bf(0x19c)]['Window_BattleLog_performMagicEvasion']['call'](this,_0x2aa6b4),this['callNextMethod']();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa54)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x909)],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x909)]=function(_0x1ee775){const _0x575f29=_0x4376f0;VisuMZ[_0x575f29(0x19c)]['Window_BattleLog_performCounter']['call'](this,_0x1ee775),this[_0x575f29(0x8f8)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xa2a)]=Window_BattleLog[_0x4376f0(0x705)]['performReflection'],Window_BattleLog['prototype']['performReflection']=function(_0x47280a){const _0x5a0127=_0x4376f0;VisuMZ[_0x5a0127(0x19c)][_0x5a0127(0xa2a)][_0x5a0127(0x34b)](this,_0x47280a),this[_0x5a0127(0x8f8)]();},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x64d)]=Window_BattleLog['prototype']['performSubstitute'],Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x33e)]=function(_0x14d51a,_0x13c0d7){const _0x53fed4=_0x4376f0;VisuMZ[_0x53fed4(0x19c)]['Window_BattleLog_performSubstitute'][_0x53fed4(0x34b)](this,_0x14d51a,_0x13c0d7),this[_0x53fed4(0x8f8)]();},VisuMZ['BattleCore'][_0x4376f0(0x29f)]=Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x5a8)],Window_BattleLog['prototype']['performCollapse']=function(_0xafecc6){const _0x4ba967=_0x4376f0;VisuMZ['BattleCore'][_0x4ba967(0x29f)][_0x4ba967(0x34b)](this,_0xafecc6),this[_0x4ba967(0x8f8)]();},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0xb2d)]=function(_0x1de559,_0x40d4db){const _0x2d6204=_0x4376f0;_0x1de559['performCastAnimation'](_0x40d4db),this[_0x2d6204(0x8f8)]();},Window_BattleLog['prototype']['showEnemyAttackAnimation']=function(_0x1f95a5,_0x542db4){const _0x5e1980=_0x4376f0,_0x104ca1=_0x1f95a5[_0x5e1980(0x403)]();_0x104ca1<=0x0?SoundManager[_0x5e1980(0x97f)]():this[_0x5e1980(0x9ee)](_0x542db4,_0x104ca1);},Window_BattleLog['prototype'][_0x4376f0(0x510)]=function(_0x302a45,_0x5e10c1,_0x45f746){const _0x2ce59f=_0x4376f0,_0x54617b=[_0x302a45][_0x2ce59f(0x4f7)](_0x5e10c1);for(const _0x52a970 of _0x54617b){if(!_0x52a970)continue;_0x52a970['setImmortal'](_0x45f746);}this[_0x2ce59f(0x8f8)]();},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x199)]=function(_0x2e51e5){const _0x2c4c56=_0x4376f0;this[_0x2c4c56(0x555)]=_0x2e51e5;},Window_BattleLog[_0x4376f0(0x705)]['requestMotion']=function(_0x285e68,_0x3d30ec){const _0x4a6003=_0x4376f0;for(const _0x5e6415 of _0x285e68){if(!_0x5e6415)continue;_0x5e6415[_0x4a6003(0x6cf)](_0x3d30ec);}this[_0x4a6003(0x8f8)]();},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x525)]=function(_0x4ce362,_0x15b6f3,_0x501f4c,_0x307635,_0x12c8ab,_0x4da1f0){const _0x3a5882=_0x4376f0;_0x4ce362[_0x3a5882(0x77d)](_0x15b6f3,_0x501f4c,_0x307635,_0x12c8ab,_0x4da1f0,-0x1),this['callNextMethod']();},Window_BattleLog[_0x4376f0(0x705)][_0x4376f0(0x707)]=function(_0x2a0db3,_0x647bf5,_0x3d5ceb,_0x54d52e,_0x448cb8,_0x4f06c5,_0x2a80c8){const _0x5bf272=_0x4376f0,_0x53c16e=Math['min'](..._0x647bf5[_0x5bf272(0x424)](_0x39d8d6=>_0x39d8d6['battler']()[_0x5bf272(0x4f3)]-_0x39d8d6['battler']()['mainSpriteWidth']()/0x2)),_0x1f1095=Math['max'](..._0x647bf5['map'](_0x3d5a23=>_0x3d5a23[_0x5bf272(0x3f1)]()[_0x5bf272(0x4f3)]+_0x3d5a23[_0x5bf272(0x3f1)]()[_0x5bf272(0x126)]()/0x2)),_0x15fa05=Math[_0x5bf272(0x136)](..._0x647bf5[_0x5bf272(0x424)](_0x141d67=>_0x141d67[_0x5bf272(0x3f1)]()['_baseY']-_0x141d67[_0x5bf272(0x3f1)]()[_0x5bf272(0x832)]())),_0x4dcb15=Math[_0x5bf272(0xa63)](..._0x647bf5[_0x5bf272(0x424)](_0x47b5df=>_0x47b5df['battler']()[_0x5bf272(0x90f)])),_0x1fa295=_0x647bf5[_0x5bf272(0x4bd)](_0xc4a847=>_0xc4a847['isActor']())[_0x5bf272(0xa3a)],_0x2d8164=_0x647bf5[_0x5bf272(0x4bd)](_0x54024c=>_0x54024c[_0x5bf272(0x7b4)]())[_0x5bf272(0xa3a)];let _0x412b12=0x0,_0x23b0bf=0x0;if(_0x3d5ceb['match'](/front/i))_0x412b12=_0x1fa295>=_0x2d8164?_0x53c16e:_0x1f1095;else{if(_0x3d5ceb[_0x5bf272(0x844)](/middle/i))_0x412b12=(_0x53c16e+_0x1f1095)/0x2,_0x2a80c8=-0x1;else _0x3d5ceb[_0x5bf272(0x844)](/back/i)&&(_0x412b12=_0x1fa295>=_0x2d8164?_0x1f1095:_0x53c16e);}if(_0x3d5ceb['match'](/head/i))_0x23b0bf=_0x15fa05;else{if(_0x3d5ceb['match'](/center/i)){_0x23b0bf=(_0x15fa05+_0x4dcb15)/0x2;if(_0x2a0db3[_0x5bf272(0x3f1)]())_0x23b0bf+=_0x2a0db3[_0x5bf272(0x3f1)]()[_0x5bf272(0x399)]/0x2;}else _0x3d5ceb[_0x5bf272(0x844)](/base/i)&&(_0x23b0bf=_0x4dcb15);}_0x2a0db3['moveBattlerToPoint'](_0x412b12,_0x23b0bf,_0x54d52e,_0x448cb8,_0x4f06c5,_0x2a80c8),this[_0x5bf272(0x8f8)]();},Window_BattleLog[_0x4376f0(0x705)]['performJump']=function(_0x15fb89,_0x474dd0,_0x37cb74){const _0x25a972=_0x4376f0;for(const _0x1af95f of _0x15fb89){if(!_0x1af95f)continue;_0x1af95f[_0x25a972(0x9b3)](_0x474dd0,_0x37cb74);}this[_0x25a972(0x8f8)]();};function Window_BattleMultiTarget(){const _0x122349=_0x4376f0;this[_0x122349(0x72f)](...arguments);}Window_BattleMultiTarget[_0x4376f0(0x705)]=Object[_0x4376f0(0xbdd)](Window_Command[_0x4376f0(0x705)]),Window_BattleMultiTarget[_0x4376f0(0x705)][_0x4376f0(0xa32)]=Window_BattleMultiTarget,VisuMZ['BattleCore'][_0x4376f0(0xae8)][_0x4376f0(0x2d0)]=VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x2d0)]||{},Window_BattleMultiTarget[_0x4376f0(0x5bf)]=VisuMZ[_0x4376f0(0x19c)]['Settings'][_0x4376f0(0x2d0)][_0x4376f0(0x244)]??0x118,Window_BattleMultiTarget[_0x4376f0(0x8c4)]=VisuMZ[_0x4376f0(0x19c)]['Settings'][_0x4376f0(0x2d0)][_0x4376f0(0xa33)]??0x2,Window_BattleMultiTarget[_0x4376f0(0x2e4)]=VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x2d0)][_0x4376f0(0x71f)]??!![],Window_BattleMultiTarget[_0x4376f0(0x922)]=VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x2d0)][_0x4376f0(0x56e)]??'All\x20Allies',Window_BattleMultiTarget[_0x4376f0(0x735)]=VisuMZ[_0x4376f0(0x19c)]['Settings']['MultiTarget'][_0x4376f0(0xac1)]??_0x4376f0(0x66e),Window_BattleMultiTarget[_0x4376f0(0x5c5)]=VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x2d0)]['ActorOffsetX']??0x0,Window_BattleMultiTarget[_0x4376f0(0x7b1)]=VisuMZ['BattleCore'][_0x4376f0(0xae8)]['MultiTarget'][_0x4376f0(0x15b)]??0x0,Window_BattleMultiTarget[_0x4376f0(0xaac)]=VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x2d0)][_0x4376f0(0xb10)]??0x0,Window_BattleMultiTarget[_0x4376f0(0x594)]=VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x2d0)]['EnemyOffsetY']??0x0,Window_BattleMultiTarget[_0x4376f0(0x705)]['initialize']=function(_0x5c2aee,_0x436d50){const _0x41d99d=_0x4376f0;this[_0x41d99d(0x92c)]=_0x436d50,Window_Command[_0x41d99d(0x705)]['initialize'][_0x41d99d(0x34b)](this,_0x5c2aee),this[_0x41d99d(0x48d)](Window_BattleMultiTarget[_0x41d99d(0x8c4)]),this[_0x41d99d(0x16e)](),this[_0x41d99d(0xa38)](),this[_0x41d99d(0x2d5)]();},Window_BattleMultiTarget[_0x4376f0(0x705)][_0x4376f0(0x8b7)]=function(){const _0xef9124=_0x4376f0;return this[_0xef9124(0x92c)];},Window_BattleMultiTarget[_0x4376f0(0x705)][_0x4376f0(0x7f1)]=function(){const _0xffaeaf=_0x4376f0;let _0x2486cb=this['forActor']()?Window_BattleMultiTarget['ALL_ACTORS']:Window_BattleMultiTarget[_0xffaeaf(0x735)];if(Imported[_0xffaeaf(0x7ba)]&&Window_BattleMultiTarget[_0xffaeaf(0x2e4)]){this[_0xffaeaf(0x81c)]=this[_0xffaeaf(0x8b7)]()?'pagedown':_0xffaeaf(0xb4c),this[_0xffaeaf(0x3a3)]=TextManager[_0xffaeaf(0xc1a)](this['_buttonKey']);const _0xe321e=VisuMZ[_0xffaeaf(0x78c)][_0xffaeaf(0xae8)][_0xffaeaf(0xb44)][_0xffaeaf(0x5d6)];_0x2486cb=_0xe321e[_0xffaeaf(0xa30)](this['_buttonText'],_0x2486cb);}this[_0xffaeaf(0x511)](_0x2486cb,_0xffaeaf(0x304));},Window_BattleMultiTarget[_0x4376f0(0x705)][_0x4376f0(0x176)]=function(_0x3e0e40){const _0x24fc6a=_0x4376f0,_0x4519f4=this[_0x24fc6a(0x634)](_0x3e0e40);this[_0x24fc6a(0x7ac)](),this[_0x24fc6a(0x329)](this[_0x24fc6a(0x729)](_0x3e0e40));const _0x34e76d=this[_0x24fc6a(0x9cb)](_0x3e0e40),_0x531650=this[_0x24fc6a(0x629)](_0x34e76d)[_0x24fc6a(0x895)],_0x2f4388=_0x4519f4['x']+Math['floor']((_0x4519f4[_0x24fc6a(0x895)]-_0x531650)/0x2);this[_0x24fc6a(0x693)](_0x34e76d,_0x2f4388,_0x4519f4['y'],_0x4519f4['width']);},Window_BattleMultiTarget[_0x4376f0(0x705)][_0x4376f0(0x75b)]=function(){const _0xe1351d=_0x4376f0;Window_Command['prototype'][_0xe1351d(0x75b)]['call'](this),this[_0xe1351d(0x7a3)](),this[_0xe1351d(0x387)]();},Window_BattleMultiTarget[_0x4376f0(0x705)][_0x4376f0(0x7a3)]=function(){const _0x432396=_0x4376f0;this[_0x432396(0x42f)]=this[_0x432396(0x470)]();},Window_BattleMultiTarget[_0x4376f0(0x705)]['visibilityState']=function(){const _0x30afe2=_0x4376f0,_0x393cc2=BattleManager[_0x30afe2(0x8af)](),_0x11ae42=_0x393cc2&&_0x393cc2['canSingleOrMultipleSelect']();if(!_0x11ae42)return![];const _0x36c92c=SceneManager[_0x30afe2(0x982)];if(this[_0x30afe2(0x8b7)]()){if(_0x36c92c[_0x30afe2(0x26e)][_0x30afe2(0xb71)]&&_0x36c92c[_0x30afe2(0x26e)][_0x30afe2(0x2a2)][_0x30afe2(0x512)])return!![];if(_0x36c92c[_0x30afe2(0x1d8)]['active']&&_0x36c92c['_enemyWindow'][_0x30afe2(0x2a2)][_0x30afe2(0x512)])return!![];}else{if(_0x36c92c['_enemyWindow'][_0x30afe2(0xb71)]&&_0x36c92c[_0x30afe2(0x1d8)][_0x30afe2(0x2a2)][_0x30afe2(0xb4c)])return!![];}return![];},Window_BattleMultiTarget[_0x4376f0(0x705)][_0x4376f0(0x387)]=function(){const _0xcd1cda=_0x4376f0;if(!Imported[_0xcd1cda(0x7ba)])return;this[_0xcd1cda(0x3a3)]!==TextManager['getInputButtonString'](this[_0xcd1cda(0x81c)])&&this[_0xcd1cda(0x31b)]();},Window_BattleMultiTarget[_0x4376f0(0x705)][_0x4376f0(0x833)]=function(){const _0x3f067b=_0x4376f0;if(this[_0x3f067b(0x42f)]&&TouchInput[_0x3f067b(0x405)]()){const _0xc21ea=this['hitIndex']();if(_0xc21ea>=0x0){const _0x1d7406=this[_0x3f067b(0x8b7)]()?'pagedown':_0x3f067b(0xb4c);Input[_0x3f067b(0xb6f)](_0x1d7406);}}};function Window_DamageCounter(){this['initialize'](...arguments);}Window_DamageCounter[_0x4376f0(0x705)]=Object[_0x4376f0(0xbdd)](Window_Base[_0x4376f0(0x705)]),Window_DamageCounter[_0x4376f0(0x705)][_0x4376f0(0xa32)]=Window_DamageCounter,Window_DamageCounter[_0x4376f0(0xa70)]={'enabled':VisuMZ[_0x4376f0(0x19c)]['Settings']['ComboWindow'][_0x4376f0(0x480)]??!![],'customFontFace':VisuMZ['BattleCore'][_0x4376f0(0xae8)][_0x4376f0(0x1ab)][_0x4376f0(0x93e)]??'','textAlign':VisuMZ[_0x4376f0(0x19c)]['Settings'][_0x4376f0(0x1ab)][_0x4376f0(0x990)]??_0x4376f0(0x220),'hitsDmgFmt':VisuMZ['BattleCore'][_0x4376f0(0xae8)][_0x4376f0(0x1ab)]['hitsDmgFmt']??_0x4376f0(0x9f1),'hitsHealFmt':VisuMZ['BattleCore'][_0x4376f0(0xae8)][_0x4376f0(0x1ab)][_0x4376f0(0x65a)]??_0x4376f0(0xc1e),'totalDmgFmt':VisuMZ[_0x4376f0(0x19c)]['Settings'][_0x4376f0(0x1ab)][_0x4376f0(0x2cf)]??_0x4376f0(0x475),'totalHealFmt':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)]['ComboWindow'][_0x4376f0(0x4a1)]??'\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','fadeShiftX':VisuMZ[_0x4376f0(0x19c)]['Settings']['ComboWindow'][_0x4376f0(0x3e2)]??-0x2,'fadeShiftY':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x1ab)]['fadeShiftY']??0x0,'positionOffsetX':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x1ab)][_0x4376f0(0x474)]??0x0,'positionOffsetY':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x1ab)][_0x4376f0(0x214)]??0x0,'updateDuration':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x1ab)]['updateDuration']??0x14,'minimumStayDuration':VisuMZ['BattleCore'][_0x4376f0(0xae8)][_0x4376f0(0x1ab)][_0x4376f0(0xb9b)]??0x28,'minimumHits':VisuMZ[_0x4376f0(0x19c)]['Settings'][_0x4376f0(0x1ab)]['minimumHits']??0x1,'opacitySpeed':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x1ab)][_0x4376f0(0x1f1)]??0x10},Window_DamageCounter[_0x4376f0(0x705)][_0x4376f0(0x72f)]=function(_0x264a44){const _0x119cca=_0x4376f0;this[_0x119cca(0xb0d)]=0x0,Window_Base[_0x119cca(0x705)][_0x119cca(0x72f)]['call'](this,_0x264a44),this[_0x119cca(0x432)]=_0x264a44['x'],this[_0x119cca(0x67d)]=_0x264a44['y'],this['resetCounter'](),this[_0x119cca(0x48d)](0x2);},Window_DamageCounter[_0x4376f0(0x705)][_0x4376f0(0x84a)]=function(){const _0x46991c=_0x4376f0;this['_updateDuration']=0x0,this['_totalHits']=0x0,this['_totalDamage']=0x0,this[_0x46991c(0x3a6)]=0x0,this['_targetDamage']=0x0;},Window_DamageCounter[_0x4376f0(0x705)][_0x4376f0(0x326)]=function(){const _0x548478=_0x4376f0;Window_Base[_0x548478(0x705)][_0x548478(0x326)]['call'](this);const _0x40d0fe=Window_DamageCounter[_0x548478(0xa70)];_0x40d0fe['customFontFace']?this['contents']['fontFace']=_0x40d0fe[_0x548478(0x7d4)]:this[_0x548478(0x5c0)][_0x548478(0x786)]=$gameSystem[_0x548478(0x78e)]();};var $comboWindowReset=function(){const _0x56ad25=_0x4376f0;if(!SceneManager[_0x56ad25(0x446)]())return;const _0x5bf589=SceneManager[_0x56ad25(0x982)]['_damageCounterWindow'];if(_0x5bf589)_0x5bf589['resetCounter']();};Window_DamageCounter[_0x4376f0(0x705)][_0x4376f0(0x419)]=function(_0x5d84fd){const _0x11773e=_0x4376f0;this[_0x11773e(0x3a6)]+=Math[_0x11773e(0x1c6)](_0x5d84fd);const _0x34c7b1=Window_DamageCounter[_0x11773e(0xa70)];this[_0x11773e(0x4dc)]=_0x34c7b1[_0x11773e(0x775)],this[_0x11773e(0x3a6)]>=_0x34c7b1['minimumHits']&&(this[_0x11773e(0xb0d)]=_0x34c7b1['minimumStayDuration']);};var $comboWindowIncreaseHits=function(_0x543410){const _0x357437=_0x4376f0;if(!SceneManager[_0x357437(0x446)]())return;const _0xdab4ab=SceneManager[_0x357437(0x982)][_0x357437(0xc00)];if(_0xdab4ab)_0xdab4ab[_0x357437(0x419)](_0x543410);};Window_DamageCounter['prototype'][_0x4376f0(0x2ea)]=function(_0x320688){const _0x5a8bde=_0x4376f0;this['_targetDamage']+=Math[_0x5a8bde(0x1c6)](_0x320688);const _0x235653=Window_DamageCounter[_0x5a8bde(0xa70)];this['_updateDuration']=_0x235653[_0x5a8bde(0x775)],this[_0x5a8bde(0x3a6)]>=_0x235653['minimumHits']&&(this[_0x5a8bde(0xb0d)]=_0x235653['minimumStayDuration']);};var $comboWindowIncreaseDamage=function(_0x410f5c){const _0x3f2d36=_0x4376f0;if(!SceneManager[_0x3f2d36(0x446)]())return;const _0x26b4da=SceneManager[_0x3f2d36(0x982)][_0x3f2d36(0xc00)];if(_0x26b4da)_0x26b4da[_0x3f2d36(0x2ea)](_0x410f5c);},$comboWindowIncreaseHealing=function(_0x268fd3){const _0x4e021e=_0x4376f0;if(!SceneManager[_0x4e021e(0x446)]())return;const _0x27704d=SceneManager[_0x4e021e(0x982)][_0x4e021e(0xc00)];if(_0x27704d)_0x27704d[_0x4e021e(0x2ea)](-_0x268fd3);};VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x147)]=Scene_Battle['prototype'][_0x4376f0(0xb43)],Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0xb43)]=function(){const _0x4072ca=_0x4376f0;this[_0x4072ca(0x8e7)](),VisuMZ[_0x4072ca(0x19c)][_0x4072ca(0x147)][_0x4072ca(0x34b)](this);},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x8e7)]=function(){const _0x519369=_0x4376f0;if(!Window_DamageCounter['SETTINGS'][_0x519369(0x25f)])return;const _0x4bc07b=this[_0x519369(0x406)](),_0x52e43c=new Window_DamageCounter(_0x4bc07b);this['addWindow'](_0x52e43c),this[_0x519369(0xc00)]=_0x52e43c;},Scene_Battle[_0x4376f0(0x705)][_0x4376f0(0x406)]=function(){const _0xbd844e=_0x4376f0;if(VisuMZ['BattleCore'][_0xbd844e(0xae8)][_0xbd844e(0x1ab)][_0xbd844e(0x51e)])return VisuMZ[_0xbd844e(0x19c)][_0xbd844e(0xae8)][_0xbd844e(0x1ab)][_0xbd844e(0x51e)][_0xbd844e(0x34b)](this);const _0x58a9be=Math[_0xbd844e(0x554)](Graphics[_0xbd844e(0x895)]/0x4),_0x4bf35e=this[_0xbd844e(0xb48)](0x2,!![]),_0x37a9a9=0x0+this[_0xbd844e(0x1b4)](),_0x5b5f14=Math['round'](Graphics[_0xbd844e(0x21b)]*0x1/0x3)+this[_0xbd844e(0xaba)]();return new Rectangle(_0x37a9a9,_0x5b5f14,_0x58a9be,_0x4bf35e);},Scene_Battle[_0x4376f0(0x705)]['comboWindowOffsetX']=function(){const _0x40fbbb=_0x4376f0;return Window_DamageCounter[_0x40fbbb(0xa70)][_0x40fbbb(0x803)];},Scene_Battle['prototype'][_0x4376f0(0xaba)]=function(){const _0x2fe70a=_0x4376f0;return Window_DamageCounter[_0x2fe70a(0xa70)][_0x2fe70a(0x625)];},Window_DamageCounter['prototype'][_0x4376f0(0x75b)]=function(){const _0x1e968e=_0x4376f0;Window_Base[_0x1e968e(0x705)]['update'][_0x1e968e(0x34b)](this),this['updateCounter'](),this['updateOpacity']();},Window_DamageCounter[_0x4376f0(0x705)][_0x4376f0(0x5ed)]=function(){const _0xf96d39=_0x4376f0;if(this['_updateDuration']<=0x0)return;const _0x509355=this[_0xf96d39(0x4dc)];this['_totalHits']=this[_0xf96d39(0x3a6)],this['_totalDamage']=(this[_0xf96d39(0xbf5)]*(_0x509355-0x1)+this['_targetDamage'])/_0x509355,this['_updateDuration']--,this[_0xf96d39(0x4dc)]<=0x0&&(this[_0xf96d39(0x288)]=this[_0xf96d39(0x3a6)],this[_0xf96d39(0xbf5)]=this[_0xf96d39(0x839)]),this[_0xf96d39(0x31b)]();},Window_DamageCounter[_0x4376f0(0x705)]['updateOpacity']=function(){const _0x49e164=_0x4376f0,_0x33b1c9=Window_DamageCounter['SETTINGS'],_0x613ff6=this[_0x49e164(0x470)](),_0x766bcf=_0x33b1c9[_0x49e164(0x1f1)]||0x1;if(_0x613ff6&&this[_0x49e164(0xafd)]<0xff)this[_0x49e164(0xafd)]+=_0x766bcf;else!_0x613ff6&&this[_0x49e164(0xafd)]>0x0&&(this[_0x49e164(0xafd)]-=_0x766bcf,this['x']+=_0x33b1c9['fadeShiftX']||0x0,this['y']+=_0x33b1c9[_0x49e164(0x498)]||0x0);},Window_DamageCounter[_0x4376f0(0x705)][_0x4376f0(0x470)]=function(){const _0x68d6cc=_0x4376f0,_0x98e815=Window_DamageCounter[_0x68d6cc(0xa70)];if(this[_0x68d6cc(0x3a6)]>=_0x98e815[_0x68d6cc(0x76a)])return!![];if(this[_0x68d6cc(0xb0d)]-->0x0)return!![];return![];},VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0x762)]=Game_Action[_0x4376f0(0x705)][_0x4376f0(0x593)],Game_Action[_0x4376f0(0x705)]['executeHpDamage']=function(_0x582db4,_0x191601){const _0x2493e5=_0x4376f0;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x191601),VisuMZ[_0x2493e5(0x19c)][_0x2493e5(0x762)]['call'](this,_0x582db4,_0x191601);},VisuMZ[_0x4376f0(0x19c)]['BattleManager_endAction_ComboWindow']=BattleManager['endAction'],BattleManager[_0x4376f0(0xa1d)]=function(){const _0x547b2c=_0x4376f0;$comboWindowReset(),VisuMZ['BattleCore']['BattleManager_endAction_ComboWindow'][_0x547b2c(0x34b)](this);},Window_DamageCounter['prototype'][_0x4376f0(0x31b)]=function(){const _0x35db8f=_0x4376f0;this['contents'][_0x35db8f(0x976)](),this[_0x35db8f(0x3d6)](),this['x']=this[_0x35db8f(0x432)],this['y']=this[_0x35db8f(0x67d)];},Window_DamageCounter[_0x4376f0(0x705)]['textAlignment']=function(){const _0x2bfd9a=_0x4376f0,_0x178f56=Window_DamageCounter['SETTINGS'];return _0x178f56[_0x2bfd9a(0xb8c)]||'left';},Window_DamageCounter[_0x4376f0(0x705)][_0x4376f0(0x3cd)]=function(){const _0x26bbe4=_0x4376f0,_0x51197b=Window_DamageCounter[_0x26bbe4(0xa70)];let _0x10a19e=this[_0x26bbe4(0xbf5)]>=0x0?_0x51197b[_0x26bbe4(0x287)]:_0x51197b['hitsHealFmt'];return _0x10a19e[_0x26bbe4(0xa30)](Math[_0x26bbe4(0x54d)](Math[_0x26bbe4(0x554)](this[_0x26bbe4(0x288)])));},Window_DamageCounter[_0x4376f0(0x705)][_0x4376f0(0xb81)]=function(){const _0x43d516=_0x4376f0,_0x262770=Window_DamageCounter[_0x43d516(0xa70)];let _0x2e135b=this[_0x43d516(0xbf5)]>=0x0?_0x262770[_0x43d516(0x2cf)]:_0x262770[_0x43d516(0x4a1)];return _0x2e135b[_0x43d516(0xa30)](Math['abs'](Math[_0x43d516(0x1c6)](this[_0x43d516(0xbf5)])));},Window_DamageCounter[_0x4376f0(0x705)][_0x4376f0(0x3d6)]=function(){const _0x3ab8de=_0x4376f0;if(VisuMZ[_0x3ab8de(0x19c)][_0x3ab8de(0xae8)][_0x3ab8de(0x1ab)][_0x3ab8de(0x8aa)])return VisuMZ[_0x3ab8de(0x19c)][_0x3ab8de(0xae8)][_0x3ab8de(0x1ab)][_0x3ab8de(0x8aa)][_0x3ab8de(0x34b)](this);let _0x1f13df=0x0,_0x16c211=0x0;const _0x1b8f21=this[_0x3ab8de(0x3cd)](),_0x241c30=this['textSizeEx'](_0x1b8f21);if(this[_0x3ab8de(0x36f)]()===_0x3ab8de(0x77b))_0x1f13df=this['innerWidth']-this[_0x3ab8de(0x3fa)]()-_0x241c30[_0x3ab8de(0x895)];else this[_0x3ab8de(0x36f)]()===_0x3ab8de(0xbe8)?_0x1f13df=Math[_0x3ab8de(0x627)]((this['innerWidth']-_0x241c30[_0x3ab8de(0x895)])/0x2):_0x1f13df=this[_0x3ab8de(0x3fa)]();this[_0x3ab8de(0x693)](_0x1b8f21,_0x1f13df,_0x16c211),_0x16c211+=Math[_0x3ab8de(0x554)](this[_0x3ab8de(0x552)]()*0x2/0x3);const _0x5f80c7=this[_0x3ab8de(0xb81)](),_0x165145=this[_0x3ab8de(0x629)](_0x5f80c7);if(this[_0x3ab8de(0x36f)]()===_0x3ab8de(0x77b))_0x1f13df=this[_0x3ab8de(0x3f6)]-this['itemPadding']()-_0x165145['width'];else this['textAlignment']()===_0x3ab8de(0xbe8)?_0x1f13df=Math[_0x3ab8de(0x627)]((this[_0x3ab8de(0x3f6)]-_0x165145['width'])/0x2):_0x1f13df=this[_0x3ab8de(0x3fa)]();this['drawTextEx'](_0x5f80c7,_0x1f13df,_0x16c211);};function Window_InBattleStatus(){const _0x575271=_0x4376f0;this[_0x575271(0x72f)](...arguments);}Window_InBattleStatus[_0x4376f0(0x705)]=Object[_0x4376f0(0xbdd)](Window_StatusBase[_0x4376f0(0x705)]),Window_InBattleStatus[_0x4376f0(0x705)]['constructor']=Window_InBattleStatus,Window_InBattleStatus[_0x4376f0(0xa70)]={'bgType':VisuMZ[_0x4376f0(0x19c)]['Settings'][_0x4376f0(0x526)]['StatusWindow_BgType']??0x0,'statusGraphic':VisuMZ['BattleCore']['Settings'][_0x4376f0(0x526)][_0x4376f0(0x5f2)]??'face','statusHelpDesc':VisuMZ[_0x4376f0(0x19c)]['Settings'][_0x4376f0(0x526)][_0x4376f0(0x819)]??_0x4376f0(0x9df),'pageButtons':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)][_0x4376f0(0x6d6)]??!![],'pageButtonPosition':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)]['InBattleStatus'][_0x4376f0(0x7ad)]??_0x4376f0(0x220),'pageOffsetX':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)][_0x4376f0(0x9be)]??0x0,'pageOffsetY':VisuMZ[_0x4376f0(0x19c)]['Settings'][_0x4376f0(0x526)][_0x4376f0(0x8da)]??0x0,'buffValueFmt':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)][_0x4376f0(0xbab)]??_0x4376f0(0x563),'debuffValueFmt':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)]['InBattleStatus'][_0x4376f0(0x8d0)]??'▼%1','enemyStatus':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)][_0x4376f0(0x478)]??!![],'enemyShowLevel':VisuMZ['BattleCore'][_0x4376f0(0xae8)]['InBattleStatus'][_0x4376f0(0x783)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)]['enemyHiddenParameter']??_0x4376f0(0x238),'enemyShowParametersAlways':VisuMZ[_0x4376f0(0x19c)]['Settings']['InBattleStatus'][_0x4376f0(0x770)]??![],'enemyShowParametersIfBattleTest':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)][_0x4376f0(0x782)]??!![],'enemyShowParametersIfDefeated':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)]['InBattleStatus'][_0x4376f0(0x6ec)]??!![]},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x72f)]=function(_0x4f0b89){const _0x152082=_0x4376f0;Window_StatusBase[_0x152082(0x705)][_0x152082(0x72f)][_0x152082(0x34b)](this,_0x4f0b89),this['setBackgroundType'](Window_InBattleStatus['SETTINGS']['bgType']),this[_0x152082(0x529)](),this['createStatesWindow'](),this['createPageButtons']();},Window_InBattleStatus[_0x4376f0(0x705)]['setBattler']=function(_0x50661b){const _0x53ec50=_0x4376f0;this[_0x53ec50(0x39a)]=_0x50661b,this[_0x53ec50(0x31b)](),this[_0x53ec50(0x45e)]&&this[_0x53ec50(0x45e)][_0x53ec50(0x6e8)](_0x50661b);},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x48e)]=function(){const _0x211195=_0x4376f0;Window_StatusBase[_0x211195(0x705)][_0x211195(0x48e)][_0x211195(0x34b)](this);if(this[_0x211195(0x45e)])this['_statesWindow']['open']();this[_0x211195(0x400)](),Imported['VisuMZ_3_StateTooltips']&&SceneManager[_0x211195(0x9fd)](null);},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x836)]=function(){const _0x577f4e=_0x4376f0;Window_StatusBase[_0x577f4e(0x705)][_0x577f4e(0x836)][_0x577f4e(0x34b)](this);if(this['_statesWindow'])this[_0x577f4e(0x45e)][_0x577f4e(0x836)]();},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x2bc)]=function(_0x3353c4){const _0x2c8cf6=_0x4376f0;this[_0x2c8cf6(0x90d)]=_0x3353c4;},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x7e4)]=function(){const _0x17c458=_0x4376f0;return this[_0x17c458(0x90d)]||SceneManager[_0x17c458(0x982)][_0x17c458(0x84b)];},Window_InBattleStatus['prototype']['loadFaceImages']=function(){const _0x375868=_0x4376f0;Window_StatusBase[_0x375868(0x705)][_0x375868(0x785)][_0x375868(0x34b)](this),this['loadOtherActorImages']();},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x3ba)]=function(){const _0x1c8462=_0x4376f0;for(const _0x2114f8 of $gameParty[_0x1c8462(0x277)]()){if(!_0x2114f8)continue;_0x2114f8[_0x1c8462(0xa01)]()&&ImageManager[_0x1c8462(0x60c)](_0x2114f8[_0x1c8462(0xa01)]()),_0x2114f8[_0x1c8462(0x4b8)]()&&ImageManager[_0x1c8462(0x925)](_0x2114f8[_0x1c8462(0x4b8)]()),Imported[_0x1c8462(0x19a)]&&_0x2114f8['getMenuImage']()&&ImageManager[_0x1c8462(0xb11)](_0x2114f8[_0x1c8462(0x2f7)]());}},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x529)]=function(){const _0x156ab6=_0x4376f0;this[_0x156ab6(0x966)]=new Sprite(),this[_0x156ab6(0x966)]['anchor']['x']=0.5,this[_0x156ab6(0x966)][_0x156ab6(0x7cf)]['y']=0x1,this[_0x156ab6(0x3e4)](this[_0x156ab6(0x966)]);},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x8ba)]=function(){const _0x3ce723=_0x4376f0,_0x354258=this['statesWindowRect'](),_0x1430ce=new Window_InBattleStatusStates(_0x354258);this[_0x3ce723(0x3e4)](_0x1430ce),_0x1430ce[_0x3ce723(0x3e3)](SceneManager['_scene']['_helpWindow']),this[_0x3ce723(0x45e)]=_0x1430ce;},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0xb6d)]=function(){const _0x58f687=_0x4376f0,_0x22a6ba=Window_InBattleStatusStates[_0x58f687(0xa70)][_0x58f687(0x69b)],_0x10f40a=Math[_0x58f687(0x136)](_0x22a6ba,Math[_0x58f687(0x627)](this[_0x58f687(0x895)]/0x2)),_0x1b5be5=Graphics[_0x58f687(0x375)]>0x44c?this[_0x58f687(0x399)]:this[_0x58f687(0x552)]()*0x4+this[_0x58f687(0x7fb)]*0x2,_0x5dd952=this['width']-_0x10f40a,_0x14f448=this[_0x58f687(0x399)]-_0x1b5be5;return new Rectangle(_0x5dd952,_0x14f448,_0x10f40a,_0x1b5be5);},Window_InBattleStatus[_0x4376f0(0x705)]['createPageButtons']=function(){const _0xe01a6d=_0x4376f0;if(!ConfigManager[_0xe01a6d(0x281)])return;if(!Window_InBattleStatus[_0xe01a6d(0xa70)][_0xe01a6d(0x6d6)])return;this['_pageupButton']=new Sprite_Button(_0xe01a6d(0xb4c)),this['_pageupButton']['x']=this[_0xe01a6d(0xc11)]()+Window_InBattleStatus['SETTINGS'][_0xe01a6d(0x9be)],this[_0xe01a6d(0x969)]['y']=this[_0xe01a6d(0x589)]()+Window_InBattleStatus[_0xe01a6d(0xa70)]['pageOffsetY'];const _0x3bce2e=this[_0xe01a6d(0x969)]['x']+this[_0xe01a6d(0x969)][_0xe01a6d(0x895)];this['_pagedownButton']=new Sprite_Button(_0xe01a6d(0x512)),this[_0xe01a6d(0x182)]['x']=_0x3bce2e+0x4,this['_pagedownButton']['y']=this[_0xe01a6d(0x969)]['y'],this['addChild'](this['_pageupButton']),this['addChild'](this['_pagedownButton']),this[_0xe01a6d(0x969)][_0xe01a6d(0x5e7)](this['previousActor'][_0xe01a6d(0x54e)](this)),this['_pagedownButton'][_0xe01a6d(0x5e7)](this['nextActor'][_0xe01a6d(0x54e)](this));},Window_InBattleStatus['prototype']['pageButtonX']=function(){const _0x3c1c24=_0x4376f0;if(Graphics[_0x3c1c24(0x375)]>0x44c&&Graphics[_0x3c1c24(0x21b)]>0x2bc){if(Window_InBattleStatus[_0x3c1c24(0xa70)][_0x3c1c24(0x7ad)]===_0x3c1c24(0x220)){let _0x16687f=Math[_0x3c1c24(0x554)]((-this['x']-0x64)/0x2);if(_0x16687f>=-0x64)_0x16687f=this['padding'];return _0x16687f;}else{const _0x4d6f3f=Graphics['boxWidth']-this['x']-this[_0x3c1c24(0x895)];let _0x2f914e=Math[_0x3c1c24(0x627)]((_0x4d6f3f-0x64)/0x2)+this[_0x3c1c24(0x895)];return _0x2f914e;}}else return this['width']-0x64-this['padding']/0x2;},Window_InBattleStatus[_0x4376f0(0x705)]['pageButtonY']=function(){const _0x117a07=_0x4376f0;return Graphics[_0x117a07(0x375)]>0x44c&&Graphics[_0x117a07(0x21b)]>0x2bc?this[_0x117a07(0x399)]-0x30-this[_0x117a07(0x7fb)]:0x30+this[_0x117a07(0x7fb)];},Window_InBattleStatus['prototype'][_0x4376f0(0x1ed)]=function(){const _0x286d56=_0x4376f0;let _0x54dfc7=this[_0x286d56(0x94d)]();if(_0x54dfc7['length']<=0x1&&!Window_InBattleStatus[_0x286d56(0xa70)][_0x286d56(0x478)])return;let _0x2bbf74=_0x54dfc7['indexOf'](this['_battler']);_0x2bbf74--;_0x2bbf74<0x0&&(Window_InBattleStatus[_0x286d56(0xa70)][_0x286d56(0x478)]&&(_0x54dfc7=this[_0x286d56(0x94d)](!![])),_0x2bbf74=_0x54dfc7[_0x286d56(0xa3a)]-0x1);const _0x4a6eb8=_0x54dfc7[_0x2bbf74];this['setBattler'](_0x4a6eb8),SoundManager[_0x286d56(0x86c)]();},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x139)]=function(){const _0x3e4c30=_0x4376f0;let _0x526cc6=this[_0x3e4c30(0x94d)]();if(_0x526cc6['length']<=0x1&&!Window_InBattleStatus[_0x3e4c30(0xa70)][_0x3e4c30(0x478)])return;let _0x1e58d6=_0x526cc6[_0x3e4c30(0x68d)](this[_0x3e4c30(0x39a)]);_0x1e58d6++;_0x1e58d6>=_0x526cc6[_0x3e4c30(0xa3a)]&&(Window_InBattleStatus['SETTINGS'][_0x3e4c30(0x478)]&&(_0x526cc6=this['getBattleMembers'](!![])),_0x1e58d6=0x0);const _0x378b78=_0x526cc6[_0x1e58d6];this[_0x3e4c30(0x6e8)](_0x378b78),SoundManager[_0x3e4c30(0x86c)]();},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x94d)]=function(_0x55e837){const _0x580317=_0x4376f0;let _0x44cfbd=[];const _0x1461b7=_0x55e837?this['_battler'][_0x580317(0xb45)]():this['_battler']['friendsUnit']();return _0x1461b7===$gameParty?_0x44cfbd=$gameParty[_0x580317(0x276)]():_0x44cfbd=$gameTroop[_0x580317(0x3a7)](),_0x44cfbd[_0x580317(0x246)](null);},Window_InBattleStatus['prototype']['update']=function(){const _0x5bad92=_0x4376f0;Window_Base[_0x5bad92(0x705)][_0x5bad92(0x75b)][_0x5bad92(0x34b)](this),this['processHandling']();},Window_InBattleStatus['prototype']['processHandling']=function(){const _0x44d2ff=_0x4376f0;if(this[_0x44d2ff(0xa52)]()){if(this[_0x44d2ff(0x293)]())return this[_0x44d2ff(0x32f)]();if(Input['isRepeated'](_0x44d2ff(0x77b)))return this['nextActor']();if(Input[_0x44d2ff(0x8b5)](_0x44d2ff(0x220)))return this[_0x44d2ff(0x1ed)]();}},SoundManager[_0x4376f0(0x86c)]=function(){const _0x68a8cc=_0x4376f0;this[_0x68a8cc(0x792)](0x0);},Window_InBattleStatus['prototype'][_0x4376f0(0xa52)]=function(){const _0x4f4e8a=_0x4376f0;return this[_0x4f4e8a(0x6b2)]()&&this['visible'];},Window_InBattleStatus['prototype'][_0x4376f0(0x293)]=function(){const _0x352169=_0x4376f0;if(Input['isTriggered'](_0x352169(0x67b)))return!![];if(TouchInput[_0x352169(0x1ff)]())return!![];return![];},Window_InBattleStatus['prototype']['processCancel']=function(){const _0x41c9b2=_0x4376f0;SoundManager[_0x41c9b2(0xb30)](),this['deactivate'](),this['_statesWindow']&&(this['_statesWindow']['deselect'](),this[_0x41c9b2(0x45e)][_0x41c9b2(0x16e)]()),SceneManager['_scene']['endInBattleStatus']();},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x400)]=function(){const _0x3ec48c=_0x4376f0;if(!this[_0x3ec48c(0x969)])return;if(!this[_0x3ec48c(0x182)])return;const _0x1f564c=$gameParty[_0x3ec48c(0x276)]()['length']>0x0||Window_InBattleStatus['SETTINGS'][_0x3ec48c(0x478)];this[_0x3ec48c(0x969)][_0x3ec48c(0x42f)]=_0x1f564c,this['_pagedownButton'][_0x3ec48c(0x42f)]=_0x1f564c;},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x31b)]=function(){const _0x18f562=_0x4376f0;Window_StatusBase['prototype'][_0x18f562(0x31b)]['call'](this);if(this[_0x18f562(0x966)])this[_0x18f562(0x966)][_0x18f562(0xa38)]();this[_0x18f562(0x5c0)][_0x18f562(0x976)](),this[_0x18f562(0x7b0)][_0x18f562(0x976)]();if(!this['_battler'])return;this['drawBattlerData']();},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x381)]=function(){const _0xceec4=_0x4376f0;if(VisuMZ[_0xceec4(0x19c)]['Settings'][_0xceec4(0x526)][_0xceec4(0x700)])return VisuMZ['BattleCore'][_0xceec4(0xae8)][_0xceec4(0x526)][_0xceec4(0x700)]['call'](this);{const _0x18a013=this[_0xceec4(0x73a)]()/0x2,_0x47e2ed=ImageManager[_0xceec4(0xae9)],_0x7ad802=_0x47e2ed/0x2-this[_0xceec4(0x552)]()*1.5;this['drawActorGraphic'](this[_0xceec4(0x39a)],_0x18a013+0x1,0x0,ImageManager[_0xceec4(0x6f5)],_0x47e2ed),this['drawActorSimpleStatus'](this[_0xceec4(0x39a)],_0x18a013+0xb4,_0x7ad802);}{let _0x2aaf41=this[_0xceec4(0x16b)](),_0x217c38=0x0,_0x88f56=Math[_0xceec4(0x554)](this[_0xceec4(0x16b)]()/0x2),_0x3ceda1=0x0;const _0x4169c6=this[_0xceec4(0xbde)]();let _0x429bed=_0x217c38;const _0x34bd7d=this[_0xceec4(0x715)]-ImageManager['faceHeight'],_0x4162eb=Math['ceil'](_0x4169c6[_0xceec4(0xa3a)]/0x2)*this[_0xceec4(0x552)]();let _0x31ab83=Math[_0xceec4(0x554)]((_0x34bd7d-_0x4162eb)/0x2)+ImageManager[_0xceec4(0xae9)],_0x298bc0=Math[_0xceec4(0x627)](_0x2aaf41/0x2);this[_0xceec4(0x45e)]['y']!==0x0&&(this[_0xceec4(0x45e)]['y']=_0x31ab83);for(const _0x1d4a32 of _0x4169c6){this[_0xceec4(0x371)](_0x429bed,_0x31ab83,_0x298bc0,this[_0xceec4(0x552)]()),this['drawParamData'](_0x1d4a32,_0x429bed,_0x31ab83,_0x298bc0),_0x3ceda1++,_0x3ceda1%0x2===0x0?(_0x429bed=_0x217c38,_0x31ab83+=this[_0xceec4(0x552)]()):_0x429bed=_0x88f56;}}},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x3f9)]=function(){const _0x86ef9e=_0x4376f0;return VisuMZ[_0x86ef9e(0x19c)][_0x86ef9e(0xae8)]['InBattleStatus'][_0x86ef9e(0x5f2)];},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x7da)]=function(_0x1c2b70,_0x500190,_0x3c539c,_0x24144d,_0x43596d){const _0x4b9c13=_0x4376f0;if(_0x1c2b70[_0x4b9c13(0xb9d)]())switch(this['graphicType']()){case'none':break;case _0x4b9c13(0x91c):this[_0x4b9c13(0x1f6)](_0x1c2b70,_0x500190,_0x3c539c+0x1,_0x24144d,_0x43596d-0x2);break;case'svbattler':this[_0x4b9c13(0x935)](_0x1c2b70,_0x500190,_0x3c539c+0x1,_0x24144d,_0x43596d-0x2);break;default:this['drawItemActorFace'](_0x1c2b70,_0x500190,_0x3c539c,_0x24144d,_0x43596d);break;}else this[_0x4b9c13(0xa6c)](_0x1c2b70,_0x500190,_0x3c539c,_0x24144d,_0x43596d);},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x860)]=function(_0x4b8417,_0x235ede,_0x581842,_0x43f0c1,_0x4874ad){const _0x1fca2d=_0x4376f0;_0x43f0c1=_0x43f0c1||ImageManager[_0x1fca2d(0x6f5)],_0x4874ad=_0x4874ad||ImageManager[_0x1fca2d(0xae9)];const _0x39044a=ImageManager['faceWidth'],_0x2d6b51=_0x4874ad-0x2,_0x20fdd5=_0x235ede+Math[_0x1fca2d(0x627)]((_0x43f0c1-_0x39044a)/0x2);this[_0x1fca2d(0xa32)]===Window_MenuStatus&&this[_0x1fca2d(0x329)](_0x4b8417[_0x1fca2d(0xa95)]()),this[_0x1fca2d(0xac6)](_0x4b8417,_0x20fdd5,_0x581842,_0x39044a,_0x2d6b51),this[_0x1fca2d(0x329)](!![]);},Window_InBattleStatus['prototype'][_0x4376f0(0x1f6)]=function(_0x642ef6,_0x1eb32d,_0x21589f,_0x55db8c,_0x1bf313){const _0xdd4898=_0x4376f0;_0x55db8c=_0x55db8c||ImageManager[_0xdd4898(0x6f5)],_0x1bf313=_0x1bf313||ImageManager['faceHeight'];const _0x1767f7=_0x642ef6[_0xdd4898(0xa01)](),_0x36c2b1=_0x642ef6['characterIndex'](),_0x56082f=ImageManager[_0xdd4898(0x60c)](_0x1767f7),_0x266a04=ImageManager[_0xdd4898(0x560)](_0x1767f7),_0x4a78d9=_0x56082f[_0xdd4898(0x895)]/(_0x266a04?0x3:0xc),_0x49604a=_0x56082f[_0xdd4898(0x399)]/(_0x266a04?0x4:0x8),_0xe45956=_0x55db8c,_0x1e31ec=_0x1bf313-0x2,_0x26f5b0=_0x1eb32d+Math[_0xdd4898(0x627)](_0xe45956/0x2),_0x22d27f=_0x21589f+Math['ceil']((_0x1bf313+_0x49604a)/0x2);this[_0xdd4898(0xa32)]===Window_MenuStatus&&this['changePaintOpacity'](_0x642ef6[_0xdd4898(0xa95)]());const _0x3dcc0c=Math[_0xdd4898(0x136)](_0x55db8c,_0x4a78d9),_0x3a3372=Math[_0xdd4898(0x136)](_0x1bf313,_0x49604a),_0x313440=Math['floor'](_0x1eb32d+Math[_0xdd4898(0xa63)](_0x55db8c-_0x4a78d9,0x0)/0x2),_0x3f354c=Math[_0xdd4898(0x627)](_0x21589f+Math[_0xdd4898(0xa63)](_0x1bf313-_0x49604a,0x0)/0x2),_0x1e7113=_0x266a04?0x0:_0x36c2b1,_0x1daa84=(_0x1e7113%0x4*0x3+0x1)*_0x4a78d9,_0x36be74=Math[_0xdd4898(0x627)](_0x1e7113/0x4)*0x4*_0x49604a;this[_0xdd4898(0x5c0)][_0xdd4898(0x35e)](_0x56082f,_0x1daa84,_0x36be74,_0x3dcc0c,_0x3a3372,_0x313440,_0x3f354c),this[_0xdd4898(0x329)](!![]);},Window_InBattleStatus[_0x4376f0(0x705)]['drawItemActorSvBattler']=function(_0x283658,_0x27385a,_0x5c855c,_0x5cb42a,_0x2348da,_0x108c0b){const _0xf818df=_0x4376f0;_0x5cb42a=_0x5cb42a||ImageManager['faceWidth'],_0x2348da=_0x2348da||ImageManager['faceHeight'];const _0x55efa5=ImageManager[_0xf818df(0x925)](_0x108c0b?_0x283658[_0xf818df(0xa02)]():_0x283658['battlerName']()),_0x2989bf=_0x55efa5['width']/ImageManager['svActorHorzCells'],_0x41a081=_0x55efa5[_0xf818df(0x399)]/ImageManager[_0xf818df(0x1da)],_0x5ee6fe=_0x5cb42a,_0x86e92c=_0x2348da-0x2,_0x3b0bdf=_0x27385a+Math[_0xf818df(0x627)](_0x5ee6fe/0x2),_0x131614=_0x5c855c+Math[_0xf818df(0x554)]((_0x2348da+_0x41a081)/0x2);this[_0xf818df(0xa32)]===Window_MenuStatus&&this['changePaintOpacity'](_0x283658[_0xf818df(0xa95)]());const _0x2571a4=_0x283658[_0xf818df(0x7e1)]&&_0x283658['hasStaticSvBattler'](),_0x22bb39=0x0,_0x170cb0=0x0,_0x2b6f60=_0x2571a4?_0x55efa5[_0xf818df(0x895)]:_0x2989bf,_0x1461d5=_0x2571a4?_0x55efa5['height']:_0x41a081,_0x27708c=Math[_0xf818df(0x136)](0x1,_0x5cb42a/_0x2b6f60,_0x2348da/_0x1461d5),_0x4bf37f=_0x27708c*_0x2b6f60,_0x45efab=_0x27708c*_0x1461d5,_0x2b4870=Math[_0xf818df(0x627)](_0x27385a+Math[_0xf818df(0xa63)](_0x5cb42a-_0x4bf37f,0x0)/0x2),_0x2497b8=Math['floor'](_0x5c855c+Math[_0xf818df(0xa63)](_0x2348da-_0x45efab,0x0)/0x2);this[_0xf818df(0x5c0)][_0xf818df(0x35e)](_0x55efa5,_0x22bb39,_0x170cb0,_0x2b6f60,_0x1461d5,_0x2b4870,_0x2497b8,_0x4bf37f,_0x45efab),this[_0xf818df(0x329)](!![]);},Window_InBattleStatus[_0x4376f0(0x705)]['drawEnemyBattler']=function(_0x22d462,_0x31dbfd,_0x560919,_0x2b0273,_0x131e1d){const _0x1dd7f5=_0x4376f0;if(_0x22d462['hasSvBattler']()){this[_0x1dd7f5(0x935)](_0x22d462,_0x31dbfd,_0x560919+0x1,_0x2b0273,_0x131e1d-0x2,!![]);return;}const _0x42734e=_0x22d462[_0x1dd7f5(0x4b8)](),_0x9195d0=$gameSystem['isSideView']()?ImageManager['loadSvEnemy'](_0x42734e):ImageManager[_0x1dd7f5(0xbb3)](_0x42734e);_0x9195d0[_0x1dd7f5(0x6ff)](this[_0x1dd7f5(0x8a5)][_0x1dd7f5(0x54e)](this,_0x22d462,_0x9195d0,_0x31dbfd,_0x560919,_0x2b0273,_0x131e1d));},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x8a5)]=function(_0x29231c,_0x60b923,_0x539876,_0x4ffdf3,_0x157546,_0x15bf0d){const _0x42428c=_0x4376f0;if(this['_battler']!==_0x29231c)return;this[_0x42428c(0x966)][_0x42428c(0x330)](),this[_0x42428c(0x966)][_0x42428c(0x1e6)]=new Bitmap(_0x157546,_0x15bf0d);const _0x162bd7=_0x157546,_0x207852=_0x15bf0d,_0xd6454b=Math[_0x42428c(0x136)](_0x162bd7,_0x207852),_0x134319=this[_0x42428c(0x966)][_0x42428c(0x1e6)],_0x50a9c8=Math[_0x42428c(0x136)](0x1,_0xd6454b/_0x60b923[_0x42428c(0x895)],_0xd6454b/_0x60b923[_0x42428c(0x399)]),_0x3bc1db=_0x60b923[_0x42428c(0x895)]*_0x50a9c8,_0x4d3cf1=_0x60b923[_0x42428c(0x399)]*_0x50a9c8,_0x1f723d=Math[_0x42428c(0x1c6)]((_0x162bd7-_0x3bc1db)/0x2),_0x4761a5=Math[_0x42428c(0x1c6)]((_0x207852-_0x4d3cf1)/0x2);_0x134319[_0x42428c(0x35e)](_0x60b923,0x0,0x0,_0x60b923[_0x42428c(0x895)],_0x60b923[_0x42428c(0x399)],_0x1f723d,_0x4761a5,_0x3bc1db,_0x4d3cf1),this[_0x42428c(0x966)][_0x42428c(0x7cf)]['x']=0.5,this[_0x42428c(0x966)][_0x42428c(0x7cf)]['y']=0x1,this['_enemySprite']['x']=_0x539876+_0x157546/0x2+this[_0x42428c(0x7fb)],this[_0x42428c(0x966)]['y']=_0x4ffdf3+_0x15bf0d+this['padding'],this['_enemySprite'][_0x42428c(0x503)](this[_0x42428c(0x39a)][_0x42428c(0xbc0)]());},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x21c)]=function(_0x55f3fd,_0x3fe13c,_0x39dae4,_0x4776df){const _0x29dc88=_0x4376f0;if(_0x55f3fd['isEnemy']())_0x4776df=this[_0x29dc88(0x3f6)]-_0x3fe13c;Window_StatusBase['prototype'][_0x29dc88(0x21c)][_0x29dc88(0x34b)](this,_0x55f3fd,_0x3fe13c,_0x39dae4,_0x4776df);},Window_InBattleStatus['prototype']['drawActorClass']=function(_0xb12b3d,_0x60327a,_0x11363d,_0x4dde2b){const _0x2e9c03=_0x4376f0;if(!_0xb12b3d[_0x2e9c03(0xb9d)]())return;Window_StatusBase[_0x2e9c03(0x705)][_0x2e9c03(0x9f6)][_0x2e9c03(0x34b)](this,_0xb12b3d,_0x60327a,_0x11363d,_0x4dde2b);},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x656)]=function(_0x47311f,_0x32a729,_0x1fecba){const _0x3b0fd1=_0x4376f0;if(_0x47311f[_0x3b0fd1(0x7b4)]()&&!Window_InBattleStatus[_0x3b0fd1(0xa70)][_0x3b0fd1(0x783)])return;Window_StatusBase[_0x3b0fd1(0x705)][_0x3b0fd1(0x656)][_0x3b0fd1(0x34b)](this,_0x47311f,_0x32a729,_0x1fecba);},Window_InBattleStatus['prototype']['drawActorIcons']=function(_0x4b45f6,_0x343bbf,_0x1a18d6,_0x36393c){const _0x3d7c15=_0x4376f0;_0x4b45f6['_hideAllIcons']=!![],Window_StatusBase[_0x3d7c15(0x705)][_0x3d7c15(0x317)][_0x3d7c15(0x34b)](this,_0x4b45f6,_0x343bbf,_0x1a18d6,_0x36393c),_0x4b45f6[_0x3d7c15(0xb21)]=undefined;},VisuMZ['BattleCore'][_0x4376f0(0x81a)]=Game_BattlerBase[_0x4376f0(0x705)]['allIcons'],Game_BattlerBase[_0x4376f0(0x705)]['allIcons']=function(){const _0x479481=_0x4376f0;if(this[_0x479481(0xb21)])return[];return VisuMZ[_0x479481(0x19c)][_0x479481(0x81a)]['call'](this);},Window_InBattleStatus['prototype']['placeGauge']=function(_0x7144ab,_0xe01b16,_0x196203,_0x1ec26c){const _0x3b75cc=_0x4376f0,_0x5e9ea1=_0x3b75cc(0x1d4)['format'](_0x7144ab['battlerKey'](),_0xe01b16);let _0x5d2cec=![];if(_0x7144ab[_0x3b75cc(0x7b4)]()){const _0x280871=Window_InBattleStatus[_0x3b75cc(0xa70)];if(_0xe01b16==='hp'&&_0x280871['enemyHpGaugeRate'])_0x5d2cec=!![];if(_0xe01b16==='mp'&&_0x280871[_0x3b75cc(0x55d)])_0x5d2cec=!![];if(_0xe01b16==='tp'&&_0x280871[_0x3b75cc(0x4ea)])_0x5d2cec=!![];}const _0x320af4=this[_0x3b75cc(0x298)](_0x5e9ea1,_0x5d2cec?Sprite_GaugeRate:Sprite_Gauge);_0x320af4['setup'](_0x7144ab,_0xe01b16),_0x320af4[_0x3b75cc(0x77c)](_0x196203,_0x1ec26c),_0x320af4['show']();},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x16b)]=function(){const _0x15384f=_0x4376f0,_0x3076c2=this[_0x15384f(0x45e)]?this[_0x15384f(0x45e)][_0x15384f(0x895)]:0x0;return this[_0x15384f(0x3f6)]-_0x3076c2+this[_0x15384f(0x7fb)]*0x2;},Window_InBattleStatus['prototype'][_0x4376f0(0xbde)]=function(){const _0x4aa799=_0x4376f0;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x4aa799(0x78c)][_0x4aa799(0xae8)]['Param'][_0x4aa799(0x35f)]:[_0x4aa799(0x756),'MaxMP','ATK','DEF',_0x4aa799(0x1f5),_0x4aa799(0x538),_0x4aa799(0xacc),'LUK'];},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0xc29)]=function(_0x517a0f,_0x4ae190,_0x346693,_0xd846dc){const _0xe88720=_0x4376f0,_0x51c0ed=Window_InBattleStatus[_0xe88720(0xa70)],_0x14ed77=Imported['VisuMZ_0_CoreEngine'];this[_0xe88720(0x326)]();let _0x9502a4='',_0x14219d=0x0,_0x4dd9cd=[_0xe88720(0x52c),_0xe88720(0x58a),'ATK','DEF','MAT','MDF',_0xe88720(0xacc),'LUK']['indexOf'](String(_0x517a0f)[_0xe88720(0x896)]()['trim']());if(_0x14ed77)_0x9502a4=TextManager['paramName'](_0x517a0f),_0x14219d=VisuMZ[_0xe88720(0x9e1)](_0x517a0f);else{if(_0x4dd9cd>=0x0&&_0x4dd9cd<0x8)_0x9502a4=TextManager[_0xe88720(0x8b6)](_0x4dd9cd);}if(_0x4dd9cd>=0x0&&_0x4dd9cd<0x8){const _0x259dad=this['_battler'][_0xe88720(0x605)][_0x4dd9cd];this[_0xe88720(0x39a)]['buffIconIndex'](_0x259dad,_0x4dd9cd)!==0x0&&(_0x14219d=this[_0xe88720(0x39a)][_0xe88720(0x60b)](_0x259dad,_0x4dd9cd));}if(_0x9502a4){let _0x41c261=_0xe88720(0x7fc)[_0xe88720(0xa30)](_0x9502a4,_0x14219d);_0xd846dc<=0xd4&&(_0x41c261=_0xe88720(0x623)['format'](_0x9502a4));const _0x38aabf=_0xd846dc<=0xd4?'\x20':'\x20\x20';this[_0xe88720(0x693)](_0x38aabf+_0x41c261,_0x4ae190,_0x346693);}this[_0xe88720(0x7ac)]();let _0x153b2a='';_0x14ed77?_0x153b2a=this[_0xe88720(0x39a)]['paramValueByName'](_0x517a0f,!![]):_0x153b2a=String(this[_0xe88720(0x39a)][_0xe88720(0x8b6)](_0x4dd9cd));if(this[_0xe88720(0x39a)][_0xe88720(0x7b4)]()){let _0xea673=!![];if(_0x51c0ed['enemyShowParametersAlways'])_0xea673=![];if(_0x51c0ed['enemyShowParametersIfBattleTest']&&BattleManager[_0xe88720(0x6b8)]())_0xea673=![];if(_0x51c0ed['enemyShowParametersIfDefeated']&&$gameSystem[_0xe88720(0xa6d)]()[_0xe88720(0x3e9)](this['_battler'][_0xe88720(0xaca)]()))_0xea673=![];_0xea673&&(_0x153b2a=_0x51c0ed[_0xe88720(0x74e)]);}if(_0x4dd9cd>=0x0&&_0x4dd9cd<0x8){if(this['_battler'][_0xe88720(0x1e1)](_0x4dd9cd)>0x1)_0x153b2a=_0x51c0ed[_0xe88720(0xbab)][_0xe88720(0xa30)](_0x153b2a),Imported[_0xe88720(0x601)]?this[_0xe88720(0x686)](ColorManager[_0xe88720(0x79a)]()):this['changeTextColor'](ColorManager[_0xe88720(0xb49)]());else this[_0xe88720(0x39a)][_0xe88720(0x1e1)](_0x4dd9cd)<0x1&&(_0x153b2a=_0x51c0ed[_0xe88720(0x8d0)]['format'](_0x153b2a),Imported[_0xe88720(0x601)]?this[_0xe88720(0x686)](ColorManager[_0xe88720(0x727)]()):this[_0xe88720(0x686)](ColorManager[_0xe88720(0x9c5)]()));}if(String(_0x153b2a)){const _0xd4320f=_0xd846dc<=0xd4?'\x20':'\x20\x20';this[_0xe88720(0x748)](_0x153b2a+_0xd4320f,_0x4ae190,_0x346693,_0xd846dc,_0xe88720(0x77b));}},Window_InBattleStatus[_0x4376f0(0x705)][_0x4376f0(0x371)]=function(_0x41a831,_0x393c7a,_0x14722d,_0x576c24){const _0x3765a6=_0x4376f0;_0x576c24=_0x576c24||this[_0x3765a6(0x552)](),this['contentsBack'][_0x3765a6(0x5fc)]=0xa0;const _0x50542d=ColorManager[_0x3765a6(0x7fd)]();this[_0x3765a6(0x7b0)][_0x3765a6(0x520)](_0x41a831+0x1,_0x393c7a+0x1,_0x14722d-0x2,_0x576c24-0x2,_0x50542d),this[_0x3765a6(0x7b0)][_0x3765a6(0x5fc)]=0xff;},Game_BattlerBase[_0x4376f0(0x705)]['getParamBuffAndStateRate']=function(_0xb411fd){const _0x2f85a4=_0x4376f0;let _0x246135=0x1;_0x246135*=this[_0x2f85a4(0x15c)](_0xb411fd);for(const _0x86211a of this[_0x2f85a4(0x8b0)]()){if(!_0x86211a)continue;for(const _0x20a1d3 of _0x86211a[_0x2f85a4(0x492)]){if(!_0x20a1d3)continue;if(_0x20a1d3['code']!==Game_BattlerBase[_0x2f85a4(0x254)])continue;if(_0x20a1d3['dataId']!==_0xb411fd)continue;_0x246135*=_0x20a1d3[_0x2f85a4(0x883)];}}return _0x246135;};function Window_InBattleStatusStates(){this['initialize'](...arguments);}function _0x6eaa(_0xc69167,_0x1cf8d8){const _0x373d5d=_0x373d();return _0x6eaa=function(_0x6eaa28,_0x4ee697){_0x6eaa28=_0x6eaa28-0x11a;let _0x25dd54=_0x373d5d[_0x6eaa28];return _0x25dd54;},_0x6eaa(_0xc69167,_0x1cf8d8);}function _0x373d(){const _0xaa6814=['silentHomeMove','skillItemWindowRectBorderStyle','_hue','addBattleGridMoveCommand','guardLifeSteal','damagePopupPosition','center','uiInputPosition','alignBattleCoreDamageSprite','ActSeq_Movement_MoveBy','isNextSceneBattleTransitionable','_shake','abort','alterChange','TpbGaugeOffsetX','State-%1-%2','_enemy','isAutoBattle','Sprite_Actor_createStateSprite','_totalDamage','_stateSprite','normal','onHomeMoveEnd','addFightCommand','updateStatusWindowPosition','Class-%1-%2','attachSpritesToDistortionSprite','Game_Enemy_transform','MP_Flat','setMoveEasingType','_damageCounterWindow','actorCommandAutoBattle','scale','_angleDuration','CriticalColor','getBattlerKeyTargetReplacement','createShadowSprite','Window_BattleLog_performMiss','ShowAddedBuff','getItemDamageAmountTextOriginal','MUSIC-NOTE','unshift','SkipPartyCmd','effect','_createDamageContainer','addSkillTypeCommand','updateForceAction','pageButtonX','setupZoomBlurImpactFilter','VisuMZ_3_VisualCutinEffect','jsAccuracyAsUser','Game_Map_battleback2Name','clearActiveWeaponSet','updateCollapse','setupBattleCoreData','_battlerContainer','getInputButtonString','isDisarmLifeSteal','onBattleEnd','_back1Sprite','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','_tpbSceneChangeCacheActor','initBattlePortrait','overworldBattleback1Name','aspect','process_VisuMZ_BattleCore_jsFunctions','_cancelButton','ShowEnemyGauge','animationBaseDelay','alive\x20enemies\x20not\x20user','setValue','drawParamData','30akmCYN','basicGaugesY','isGuardWaiting','isNextScene','loadBitmap','_forcedBattleLayout','WaitForFloat','updateBattlebackBitmap1','ActionSkillMsg2','zoomDuration','createChildSprite','battleProjectiles','svShadow','BattleManager_processAbort','Game_Temp_initialize','GuardFormulaJS','sort','PopupPosition','lineRect','onJumpEnd','wait','changeAtbCastTime','Game_System_initialize','ARRAYSTRUCT','clearGlobalVariables','ScaleY','atbInterrupt','iconIndex','Sprite_Battler_setHome','updateOpacity','_partyCommandWindow','getDualWieldTimes','checkShowHideBattleNotetags','\x5cC[0]','BindCommonEventKeysForGroup','text','actorCommandSingleSkill','isTurnBased','getDragonbones','removeCurrentAction','loadBattleback1','drawTextTopAligned','Angle','damage','portraitIndex','createKeyJS','closeBattleActorWindow','isTeamBased','mainSpriteWidth','_logWindow','ActSeq_Movement_WaitForOpacity','ARRAYEVAL','Sprite_Actor_setActorHome','Style','globalAlpha','isCustomActionSequence','createDamageContainer','disarmMpLifeSteal','guard','_forcedHomeX','setBattlerBattleCore','_shadowScaleY','DamageStyleList','popupDamage','min','drawBuffs','getNextDamagePopup','nextActor','RegExp','_regionBattleback1','getNextSubjectFromPool','_lastRegenFrameCount','clearDamagePopup','Name','gainHp','hue','AniDuration','_ptbActionCost','CastMagical','Game_Action_apply','moveBattlerHomeDistance','Scene_Battle_createAllWindows_ComboWindow','isTickBased','updateCustomActionSequence','Sprite_StateIcon_updateFrame','originalName','applyAngleChange','onEscapeFailure','USER-DEFINED\x204','EnableDamageCap','removeBuff','DefaultSoftScaler','applyGlobalCommonEventNotetags','battleAngle','logActionList','ActSeq_Inject_AnimationEnd','PostApplyAsUserJS','ActSeq_Horror_NoiseCreate','_currentAngle','ShakeFlinch','isOpponent','ActorOffsetY','paramBuffRate','Status\x20is\x20currently\x20normal.','_canLose','SkillsStatesCore','selectAllEnemies','adjustPosition_ScaleUp','ATK','createHelpWindowBattleCore','CreateCommonEventKeys','negativeMpLifeSteal','JS\x20%1APPLY\x20%2','BattleManager_updatePhase','DEF','_endingBattle','isOptionValid','drawingAreaWidth','deadMembers','displayBattleCoreTransitionErrorMsg','deactivate','ActSeq_Grid_AnimationTypeAtNode','updateFrame','changeBattlerOpacity','createActors','processDefeat','MotionType','walk','drawItem','toLowerCase','Duration','displayType','process_VisuMZ_BattleCore_Action_Notetags','gainCurrentActionsETB','VarianceFormulaJS','Scene_Battle_commandEscape','StatusWindowSkinFilename','SILENCE','MUSIC\x20NOTE','Game_Action_updateLastTarget','_pagedownButton','waitForAnimation','_createClientArea','_reflectionTarget','NameAlwaysSelectOnly','getCommonEventIdWithName','10bLnhdK','WaitForNewLine','dragonbonesData','alive\x20battlers','3135295YHQsMP','expTotal','refreshBattlerMotions','createInnerPortrait','Scene_Battle_createHelpWindow','applyEasing','isForOpponent','isCustomBattleScope','Game_Action_setSubject','Parse_Notetags_Action','#ffffff','addItemCommand','partyCommandWindowRect','waitCount','VisuMZ_1_MainMenuCore','ActSeq_Motion_RefreshMotion','BattleCore','_commandNameWindow','PostEndTurnJS','isBattlerFlipped','1488567wgneEq','_actor','gainMp','ActSeq_Movement_WaitForSkew','Immortal','turnsFmt','BattleLayout','isFastForward','StartTurnMsg','createString','stateRate','ComboWindow','svBattlerAnchorX','updateJump','fittingHeight','ReflectPlayback','Window_BattleLog_performActionStart','isForAnyoneFocusOpponents','clearTargetBattlerKey','Scene_Battle_initialize','comboWindowOffsetX','ActSeq_Mechanics_WaitForEffect','_forcedHomeY','_battleLayoutStyle','%1RegenerateJS','JSON','itemEffectRecoverMp','Sprite_Gauge_smoothness','setupNegativeImpactFilter','endAnimation','stepForward','performActionStart','alive\x20opponents','Scene_Battle_createAllWindows','swapEnemyIDs','applyGuard','special','ActSeq_Motion_ClearFreezeFrame','round','_stypeIDs','ActSeq_Projectile_Animation','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','process_VisuMZ_BattleCore_Notetags','isDeathStateAffected','DistanceY','battlerShadowScaleX','Window_BattleEnemy_hide','Equipment\x20Prediction,\x20Action\x20Comparisons,\x20and\x20more.','hasSkill','commandNameWindowCenter','OffsetX','gaugeLineHeight','actor%1-gauge-%2','debuffAdd','getHalfActionsPTB','alive\x20actors','_enemyWindow','updateEvent','svActorVertCells','TextColor','PopupOffsetY','updateMotionCount','_angleRevertOnFinish','bitmapWidth','addedBuffs','getParamBuffAndStateRate','ActSeq_Inject_AnimationPauseResume','_createCursorSprite','battlerKey','ActionSequence','bitmap','jsScaleToFit','windowskin','VisuMZ_2_AggroControlSystem','process_VisuMZ_BattleCore_Failsafes','_updateCursorFilterArea','setBattlerFacePoint','previousActor','encounterList','createCommandNameWindow','59486548ZPgPtX','opacitySpeed','MANUAL','Window_BattleLog_refresh','EscapeSuccessJS','MAT','drawItemActorSprite','ActSeq_Cutin_WaitForExit','return\x200','VisuMZ_1_MessageCore','optDisplayTp','ActSeq_Mechanics_BoostPointsStoreData','requestBattleBalloon','Game_Interpreter_terminate','isChanting','isCancelled','alive\x20actors\x20not\x20target','VisuMZ_3_BoostAction','updateShadowVisibility','ActSeq_Horror_GlitchRemove','ActSeq_Skew_Reset','battleZoom','Strength','reduce','makeStateName','battlelog','Parse_Notetags_Targets','Sprite_Actor_initMembers','setupIconTextPopup','isBattleFlipped','_animationContainer','CriticalHitRate','ActSeq_Mechanics_StateTurnsChangeTo','performJump','negativeHpLifeSteal','BattleStartEvent','PosOffsetY','ActSeq_Mechanics_StbRemoveExcessActions','getTraitSetKeys','SwitchCritical','dead\x20opponents','vertCells','checkBattleEnd','boxHeight','drawActorName','rate','Scene_Battle_onEnemyOk','wtypeId','left','isQueueOptionsMenu','DestinationJS','createHelpWindow','startPartyCommandSelection','multiTargetWindowRect','flashDuration','XPActorDefaultHeight','autoMeleeMultiTargetActionSet','_createEffectsContainer','isAnyoneJumping','collapseType','isMagical','meetsUsableItemConditions','_growDuration','isSceneChanging','needsSelection','ActSeq_Cutin_AddVisualCutinEffect','refreshStatusWindow','Balloon','BattleManager_startAction','clearWeaponAnimation','_showWeapon','regionId','???','glitch','Window_BattleLog_performDamage','WaitCount2','prepareCustomActionSequence','isFriendly','checkAutoCustomActionSequenceNotetagEffect','onMoveEnd','Scene_Battle_updateStatusWindowPosition','_effectType','Scene_Battle_startActorSelection','Window_BattleLog_displayMpDamage','WindowWidth','isSideView','remove','state','makeDamageValue','setLastBattleSkill','ActSeq_Grid_AddTriggerToNode','ExtraSettings','_forcing','maxCommands','damageRate','start','_svBattlerSprite','guardHpLifeSteal','onAllActionsEnd','AllowRandomSpeed','TRAIT_PARAM','createBattleUIOffsetX','updateOnceParallelInterpreters','svBattlerShadowVisible','updateSpin','visualHpGauge','_shadowScaleX','damageContainer','isCommonEventReserved','_borderPortraitSprite','addedDebuffs','enabled','svActor','addBattleCoreAutoBattleStyleCommand','ActSeq_Target_PrevTarget','Auto-Battle,\x20Battle\x20AI,\x20Damage\x20Prediction,\x20Damage\x20Multiplier\x20Display\x0a','JS\x20%1START\x20BATTLE','forceSelect','ActSeq_BattleLog_UI','pointX','%1EndBattleJS','item','ActSeq_Animation_ItemAnimation','updateBorderSprite','criticalDmgFlat','JS\x20BATTLE\x20VICTORY','_actorWindow','setHorrorEffectSettings','needsActorInputCancel','launchBattle','isSpriteVisible','commandOptions','addGuardCommand','gainHalfActionsPTB','battleMembers','members','setBalloonPose','_tpbState','We\x20recommend\x20removing\x20mechanics\x20from\x20formulas!\x0a\x0a','checkSubstitute','alive\x20battlers\x20not\x20user','VisuMZ_3_ActSeqProjectiles','Window_ItemList_maxCols','VisuMZ_2_BattleSystemETB','autoSelectLastSelected','touchUI','Scene_Battle_itemWindowRect','_executedValue','nextActiveWeaponSlot','isAnyoneSpinning','onBattleStartBattleCore','hitsDmgFmt','_totalHits','_performActionEnd','CriticalDmgFlat','Game_Enemy_setup','_targetIndex','BoostPoints','log','_customDamageFormula','battleFloat','PostStartBattleJS','enemyNames','isCancelTriggered','reverse','updateStaticSvBattlerFrames','SceneManager_isSceneChanging','ActSeq_BattleLog_Refresh','createInnerSprite','getBattlePortraitOffsetY','ScaleUp','setupDesaturateImpactFilter','onBattleStartOnceParallels','ShowPopup','ActSeq_Set_FinishAction','Window_BattleLog_performCollapse','createInBattleStatusWindow','STYPES','_handlers','drawItemStyleIconText','requestBalloon','_opacityWholeDuration','type','Interrupt','ShakeFlinchPower','_targetOffsetX','_onceParallelInterpreters','itemCri','textWidth','placeTimeGauge','Scene_Battle_createCancelButton','makeActions','weaponImageId','BattleManager_checkBattleEnd','SkewY','setCursorRect','itemLifeStealRate','_cache','buffAdd','mmp','ActSeq_Grid_AnimationIDAtNode','processAnimationRequests','createEffectActionSet','ShowPortraitsBorderStyle','setReturnWindow','ActSeq_Mechanics_TextPopup','getEnemyIdWithName','WaitForAngle','VisuMZ_2_PartySystem','autoBattleStart','svBattlerAnchorY','Buffs','motionSpeed','ActSeq_Movement_Opacity','_flipScaleX','setSvBattlerSprite','missile','canSingleOrMultipleSelect','removeBuffsAuto','battleGrow','LIGHT-BULB','FvAniCenterScreen','FocusX','totalDmgFmt','MultiTarget','duration','_bypass_applyBattleCoreHitRateJS','DefeatEvent','updateWeather','deselect','Armor-%1-%2','singleSkill','tpbCommandFight','_battlerHue','lastBattleSkill','stateMotionIndex','_battleCoreForcedElements','flipVisualCutinHorz','isVisualHpGaugeDisplayed','Enemy-%1-%2','FvAniEachTarget','actor%1-portrait','JS\x20%1REGENERATE','_endBattle','SHOW_BUTTON','Sprite_Battler_updatePosition','processBattleBalloonRequests','CriticalHitRateJS','ChangeOrderBy','_enemies','increaseTotal','startInBattleStatus','_commonEventQueue','timeScale','waitForEffect','checkShowHideSkillNotetags','critical','CheckActSeqProjectileVersion','isAutoBattleCommandEnabled','dead\x20actors','HitFlat','setCustomDamageFormula','Window_BattleEnemy_show','getMenuImage','PopupOffsetX','showPortraits','StatusWindowSkinHide','command301','ShowHpDmg','targetObject','ActSeq_Grid_PushFromTargetNode','Spriteset_Battle_createLowerLayer','isWaiting','setupTextPopup','emerge','portraitFlipVert','selectAll','canEscape','HelpAutoBattle','isAnyoneMoving','Game_Battler_onBattleEnd','drawDebuffs','maxBattleMembers','ActSeq_Movement_WaitForSpin','ActSeq_Animation_ActionAnimation','hpAffected','_homeEasing','resetResultSwitches','svBattlerData','makeBattleCommand','Item','processVictory','ActSeq_Grid_MoveTargetsInDirection','registerCommand','_tempActor','drawActorIcons','command119','CriticalDmgRate','attackAnimationIdSlot','refresh','visualCutinPortraitIndex','attack','displayCritical','createCommandVisibleJS','inputting','BattleManager_inputtingAction','createMultiTargetWindow','refreshRequest','check_VisuMZ_BattleCore_DmgFormulaMechanics','isAffectedByBreakShield','resetFontSettings','Window_BattleLog_pushBaseLine','waitForJump','changePaintOpacity','isDTB','_opacityEasing','dead','performShakeFlinch','currentMaxValue','processCancel','show','isAnyoneSkewing','ActSeq_Impact_MotionTrailRemove','origin','Parse_Notetags_TraitObjects','partyCommandWindowRectBorderStyle','_tempBattler','ActSeq_Mechanics_OtbOrder','setSkill','_active','Window_BattleLog_popupDamage','SwitchMissEvade','animationWait','PopupShiftY','performSubstitute','_actions','Game_Action_itemEffectAddAttackState','_isBattlerFlipped','drawItemImage','command339','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','nameColor','WaitForProjectile','_index','Battle\x20Mechanic\x20found\x20within\x20%1\x20#%2\x20%3!\x0a','Game_Action_makeTargets','createTargetsJS','call','isAlwaysVisible','none','canInput','endIcon','targetDistortionSpritePosition','version','VisuMZ_3_BattleVoices','alive\x20friends','includeState','onDatabaseLoaded','ANTI_TINT_UI','NextTurn','battleAnimation','createUIContainer','CommandAddOptions','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','Shadow','addBuff','blt','ExtDisplayedParams','_performDamageMotion','Scene_Battle_onEnemyCancel','delay','placeStateIcon','PostDamage%1JS','Sprite_Battler_updateMain','_surprise','updateStateSprite','getBattlePortrait','retreat','isHidden','isSkipPartyCommandWindow','setTroopPage','Width','_drawTextOutline','textAlignment','setTargetBattlerKey','drawDarkRect','addAutoBattleCommands','createPartyCommandWindowBattleCore','motionType','boxWidth','StatusWindowAttachmentFrontOffsetX','displayAction','stypeId','initElementStatusCore','_lastMpDamage','ActSeq_Cutin_WaitForEntrance','TP_Rate','itemWindowRect','HelpEscape','Game_Party_removeActor','isRightInputMode','drawBattlerData','Debuffs','status','ALL\x20SKILLS','_skillIDs','current\x20target','updateKeyboardKeys','stop','BattleManager_onEscapeSuccess','setActorHome','isPartyCommandWindowDisabled','gainBravePoints','NUM','revertTpbCachedActor','TpGaugeOffsetX','displayEvasion','clearElementChanges','passive','slice','NameAttachStateIcon','updatePadding','ActSeq_Mechanics_EmulateSkillCost','message2','terminate','height','_battler','ESCAPE','join','FvAniCenterAll','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','isCurrentItemEnabled','CmdStyle','STATUS','Skill','_buttonText','isCTB','icons','_targetHits','aliveMembers','_motionType','smoothSelect','WaitForScale','charging','customDamageFormula','hasAspectData','sliceMin','isAtbCastingState','evaded','IconIndex','ANGLE','#%1','_opacityDuration','isAlwaysHidden','PortraitScale','addChildToUiContainer','SkewX','BULB','loadOtherActorImages','ActSeq_Zoom_Scale','anchorX','processEscape','extraPositionY','updateHomeMove','BattleManager_endBattle','Mute','faceRect','ParseActorNotetags','getLastPluginCommandInterpreter','setHome','jsScaleUp','callOkHandler','guardSkillId','requestFauxAnimation','isTpbMainPhase','isStateAffected','createRateJS','hitText','addSkillCommands','updateCallMenu','StyleOFF','updateAttachmentSprites','Sprite_Battler_update','onSelectAction','ActSeq_Mechanics_EnemyEscape','updateSelectionEffect','drawComboText','commandNameWindowDrawBackground','createAnimationSprite','Elements','stepBack','isForFriendBattleCore','Window_BattleLog_update','autoSelect','freezeTime','Scene_Battle_startPartyCommandSelection','BaseTroopIDs','setBattleAngle','fadeShiftX','setHelpWindow','addChild','_defeatedEnemies','addBattlerAspect','XPSpriteYLocation','applyGlobal','includes','_shakeFlinchDuration','ActSeq_Mechanics_OnceParallel','performActionMotions','NameAsTarget','isShownOnBattlePortrait','Weapon-%1-%2','isForAnyoneFocusFriends','battler','battleBalloon','_hpGaugeSprite','_windowLayer','applyItem','innerWidth','getBattlerFromKey','_subject','graphicType','itemPadding','setText','requestRefresh','parameters','adjustWeaponSpriteOffset','AutoNotetag','updatePageButtonVisibility','clearBattleCoreData','maxCols','attackAnimationId1','frontview_ui','isClicked','damageCounterWindowRect','Window_BattleLog_performActionEnd','ForceExploited','FaceAway','AddOption','ActSeqProjectiles','IconStypeMagic','displayReflectionPlayBack','needsInputWindowChange','itemTextAlign','processAbort','CriticalHitMultiplier','invokeMagicReflection','executeMpDamage','Window_BattleLog_displayEvasion','CommandVisible','endVisualCutin','waitForMovement','_frame','increaseHits','canAttackBattleCore','_svBattlerData','Actor','performFlinch','isAppeared','_bypassCanCounterCheck','PARTY','Defeat','power','\x5cHEXCOLOR<%1>','map','setupCriticalEffect','getAttackMotionSlot','initMembersBattleCore','isBuffAffected','needsSelectionBattleCore','process_VisuMZ_BattleCore_TraitObject_Notetags','parallaxHueEnemyModifier','isSubjectValidForAnyoneSelect','updateAttachedSprites','activate','visible','sortDamageSprites','BattleManager_startBattle','_targetX','ActSeq_Mechanics_PtbConvert','Game_Action_applyGlobal','ActSeq_Element_ForceElements','ActSeq_Mechanics_EmulateAttackEffect','removeHorrorEffect','list','resizeWindowBorderStyle','occasion','BattleAI','battleOpacity','Scene_Battle_start','processPostBattleCommonEvents','cancelButtonText','lukEffectRate','collapse','hpHealingFmt','freezeMotion','ChargeRate','ext','isSceneBattle','autoSelectPriority','NameOffsetX','%1StartTurnJS','isImmortal','all\x20enemies','isPreviousSceneBattleTransitionable','PreEndBattleJS','updatePositionBattleCore','_back2Sprite','destroy','updateAngleCalculations','lifeStealRate','commandStyle','abnormal','ActSeq_Grid_AddTriggerToNodeJS','HITTYPE_MAGICAL','canGuard','isFrameVisible','isMoving','STB','battlerSmoothImage','addSingleSkillCommands','addOnceParallelInterpreter','_statesWindow','declareGlobalVariables','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','BattleManager_makeActionOrders','%1StartBattleJS','doesPageHaveOnceParallelStart','WaitForSkew','Rate','CheckCustomActSeqNotetag','jsCritRateAsUser','ActSeq_Movement_Float','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','Damage','4tglWwS','resize','ActSeq_Motion_PerformAction','isPTB','ActSeq_BattleVoice_PlaySpecialLine','visibilityState','_buffTurns','Game_Action_isForRandom','WaitForCamera','PosOffsetX','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','CriticalDuration','_floatDuration','enemyStatus','FlashColor','VisuMZ_2_BattleSystemSTB','FlinchDistanceY','Window_BattleLog_clear','Letter','itemRect','drawItemStatus','Enable','checkExtendTroopCompatibility','statusWindowRectBorderStyle','thrust','refreshActorPortrait','checkSceneBattleTransitionable','requestMotionRefresh','CheckMapBattleEventValid','setupMotion','isSpinning','_offsetX','ActSeq_Mechanics_Multipliers','UNTITLED','setBackgroundType','open','resetBreakShield','MP_Rate','commandSymbol','traits','pages','_battlerKeyCache','redrawForGaugeRate','drawItemStatusListStyle','startVisualCutin','fadeShiftY','BattleManager_processDefeat','drawSkillCost','arRedFlat','invokeCounterAttack','_stateIconSprite','BattleManager_checkSubstitute','MotionSpeed','targetBattlerContainerOpacity','totalHealFmt','mhp','statusWindowRectXPStyle','lastFilename','mpHealingFmt','ActSeq_Animation_CastAnimation','helpAreaHeight','AS\x20USER','drawItemImageXPStyle','startAttackWeaponAnimation','icon','reserveCommonEvent','TargetLocation','mpDamageFmt','some','shadow','extraPositionX','%1Event','PostApply%1JS','_homeDuration','performMagicEvasion','softDamageCap','_damageContainer','battlerName','friendsUnit','isDying','ConfigManager_makeData','normalText','filter','_preBattleCommonEvent','removedBuffs','substitute','isCharging','GRID\x20MOVE','_damages','%1\x20Aspect','ActSeq_ChangeSkew','createBattleFieldBattleCore','isTpb','_growWholeDuration','DamageFlat','escape','makeUniqueNames','svAnchorY','COMBATLOG','clearActiveWeaponSlot','PRE-','alive\x20enemies','ActSeq_Animation_SkillAnimation','actions','selectNextCommand','adjustFlippedBattlefield','finalizeScale','battlerShadowScaleY','_growEasing','Game_Temp_requestBalloon','inBattleStatusWindowRect','_targetGrowX','ActSeq_Target_CurrentIndex','_updateDuration','GetActionSequenceSpecialTargetWithFlags','finishActionSet','StartTurnShow','isFloating','redraw','ActSeq_Impact_MotionBlurTarget','DefaultHardCap','isNameTemporarilyVisible','onRegeneratePlayStateAnimation','_freezeMotionData','Scene_Battle_updateCancelButton','addedStateObjects','scope','enemyTpGaugeRate','_lastEnemy','parent','createActorCommandWindow','Post','fight','helpAreaBottom','MotionAni','JS\x20%1END\x20BATTLE','_baseX','splice','addStateTurns','MOTIONS','concat','createAttachedSprites','isHiddenSkill','svAnchorX','worldTransform','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','LifeStealRegExp','getDamageStyle','NewPopupBottom','isSkewing','windowAreaHeight','canUseItemCommand','setHue','isBreakStunned','ActSeq_Mechanics_RemoveState','sliceMax','performRecovery','hitFlat','DefaultSoftCap','updateBitmap','Game_Action_setItem','Game_BattlerBase_canGuard','_dimmerSprite','_emptyBitmap','Game_Action_executeDamage','applyImmortal','addCommand','pagedown','JumpToLabel','addWeaponSwapCommand','startActorCommandSelection','startFloat','refreshDimmerBitmap','onEncounterBattleCore','ActSeq_Impact_ZoomBlurTargetCenter','isBorderStylePortraitShown','SvBattlerMass-%1-%2','inHomePosition','CmdIconFight','ComboWindow_RectJS','Opacity','fillRect','ActSeq_Mechanics_CustomDmgFormula','HpGauge','commandNameWindowDrawText','AnchorY','performMoveToPoint','InBattleStatus','drawItemStyleIcon','Sprite_Enemy_createStateIconSprite','createEnemySprite','Scene_Battle_createAllWindowsIBS','BattleSystemCTB','MAXHP','isActiveTpb','POST-','NOTE','damagePopupOffsetY','tone','_tpbNeedsPartyCommand','centerFrontViewSprite','commandAutoBattle','removeState','_jumpWholeDuration','parse','MDF','isForAll','Game_Battler_forceAction','GetActionSequenceSpecialTarget','addPartyCommand','CheckDamageFormulaForMechanics','ShowRemovedBuff','addBattleCoreAutoBattleStartupCommand','addAutoBattleCommand','moveBattlerHomeToPoint','allowRandomSpeed','Scene_Battle_startEnemySelection','Linear','target','\x5cI[%1]\x5cHEXCOLOR<%3>%2','DefaultStyle','battleCoreTpbMainPhase','isForNotUser','blockWidth','_targetSkewX','Wave','abs','bind','note','_growY','createStateIconSprite','lineHeight','Scene_Battle_update','ceil','_waitCount','isSpriteVS8dir','Sprite_Enemy_updateBossCollapse','_forcedBattlers','allBattleMembers','StepDistanceX','prepareBorderActor','Scene_Battle_commandFight','enemyMpGaugeRate','TpGaugeOffsetY','isTriggered','isBigCharacter','drawSingleSkillCost','createEnemies','▲%1','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','statusText','createAutoBattleWindow','isNonSubmenuCancel','startJump','CheckSkillCommandShowSwitches','startGrow','updateBorderStyle','damageOffsetY','Game_Action_makeDamageValueDisperse','AllActorsText','Frame','Game_BattlerBase_param','paySkillCost','Game_Battler_onBattleStart','addCustomCommands','_effectDuration','isActiveTpbReady','createMultiTargetWindows','front\x20base','setup','displayBuffs','itemEffectGainTp','_lastTpDamage','addTextToCombatLog','_shakeFlinchPower','isDead','find','StepDuration','isItem','PreDamageJS','actionSplicePoint','isMeleeSingleTargetAction','_flashDuration','valueColor','setupShockwaveImpactFilter','removeDamageSprite','pageButtonY','MAXMP','PreApplyAsTargetJS','IconSet','getAttackWeaponAnimationId','command357','attackMotions','_iconIndex','base','Sprite_Battler_damageOffsetY','executeHpDamage','ENEMY_OFFSET_Y','isFTB','changeBattlebacks','split','BattleManager_selectNextCommand','isAnyoneGrowing','createBattleField','updateBossCollapse','BattlebackScale','PostEndBattleJS','ActSeq_Movement_Spin','isBorderPortraitSpriteVisible','_targetOffsetY','ActSeq_Movement_HomeReset','FaceDirection','ActSeq_Mechanics_HpMpTp','StyleName','cancelActorInput','battleCamera','startDamagePopup','performCollapse','mainSprite','_updateTargetValue','_battleField','_waitMode','animationShouldMirror','setStateTurns','Scene_Options_maxCommands','isBTB','meetsSelectFrontviewActorConditions','addAttackCommand','AspectIcon','ApplyImmortal','ActSeq_Mechanics_StbExploit','ActSeq_Inject_WaitForInjectAni','StatusWindowAttachmentBack','WaitCount','clearOnceParallelInterpreters','VariableHeal','missed','updateSkew','PreStartTurnJS','_executeHpDamage','WIDTH','contents','autoBattleUseSkills','addAnimationSpriteToContainer','Sprite_Actor_moveToStartPosition','isAlive','ACTOR_OFFSET_X','ActSeq_Mechanics_AnalyzeWeakness','updateNameTempVisibility','compareBattlerSprites','clearHorrorEffects','_lastHpDamage','Game_BattlerBase_die','forceEscapeSprite','setVisibleUI','executeDamage','trim','options','updateBattleProcess','_lastActor','EnableSoftCap','playOnceParallelTroopPage','ActorCmd','TextFmt','ActSeq_Grid_RemoveTriggerFromNode','_lines','updateRefresh','ActSeq_Mechanics_EtbAction','DistanceAdjust','Intensity','_linkedSprite','equips','refreshCursor','Game_Action_evalDamageFormula','createStateSprite','addImmortal','evalDamageFormulaBattleCore','ITEM','AdjustRect','Game_Action_isForOpponent','setClickHandler','initMembers','ShowHide','_branch','Game_Troop_expTotal','battlerSprites','updateCounter','ActSeq_Weapon_NextActiveWeapon','createBattleBalloon','updateEffectsContainer','isForDeadFriend','StatusGraphic','Index','applyBattleCoreJS','FocusY','processEnemyModeTouchBattleCore','traitSet','clearBattleCoreAspects','moveBattlerDistance','battleback1Name','alterType','paintOpacity','isForRandomBattleCore','WaitForMovement','performAction','EFFECT_COMMON_EVENT','VisuMZ_1_SkillsStatesCore','ActSeq_Animation_BalloonIconSpecific','BattleManager_endAction','Scene_Battle_helpWindowRect','_buffs','createMainSprite','ActSeq_Camera_FocusPoint','skew','Scene_Battle_terminate','CalcActionSpeedJS','buffIconIndex','loadCharacter','visualCutinPortraitHue','PostDamageAsUserJS','inBattle','_allTargets','StatusWindowAttachmentBackOffsetY','updateUiContainerPosition','createEnemyNameContainer','damageFlat','BattleManager_startTurn','VisuMZ_2_BattleSystemBTB','children','isOTB','_targetBattlerKey','isOptionsCommandAdded','nameY','displaySubstitute','WaitComplete','Window_SkillList_maxCols','ActionEffect','isPhysical','_makeCursorAlpha','removeActor','\x5cC[16]%1\x5cC[0]','actionsFmt','positionOffsetY','message1','floor','BattleManager_isTpbMainPhase','textSizeEx','selectNextCommandTpb','_homeY','ShowReflectWait','ActSeq_DB_DragonbonesMotionAni','_animation','messageSpeed','not\x20focus','registerDefeatedEnemy','freezeFrame','floatBattler','itemLineRect','endInBattleStatus','%1StartActionJS','setupBattleCore','setBattleCameraPoint','GroupDigits','speed','applyVariance','attackTimesAdd','Mirror','checkShowHideSwitchNotetags','BattleVictoryJS','_aspectData','applyTargetFilters','expRate','loadSvEnemy','battleInjectPrep','_inputting','performTpbActiveCheckSwitch','ActSeq_Motion_MotionType','ActSeq_Grid_AddPassiveStatesToNode','BattleManager_initMembers','createLowerLayer','updateCommandNameWindow','performLifeSteal','Window_BattleLog_performSubstitute','CmdIconEscape','ForceRandom','createEnemyNames','BattleManager_onEscapeFailure','targetObjects','Enemy','ActSeq_Mechanics_PtbAlterCost','temporaryVisibile','drawActorLevel','_updateClientArea','ANGER','VisuMZ_2_BattleSystemCTB','hitsHealFmt','processExtendTroopMembers','createTroopNote','VisuMZ_3_SideviewBattleUI','ElementStatusCore','Game_Action_setAttack','iterateBattler','battleInjectAni','_mainSprite','gainCurrentActionsFTB','statusHelpDesc','_uiContainer','NameOffsetY','Game_Action_numRepeats','helpWindowRect','_skillWindow','ShowAddedDebuff','Spriteset_Battle_update','isAttack','next\x20target','All\x20Enemies','addNormalStatus','_namesCount','isInputting','Exploited','setActiveWeaponSet','updateGrow','isEscapeCommandEnabled','makeBuffName','casting','setColorTone','EscapeFail','updateLink','cancel','ActSeq_Grid_PullToTargetNode','_targetY','SvBattlerSolo-%1-%2','setImmortal','Sprite_Actor_updateFrame','coreEngineRepositionEnemies','alive\x20opponents\x20not\x20target','findTargetSprite','weaponTypes','skillItemWindowRectMiddle','changeTextColor','canMove','PostDamageJS','makeTargetSprites','ActSeq_Horror_TVCreate','currentSymbol','performAttackSlot','indexOf','3240872siwtqZ','updatePosition','VisualCutinEffect','updateFlip','OffsetY','drawTextEx','isStateResist','_lastPluginCommandInterpreter','battleCameraData','startInput','isGrowing','ARRAYNUM','battleCorePreBattleCommonEvent','maxWidth','stopInjectAnimation','repositionEnemiesByResolution','battleUIOffsetY','Game_Action_needsSelection','isDebuffAffected','SLEEP','-%1\x20MP','getStypeIdWithName','_enemyIDs','getFullActionsPTB','clearResult','startEnemySelection','_jumpDuration','Game_Battler_onTurnEnd','PrioritySortActive','VisuMZ_2_BattleSystemFTB','position','putActiveBattlerOnTop','Window_BattleLog_performAction','Game_Action_executeMpDamage','push','EasingType','isOpen','StateOverlayOffsetX','Skills','drawItemImageListStyle','_animationSprites','SyncBuffExpire','isBattleTest','checkCacheKey','_appeared','updateShadow','VisuMZ_3_WeaknessDisplay','PreRegenerateJS','_homeWholeDuration','AggroControlSystem','isOptionsCommandEnabled','battleLayoutStyle','AutoMeleeSolo','FollowTurn','isConfused','CastPhysical','NameFontSize','_updateCursorArea','Sprite_Battler_setBattler','ActSeq_Grid_TeleportToNode','ActSeq_Mechanics_EmulateSkillEffect','drawGauge','PrioritySortActors','isItemCommandEnabled','HelpSkillType','requestMotion','_requestRefresh','ActSeq_BattleLog_PopBaseLine','ARRAYSTR','Game_Action_setSkill','drawItemStatusXPStyle','extendTroopMembers','pageButtons','_deathStateApplied','AutoBattle','statusDescription','ActSeq_Movement_WaitForMovement','Scene_Battle_skillWindowRect','canGuardBattleCore','updateScale','_floatWholeDuration','performAttack','_battleBalloonSprites','sleep','message4','addText','onDisabledPartyCommandSelection','Scene_Party','ActSeq_Inject_AnimationStart','ActSeq_Impact_Negative','setBattler','_homeX','Game_Battler_clearMotion','isUnderAnimation','enemyShowParametersIfDefeated','getSkillTypes','getSpecificBattlerKeyTarget','processActorCommandCancelTPB','updateBattleVariables','isForFriend','MeleeDistance','ARRAYFUNC','CommandWidth','faceWidth','replace','_targetHomeY','createDigits','1434229Pnawip','chant','_angleEasing','CmdIconOptions','getHardDamageCap','Sprite_Actor_updateBitmap','addLoadListener','StatusWindow_DrawJS','makeSpeed','addSingleSkillCommand','battleSpin','visualCutinPortraitType','prototype','deathStateId','performMoveToTargets','missle','battleDisplayText','Scene_Battle_onActorOk','hardDamageCap','targetSpritePosition','Game_Actor_equips','undecided','_callSceneOptions','softDamageCapRate','Window_BattleLog_displayCritical','targetsForOpponents','stateHelpFmt','VisuMZ_4_CombatLog','innerHeight','_targetSkewY','ActSeq_Grid_AnimationJsAtNode','removeBattleBalloon','CurrentTurn','evalDamageFormula','_speed','ParseItemNotetags','Game_BattlerBase_eraseState','Window_BattleLog_displayFailure','ShowButton','DTB','performEvasion','CmdIconStatus','HP_Flat','ActSeq_Grid_TraverseToNode','overworldBattleback2Name','ShowMpDmg','debuffColor','drawLineText','isCommandEnabled','_padding','addGeneralOptions','ActSeq_Element_AddElements','18MeaBIV','finishActorInput','initialize','updatePhase','clearNameTempVisibility','Window_BattleLog_displayTpDamage','_baseLineStack','\x5cI[%1]%2','ALL_ENEMIES','Window_BattleActor_show','hpRate','regenerateAll','canAlterActionCostPTB','colSpacing','clearAllVisualCutins','LastSelected','Actions','head','StatusWindowAttachmentBackOffsetX','notFocusValid','DistanceX','anchorY','CmdTextAutoBattle','WaitForOpacity','clamp','ActSeq_Movement_WaitForFloat','Game_Interpreter_updateWaitMode','drawText','MessageWait','CopyCombatLog','Scene_Battle_createEnemyWindow','pause','maxTp','enemyHiddenParameter','NameAlwaysHidden','statusWindowRect','Game_Temp_requestAnimation','_growX','openBattleActorWindow','isGuardLifeSteal','PostApplyAsTargetJS','MaxHP','Scene_Battle_createPartyCommandWindowIBS','addState','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','_jumpHeight','update','ParseSkillNotetags','selectAllActors','PostStartActionJS','_character','Sprite_Actor_updateShadow','isBattlerGrounded','Game_Action_executeHpDamage_ComboWindow','isDuringNonLoopingMotion','VisuMZ_3_FrontviewBattleUI','_enemyID','BTB','alive\x20friends\x20not\x20target','setBattleCameraTargets','ShowCurrentState','minimumHits','BattleGridSystem','%1EndActionJS','pha','_activeWeaponSlot','ActionCenteredName','enemyShowParametersAlways','SceneManager_push','onEnemyOk','buffHelpFmt','clearForcedGameTroopSettingsBattleCore','updateDuration','Targets1','removeChildFromUiContainer','drawActorStateTurns','adjustPosition_1for1','RequiresDefeat','right','move','moveBattlerToPoint','AutoBattleOK','Game_Actor_setup','applyFreezeMotionFrames','startHomeMove','enemyShowParametersIfBattleTest','enemyShowLevel','trueRandomTarget','loadFaceImages','fontFace','displayMiss','useDigitGrouping','currentClass','ActSeq_Movement_BattleStep','_cacheTextWidth','CoreEngine','front\x20center','numberFontFace','disarmLifeSteal','motionIdle','ActSeq_Movement_Skew','playSystemSound','_nameTempVisibleDuration','NameAlwaysVisible','Window_BattleStatus_initialize','parallaxScrollX','_animationCount','ReflectAnimation','isEffecting','buffColor','_frontAttachmentSprite','StateIconOffsetY','obj','PreEndTurnJS','Game_Action_isForFriend','value1','createActionSequenceProjectile','invokeAction','updateVisibility','createJS','BattleLogRectJS','AttachStateOffsetX','WtypeId','Game_Battler_makeSpeed','skills','loadWindowskin','updateHpGaugePosition','resetTextColor','pageButtonPosition','targetActionSet','onFloatEnd','contentsBack','ACTOR_OFFSET_Y','Radius','surprise','isEnemy','callOptions','sideview_ui','ParseArmorNotetags','createAttachmentSprites','NO\x20ACTOR\x20FOUND!','VisuMZ_0_CoreEngine','waitForFloat','evade','description','ActSeq_Animation_BalloonIcon','Scene_Battle_createPartyCommandWindow','CTB','stateColor','AUTO\x20BATTLE','select','XPActorCommandLines','battleEnd','BattleCmdList','findSymbolExt','isFlipped','ActSeq_Animation_AttackAnimation2','_battleCoreAddedElements','\x5cI[%1]\x5cC[%3]%2','Game_Map_encounterList','repeats','_borderPortraitTargetX','anchor','getAspectData','ActSeq_Set_SetupAction','PopupDuration','name','customFontFace','Amp','removeStatesAuto','ActSeq_Grid_ClearPassiveStatesFromNode','isCertainHit','Scale','drawActorGraphic','isTpbCharged','hasSvBattler','Game_BattlerBase_isStateResist','damagePopupOffsetX','selectLast','ActSeq_Movement_WaitForScale','hasStaticSvBattler','_states','battleCommands','getReturnWindow','updateShadowPosition','CastAnimation','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','performActionEndMembers','emulateActionEffect','setCommonEvent','Game_Party_addActor','_cursorSprite','SlotID','100%','Scene_Battle_windowAreaHeight','Scene_Battle_startActorCommandSelection','makeCommandList','ActSeq_Mechanics_StbExtraAction','normalColor','destroyDamageSprite','setAttack','bottom','playReflection','updateStateSpriteBattleCore','mainFontSize','createActorCommandWindowBattleCore','padding','\x5cI[%2]\x5cC[16]%1\x5cC[0]','gaugeBackColor','repeatTargets','ConfigManager_applyData','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','isPlaying','_battleCoreBattleStartEvent','positionOffsetX','removeAnimationFromContainer','JS\x20%1END\x20TURN','isChangingOpacity','adjustPosition_ScaleToFit','code','removeImmortal','refreshMotion','extraHeight','Sprite_Actor_setBattler','extraPositionScaledY','_battlePortrait','Sprite_Enemy_updateCollapse','ResetOffset','VisuMZ_1_ElementStatusCore','sortEnemies','ForceDeath','ShowMissEvasion','attackSkillId','addShowHpGaugeCommand','drawIcon','Game_Action_isForOne','HelpStatus','Game_BattlerBase_allIconsIBS','pattern','_buttonKey','displayCurrentState','Game_BattlerBase_initMembers','HpGaugeOffsetY','Scene_Battle_createActorCommandWindow','all\x20actors','isPreviousScene','_targetGrowY','_colorFilter','ActSeq_Animation_BalloonIconRange','%1▼','Sprite_Battler_startMove','HEART','JS\x20ESCAPE\x20SUCCESS','startIcon','Scene_Map_initialize','isForOne','DamageStyles','ActSeq_Projectile_Icon','Text','addDebuff','_skewWholeDuration','mainSpriteHeight','processTouch','skillWindowRect','createSeparateDamagePopups','close','isBattleCoreTargetScope','Scene_Battle_needsInputWindowChangeIBS','_targetDamage','turn','applyBattleCoreCriticalHitRateJS','jsCritRateAsTarget','createPartyCommandWindow','frameVisible','CounterPlayback','ActSeq_Grid_ActionAnimationAtNode','addActor','isSkill','PortraitScaleBorderStyle','match','processBorderActor','autoBattle','default','ActionAnimation','makeActionList','resetCounter','_partyWindow','processRefresh','isForAnyone','addStatusCommand','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','StateID','jsScaleDown','\x20to\x20%1\x20midbattle.','DisplayAction','addWindow','adjustPosition','updateWaitMode','arPenFlat','addChildAt','Game_BattlerBase_refresh','PreStartActionJS','setBattlerFlip','createBattleUIOffsetY','_isProjectile','AnchorX','ActionEndUpdate','drawItemActorFace','onActorOk','updatePointAnimations','PartyCmd','ActSeq_Movement_WaitForJump','isOverworld','statusTextAutoBattleStyle','_skewEasing','TpbGaugeOffsetY','isActionSelectionValid','symbol','Game_Battler_clearDamagePopup','playCursor','_spriteset','isForOneBattleCore','wholeActionSet','isAnyoneInjectAnimating','TimeScale','DamageType%1','negativeLifeSteal','isStatusAffected','_actionBattlers','isUndecided','setupActionSet','_flinched','_text','swing','_targetHomeX','BackColor','_lineHeight','growBattler','battleStatusSprite','findIndex','commandRemember','ActSeq_Movement_HomeMoveBy','value','DisablePartyCmd','mpColor','ActSeq_Horror_Clear','processBattleCoreJS','_wtypeIDs','autoBattleWindowRect','battleVoices','Sprite_Enemy_setBattler','Targets','ActSeq_Camera_WaitForCamera','ActSeq_Element_Clear','_selectionEffectCount','BattleEndEvent','resetNameTempVisibility','pauseInjectAnimation','clearFreezeMotionForWeapons','jsAccuracyAsTarget','width','toUpperCase','Game_Action_executeHpDamage','isAnimationPlaying','setGuard','displayChangedBuffs','lifeStealTrait','_phase','battleUIOffsetX','ClearBattleLog','_colorType','$target','resizeWindowXPStyle','Scene_Battle_selectNextCommand','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','itemHeight','processDrawEnemyBattler','StepDistanceY','AspectNameFmt','ActSeq_Mechanics_AtbGauge','getNextSubject','ComboWindow_DrawJS','actionEffect','autoBattleAtStart','currentAction','command301_PreBattleEvent','inputtingAction','states','AsTarget','updateStart','addChildToBack','tpbActorSwitchConditionsMet','isRepeated','param','forActor','filters','targetsForFriends','createStatesWindow','frameDelay','hitIndex','ActSeq_Movement_HomeMoveToPoint','Window_Options_statusText','all\x20targets','hpDamage','_motionSpeed','ActionItemMsg','ScaleToFit','BG_TYPE','Scene_Map_updateCallMenu','SideviewSelect','VisuMZ_2_WeaponSwapSystem','_stateTurns','isBattleSys','actorCommandCancelTPB','_skewX','jsAccuracy','_displayBattleCoreTransitionErrorMsg','animationNextDelay','_pattern','debuffValueFmt','USER-DEFINED\x202','textColor','HITTYPE_CERTAIN','animationId','ActSeq_Camera_FocusTarget','drawActorStateData','setWaitMode','subject','itemEffectAddAttackState','pageOffsetY','Victory','Game_Action_isForDeadFriend','random','ActSeq_Element_NullElements','AutoBattleCancel','startWeaponAnimation','fontSize','itemTargetCandidates','onEscapeSuccess','rowSpacing','Sprite_Battler_initMembers','Window_BattleLog_popBaseLine','createDamageCounterWindow','Game_Interpreter_command283','validTargets','magicSkills','makeActionOrders','chantStyle','PreEndActionJS','stepFlinch','Sprite_Enemy_initVisibility','updateBattleBalloons','hasBeenDefeatedBefore','setupBattleCoreAspects','Window_BattleLog_displayMiss','applyCritical','JS\x20%1DAMAGE\x20%2','user','initBattleCore','callNextMethod','ActSeq_Impact_ZoomBlurPoint','setBlendColor','EscapeFailureJS','USER-DEFINED\x201','Setting','ConvertCount','magicReflection','applyDamageCaps','skillTypes','setHelpWindowItem','_list','debuffNameFmt','balloonId','itemHit','font','displayRemovedStates','performCounter','setLastPluginCommandInterpreter','Game_Battler_performDamage','isSelected','_returnWindow','criticalHitRate','_baseY','displayFailure','Scene_Battle_selectPreviousCommand','_actorCommandWindow','ActSeq_Animation_ChangeBattlePortrait','playBattleVoice','debuffHelpFmt','ActSeq_Mechanics_BoostPointsChange','Game_Action_isForAll','clearFreezeMotion','JS\x20%1START\x20TURN','isAnyoneFloating','traitObjects','sprite','_skewY','pushBaseLine','displayItemMessage','setBattlerMotionTrailData','startTpbTurn','ALL_ACTORS','_visualHpGauge_JustDied','startBattle','loadSvActor','endBattle','PreStartBattleJS','setupBattlebackBattleCore','rec','parallaxHue','portraitFlipHorz','_forActor','bgType','toString','Game_BattlerBase_addNewState','updateLastTarget','getItemDamageAmountLabelBattleCore','okTargetSelectionVisibility','BindCommonEventKeysForObj','ActSeq_Horror_GlitchCreate','drawItemActorSvBattler','addDamageSprite','border','displayChangedStates','battleCommandIcon','drawBackgroundRect','_totalValue','_action','ActSeq_Impact_Oversaturate','CustomFontFace','AttachStateOffsetY','_angleWholeDuration','callUpdateHelp','partyCommandWindowRectDefaultStyle','disarmHpLifeSteal','_actorMultiTargetWindow','opacity','checkTpbInputClose','updateActors','States','setActionState','Game_Interpreter_PluginCommand','isBattlerTargeted','autoBattleStyle','getBattleMembers','ActSeq_Target_NextTarget','getSkillIdWithName','CommandAddAutoBattle','alterPriority','passiveText','battleSys','Item-%1-%2','Turns','Mechanics','createDamageSprite','pop','ActSeq_Movement_FaceDirection','Sprite_Weapon_loadBitmap','value2','performActionEnd','HITTYPE_PHYSICAL','ActSeq_Movement_HomeMoveToJsPoint','auto','ActSeq_Mechanics_AddState','_target','QUESTION','1:1','AutoAddState','actor','_enemySprite','5453904VlZFjF','ActionCount','_pageupButton','adjustPosition_ScaleDown','toUseBoostPoints','createHpGaugeSprite','makeStateHelpText','randomInt','flashColor','alive\x20enemies\x20not\x20target','ArPenFlat','WaitForJump','isPartyTpbInputtable','ConvertActionSequenceTarget','VariableID','clear','setupBlueRedInvertImpactFilter','_enemySprites','formula','mainSpriteScaleY','command3011','ActSeq_BattleLog_WaitForNewLine','isDrain','addNewState','playEnemyAttack','createAnimationContainer','contains','_scene','setEventCallback','priority','DamageRate','setBattleImpactTimeScale','WaitForZoom','isDamagePopupRequested','_targetOpacity','tpDamage','makeBuffHelpText','_distortionSprite','setFullActionsPTB','ActSeq_Impact_TimeScale','MIN_SAFE_INTEGER','TextAlign','arRedRate','battleCommandName','Window_BattleStatus_drawItemImage','makeData','textBaseline','PopupShiftX','%1\x20%2:\x20%3\x20is\x20missing\x20the\x0a','popBaseLine','_weaponImageId','setupDamagePopup','processForcedAction','startMotion','ActSeq_Set_TargetActionSet','ShowWeapon','createBorderStylePortraitSprite','clearMotion','_forceAction','StartName','jump','Sprite_Animation_targetSpritePosition','updateCancelButton','ParseEnemyNotetags','showAnimation','onStaticEnemyBitmapLoad','requestPointAnimation','spinBattler','NameLegacy','_makeFontNameText','_motionCount','_weaponSprite','isDisplayEmergedEnemies','Game_Action_itemTargetCandidates','enemy','isAnyoneInjectAniPrepping','jumpBattler','Window_ActorCommand_setup','Sprite_SvEnemy','displayTpDamage','ActSeq_Animation_WaitForAnimation','save','CommandAddStatus','VisuMZ_2_DragonbonesUnion','startInjectAnimation','top','isATB','pageOffsetX','isBypassDamageCap','_preemptive','addMeleeReturnActionSet','setEnemyWindowMode','isSTB','cancelTargetSelectionVisibility','powerDownColor','AnimationID','emulateAction','_flashColor','prepare','Game_Action_clear','commandName','setBattlePortrait','makeAutoBattleActions','processOk','lifeSteaItem','waitForNewLine','ActSeq_BattleLog_WaitForBattleLog','commandStyleCheck','_tpbChargeTime','exit','drawActorBuffRates','ActSeq_Mechanics_ArmorPenetration','_damagePopupArray','ScaleDown','createMiss','iconWidth','string','FullActions','testApply','applyBattleCoreHitRateJS','View\x20battle\x20member\x20status.','Spriteset_Battle_updateActors','GetParamIcon','_motion','removeChild','ActSeqImpact','alterCost','onTurnEnd','_baseTexture','disperseDamage','Window_PartyCommand_initialize','PreApplyJS','getWtypeIdWithName','buffRemove','_floatHeight','showNormalAnimation','MotionIdle','updateShakeFlinch','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','PostApplyJS','snapForBackground','becomeSTBExploited','_targetAngle','drawActorClass','ANNOYED','requestAnimation','1410143pkpyLY','updateTargetValue','Sprite_Enemy_setHue','revealNewWeaknesses','setStateTooltipBattler','ActSeq_BattleLog_AddText','Scene_ItemBase_applyItem','createCancelButton','characterName','svBattlerName','BattleLog','updateCancel','_fauxAnimationSprites','setItem','setSTBExploited','dataId','JS\x20ESCAPE\x20FAILURE','CalcEscapeRaiseJS','jsOneForOne','...','CreateActionSequenceTargets','alive\x20actors\x20not\x20user','startActorSelection','Window_Options_addGeneralOptions','attackStatesRate','Formula','Slot','spriteId','isAutoBattleCommandAdded','_targetFloatHeight','checkTpbInputOpen','isJumping','ActSeq_Mechanics_CtbSpeed','effects','_underAnimationContainer','clearBattleBalloons','endAction','noise','linkSprite','isSideButtonLayout','actionBattleCoreJS','ActSeq_Cutin_EndVisualCutinEffectType','Pre','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','forceAction','EndBattlePopups','addBattlerStates','Window_BattleLog_performRecovery','canAddSkillCommand','Window_BattleLog_performReflection','updateFloat','updateAction','ParseStateNotetags','preemptive','_floatEasing','format','updateStateIconSprite','constructor','BgType','isForAliveFriendBattleCore','stbGainInstant','%1-%2','ColorManager_mpColor','hide','Window_BattleLog_displayActionResults','length','StateIconOffsetX','_autoBattle','alterActionCostPTB','parseForcedGameTroopSettingsBattleCore','ActSeq_Animation_GuardAnimation','isForRandom','onGrowEnd','useItem','FlashDuration','frameCount','updateHelp','ParseWeaponNotetags','WaitForEffect','Game_Troop_setup','repositionCancelButtonBorderStyle','BattleManager_setup','_battleBalloonQueue','_drawTextBody','normalIcon','isActing','allowCollapse','forceMotion','performSTBExploiter','isOpenAndActive','Game_Battler_startTpbTurn','Window_BattleLog_performCounter','frontviewSpriteY','portraitFilename','GUARD','placeGauge','PostStartTurnJS','turns','BattleManager_startInput','loop','mainSpriteScaleX','setHalfActionsPTB','weatherPower','ActSeq_Impact_TimeStop','skewDuration','onEncounter','max','Window_BattleLog_displayCurrentState','buff','makeDeepCopy','changeCtbCastTime','setActiveWeaponSlot','helpWindowRectBorderStyle','autoRemovalTiming','iconHeight','drawEnemyBattler','getDefeatedEnemies','canAttack','_autoBattleWindow','SETTINGS','ActSeq_BattleLog_DisplayAction','Game_Battler_regenerateAll','VisuMZ_3_ActSeqImpact','PostRegenerateJS','setupFont','gradientFillRect','PostEndActionJS','createEnemyWindow','canBattlerMove','SkillItemStandardCols','Users','updateBattlerContainer','ActionEnd','ActSeq_Impact_ColorBreak','ActorJS','ActSeq_Movement_FacePoint','Game_Battler_performActionStart','updateEffectContainers','battleMove','process_VisuMZ_BattleCore_BaseTroops','Direction','StatusWindowAttachmentFront','addEscapeCommand','startMove','setFrame','WaitForSpin','isBusy','ActSeq_Mechanics_ActiveChainInputDisable','ActSeq_Animation_ShowAnimation','_effectsContainer','BattleManager_abort','CmdIconAutoBattle','AsUser','ActSeq_Movement_Jump','ConvertParams','%1EndTurnJS','isBattleMember','<Custom\x20Action\x20Sequence>\x20notetag','gaugeX','iconText','ShakeFlinchDuration','_updateFilterArea','getConfigValue','BattleManager_processVictory','CreateCutinSettings','makeTargetSelectionMoreVisible','logWindowRect','startAction','isIncludedInEnemyWindow','-%1','_injectAnimationSprite','Window_BattleActor_processTouch','battleJump','bossCollapse','makeTargetsBattleCore','StatusWindowSelectableBackHide','WaitForExit','_cursorArea','makeActionListAutoAttack','ENEMY_OFFSET_X','ATTACK','HitRate','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','moveToStartPositionBattleCore','_backAttachmentSprite','index','ShowAddedState','SmoothImage','Scene_Battle_isTimeActiveIBS','ActionSkillMsg1','isGuard','getAttackMotion','HomePosJS','comboWindowOffsetY','Game_BattlerBase_meetsUsableItemConditions','FlinchDistanceX','_actorSprites','setupHpGaugeSprite','AlphaFilter','initVisibility','AllEnemiesText','_commonEventKey','ActSeq_Impact_ShockwavePoint','ActSeq_Movement_Scale','WaitForAnimation','drawActorFace','_targets','onEnemyCancel','setupMotionBlurImpactFilter','enemyId','BattleManager_invokeCounterAttack','AGI','updateStyleOpacity','actorCommandEscape','skewBattler','%1\x20%2','MUSIC','offsetY','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','_statusWindow','_regionBattleback2','getBattlerKeyTargets','Normal','VisuMZ_4_BreakShields','isMagicSkill','StatusWindow_RectJS','_armorPenetration','loadSystem','PostDamageAsTargetJS','usePremadeActionSequence','maxItems','_battleCoreNoElement','currentExt','_inBattleStatusMode','VisuMZ_3_ActSeqCamera','makeTargets','commandEscape','_skewDuration','ActSeq_Mechanics_StateTurnsChangeBy','Settings','faceHeight','_helpWindow','STR','turnOrderChangeOTB','Game_Interpreter_command301','_dragonbonesSpriteContainer','filterArea','shift','compatibilityVisible','pointY','isNegativeLifeSteal','autoMeleeSingleTargetActionSet','Sprite_AnimationMV_updatePosition','isLearnedSkill','ActSeq_Mechanics_VariablePopup','ShowTpDmg','portrait','retrieveBattleBalloon','LUK','performMiss','contentsOpacity','Sprite_Enemy_updateStateSprite','portraitHue','battleSkew','apply','VoiceLine','_lastAction','Scene_Map_launchBattle','processRandomizedData','_immortal','clearRect','onOpacityEnd','ActSeq_Impact_ShockwaveCenterTargets','partyCommandWindowRectXPStyle','Shadow2','_weather','_visibleDuration','smooth','isPlaytest','EnemyOffsetX','loadPicture','WaitCount1','Sprite_Battler_isMoving','shouldHideBattleEndPopups','ActSeq_Mechanics_DeathBreak','_enemyMultiTargetWindow','opacityStart','startShakeFlinch','BattleSystemSTB','makeTurnsText','cutinExit','displayActionResults','windowPadding','damageOffsetX','VisuMZ_3_BattleCmdTalk','bitmapHeight','_hideAllIcons','mpDamage','ActSeq_Animation_BalloonAnimation','_duration','_shadowSprite','ForceExploiter','getBattlePortraitFilename','setBattleSkew','float','process_VisuMZ_BattleCore_CreateRegExp','Sprite_Damage_createChildSprite','cameraOffsetDuration','performCastAnimation','_itemWindow','setupWeaponAnimation','playCancel','Game_Action_itemEffectAddNormalState','isCancelLifeSteal','drawItemImagePortraitStyle','dimColor1','placeActorName','MpGaugeOffsetY','switchToWeaponType','Scene_Battle_updateBattleProcess','turnCount','setHandler','VisuMZ_2_HorrorEffects','applyResultSwitches','makeTargetsBattleCoreJS','updateBattlebackBitmap2','QoL','ActSeq_Grid_RemovePassiveStatesFromNode','getBattlePortraitOffsetX','battleback2Name','createAllWindows','ButtonAssist','opponentsUnit','ShuffleArray','BattleSystemBTB','calcWindowHeight','powerUpColor','Game_Action_itemHit','ActSeq_Impact_Desaturate','pageup','FlinchDuration','battleEffect','custom','getItemDamageAmountTextBattleCore','_battleCoreBattleResumeAfter','PreDamage%1JS','AS\x20TARGET','EscapeSuccess','applySoftDamageCap','displayStartMessages','isETB','currentDisplayedValue','process_VisuMZ_BattleCore_PreBattleCommonEvent','_multipliers','startTurn','removeAnimation','Game_Battler_performMiss','RevertAngle','_item','showHelpWindow','process_VisuMZ_BattleCore_DamageStyles','changeInputWindow','_commonEventIDs','Game_Battler_performEvasion','Sprite_Battler_damageOffsetX','offsetX','addBattlerBuffsDebuffs','applyHardDamageCap','ARRAYJSON','VisuMZ_2_BattleSystemPTB','drawTurnsRemaining','applyForcedGameTroopSettingsBattleCore','statesWindowRect','Parse_Notetags_HelpDescription','virtualClick','TpbActiveChangeEnabled','active','Targets2','ChantStyle','context','BattleDefeatJS','FRUSTRATION','performDamage','Sprite_Battleback_adjustPosition','_currentActor','Game_Map_setupBattleback','Window_BattleEnemy_initialize','waitForOpacity','weapons','lastCommandSymbol','action','clone','damageText','_battlerName','createDistortionSprite','_enemyWindowMode','_statusType','ItemID','excludeListing','AutoBattleMsg','currentValue','onSkewEnd','parseLocalizedText','textAlign','setupBattleback','gainTp','OffsetAdjust','Game_BattlerBase_canAttack','removeOnceParallelInterpreter','selectNextActor','_jumpMaxHeight','applyData','ActSeq_Horror_NoiseRemove','ActSeq_Angle_WaitForAngle','\x5cC[%1]','attackStates','actorId','makeSuccess','minimumStayDuration','displayMpDamage','isActor','dying','selectedBattlers','Window_BattleLog_performEvasion','process_VisuMZ_BattleCore_CommonEventKeys','itemEffectAddNormalState','arPenRate','_borderPortraitDuration','counterAttack','battleSpriteSkew','StartTurnWait','dead\x20enemies','okButtonText','addExtendedTroopMembers','buffValueFmt','Window_BattleActor_hide','PreDamageAsTargetJS','isFightCommandEnabled','SkillID','onBattleStart','_inBattleStatusWindow','isForAliveFriend','loadEnemy','playOnceParallelInterpreter','ParseClassNotetags','result','_attackAnimationId','isAnimationShownOnBattlePortrait','parallaxScrollXinvertEnemy','pow','victory','addOptionsCommand','StyleON','_tempEquipCheck','+%1\x20MP','battlerHue','VisuMZ_4_IconBalloons','movement','VariableDmg','ActSeq_Movement_MoveToTarget','displayAddedStates','battleStatusWindowAnimationContainer','_eventId','AutoBattleBgType','_offsetY','setBattleCameraOffset','smoothness','isAnyoneChangingOpacity','isMeleeMultiTargetAction','shouldDisperseDamage','LIGHTBULB','_enemyNameContainer','skill','displayHpDamage','performWeaponAnimation','_methods','isSkillItemWindowsMiddle','MUSICNOTE','onAngleEnd','unchanged','TPB','Scene_Battle_createActorCommandWindowIBS','getColor','setBattleZoom','create','displayedParams','prev\x20target','slices','getLastHpDamage'];_0x373d=function(){return _0xaa6814;};return _0x373d();}Window_InBattleStatusStates['prototype']=Object[_0x4376f0(0xbdd)](Window_Command[_0x4376f0(0x705)]),Window_InBattleStatusStates['prototype'][_0x4376f0(0xa32)]=Window_InBattleStatusStates,Window_InBattleStatusStates['SETTINGS']={'maxWidth':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)]['statesMaxWidth']??0x180,'drawStates':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)]['drawStates']??!![],'drawBuffs':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)][_0x4376f0(0x137)]??!![],'drawDebuffs':VisuMZ[_0x4376f0(0x19c)]['Settings']['InBattleStatus']['drawDebuffs']??!![],'normalIcon':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)][_0x4376f0(0xa4d)]??0x54,'normalText':VisuMZ['BattleCore'][_0x4376f0(0xae8)][_0x4376f0(0x526)][_0x4376f0(0x4bc)]??_0x4376f0(0xad7),'normalHelp':VisuMZ[_0x4376f0(0x19c)]['Settings']['InBattleStatus']['normalHelp']??_0x4376f0(0x15d),'stateHelpFmt':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)][_0x4376f0(0x713)]??_0x4376f0(0xad0),'buffNameFmt':VisuMZ[_0x4376f0(0x19c)]['Settings'][_0x4376f0(0x526)]['buffNameFmt']??'%1▲','buffHelpFmt':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)][_0x4376f0(0x773)]??_0x4376f0(0x84f),'debuffNameFmt':VisuMZ[_0x4376f0(0x19c)]['Settings'][_0x4376f0(0x526)][_0x4376f0(0x904)]??_0x4376f0(0x826),'debuffHelpFmt':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)][_0x4376f0(0x915)]??'Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','actionsFmt':VisuMZ['BattleCore']['Settings'][_0x4376f0(0x526)][_0x4376f0(0x624)]??_0x4376f0(0x564),'turnsFmt':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)][_0x4376f0(0x526)]['TurnsFmt']??'\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','passiveText':VisuMZ[_0x4376f0(0x19c)][_0x4376f0(0xae8)]['InBattleStatus'][_0x4376f0(0x952)]??'\x5cC[4](Passive)'},Window_InBattleStatusStates[_0x4376f0(0x705)][_0x4376f0(0x72f)]=function(_0x400827){const _0xc35890=_0x4376f0;this['_battler']=null,Window_Command[_0xc35890(0x705)][_0xc35890(0x72f)][_0xc35890(0x34b)](this,_0x400827),this[_0xc35890(0x16e)](),this[_0xc35890(0x2d5)](),this['setBackgroundType'](0x2);},Window_InBattleStatusStates[_0x4376f0(0x705)][_0x4376f0(0x6e8)]=function(_0x2bc459){const _0x43c06=_0x4376f0;this[_0x43c06(0x39a)]=_0x2bc459||null,this[_0x43c06(0x31b)](),this[_0x43c06(0x3a9)](0x0),this['scrollTo'](0x0,0x0),this['activate']();},Window_InBattleStatusStates[_0x4376f0(0x705)]['playOkSound']=function(){},Window_InBattleStatusStates['prototype'][_0x4376f0(0x7f1)]=function(){const _0x3e2229=_0x4376f0;if(!this['_battler'])return;this['addBattlerAspect'](),this['addBattlerStates'](),this[_0x3e2229(0xb67)](),this[_0x3e2229(0x66f)]();},Window_InBattleStatusStates[_0x4376f0(0x705)][_0x4376f0(0x3e6)]=function(){const _0x15e1a1=_0x4376f0;if(!this[_0x15e1a1(0x39a)]['isEnemy']())return;if(!this[_0x15e1a1(0x39a)][_0x15e1a1(0x3ad)]())return;const _0x460a11=this[_0x15e1a1(0x39a)][_0x15e1a1(0x7d0)]()[_0x15e1a1(0x7d3)],_0x198c10=this['_battler']['getAspectData']()[_0x15e1a1(0xc45)],_0x2c7e2c=this[_0x15e1a1(0x39a)][_0x15e1a1(0x7d0)]()[_0x15e1a1(0x345)];let _0x3c39f5='';_0x2c7e2c[_0x15e1a1(0x844)](/#(.*?)/gi)&&Imported[_0x15e1a1(0x1f9)]?_0x3c39f5='\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0x15e1a1(0xa30)](_0x198c10,_0x460a11,_0x2c7e2c):_0x3c39f5=_0x15e1a1(0x7cb)[_0x15e1a1(0xa30)](_0x198c10,_0x460a11,_0x2c7e2c),this['addCommand'](_0x3c39f5,_0x15e1a1(0xc22),!![]);},Window_InBattleStatusStates['prototype'][_0x4376f0(0xa27)]=function(){const _0x536d2f=_0x4376f0;if(!Window_InBattleStatusStates['SETTINGS']['drawStates'])return;for(const _0x59183c of this[_0x536d2f(0x39a)][_0x536d2f(0x8b0)]()){if(!this[_0x536d2f(0x354)](_0x59183c))continue;const _0x4cbca7=this[_0x536d2f(0x208)](_0x59183c);this['addCommand'](_0x4cbca7,_0x536d2f(0x247),!![],_0x59183c['id']);}},Window_InBattleStatusStates[_0x4376f0(0x705)][_0x4376f0(0x354)]=function(_0x5a1c11){const _0x28002e=_0x4376f0;if(!_0x5a1c11)return![];if(_0x5a1c11[_0x28002e(0x7d3)][_0x28002e(0x5cf)]()==='')return![];if(_0x5a1c11[_0x28002e(0x7d3)]['includes']('-----'))return![];if(_0x5a1c11[_0x28002e(0xc45)]<=0x0)return![];if(_0x5a1c11[_0x28002e(0xb87)])return![];return!![];},Window_InBattleStatusStates[_0x4376f0(0x705)][_0x4376f0(0x208)]=function(_0x5abe40){const _0x329082=_0x4376f0;let _0x1d263e=_0x5abe40[_0x329082(0xc45)],_0x104e7e=_0x5abe40[_0x329082(0x7d3)],_0x21efb6='0';return Imported[_0x329082(0x601)]&&Imported[_0x329082(0x1f9)]&&(_0x21efb6=String(ColorManager['stateColor'](_0x5abe40))),_0x21efb6[_0x329082(0x844)](/#(.*?)/gi)?_0x329082(0x546)[_0x329082(0xa30)](_0x1d263e,_0x104e7e,_0x21efb6):_0x329082(0x7cb)[_0x329082(0xa30)](_0x1d263e,_0x104e7e,_0x21efb6);},Window_InBattleStatusStates['prototype'][_0x4376f0(0xb67)]=function(){const _0x41440a=_0x4376f0;for(let _0x5970cb=0x0;_0x5970cb<0x8;_0x5970cb++){const _0x13863d=this[_0x41440a(0x676)](_0x5970cb);if(!_0x13863d)continue;this[_0x41440a(0x511)](_0x13863d,_0x41440a(0xa65),!![],_0x5970cb);}},Window_InBattleStatusStates[_0x4376f0(0x705)][_0x4376f0(0x676)]=function(_0x1fcd0a){const _0x273e46=_0x4376f0;if(!this[_0x273e46(0x39a)][_0x273e46(0x428)](_0x1fcd0a)&&!this['_battler'][_0x273e46(0x6a0)](_0x1fcd0a))return'';const _0x586526=Window_InBattleStatusStates[_0x273e46(0xa70)];if(this[_0x273e46(0x39a)][_0x273e46(0x428)](_0x1fcd0a)&&!_0x586526[_0x273e46(0x137)])return'';if(this[_0x273e46(0x39a)][_0x273e46(0x6a0)](_0x1fcd0a)&&!_0x586526[_0x273e46(0x309)])return'';const _0x1c5e98=this[_0x273e46(0x39a)][_0x273e46(0x605)][_0x1fcd0a];let _0x18ff7e=this[_0x273e46(0x39a)][_0x273e46(0x60b)](_0x1c5e98,_0x1fcd0a),_0x1bb7d2=TextManager['param'](_0x1fcd0a);_0x1c5e98>0x0?_0x1bb7d2=_0x586526['buffNameFmt'][_0x273e46(0xa30)](_0x1bb7d2):_0x1bb7d2=_0x586526[_0x273e46(0x904)][_0x273e46(0xa30)](_0x1bb7d2);let _0x1dd6e4=0x0;return Imported[_0x273e46(0x601)]&&(_0x1dd6e4=_0x1c5e98>0x0?ColorManager['buffColor']():ColorManager[_0x273e46(0x727)]()),String(_0x1dd6e4)[_0x273e46(0x844)](/#(.*?)/gi)?_0x273e46(0x546)[_0x273e46(0xa30)](_0x18ff7e,_0x1bb7d2,_0x1dd6e4):'\x5cI[%1]\x5cC[%3]%2'[_0x273e46(0xa30)](_0x18ff7e,_0x1bb7d2,_0x1dd6e4);},Window_InBattleStatusStates[_0x4376f0(0x705)]['addNormalStatus']=function(){const _0x51eb24=_0x4376f0;if(this[_0x51eb24(0x903)][_0x51eb24(0xa3a)]>0x0)return;const _0x20e31f=Window_InBattleStatusStates[_0x51eb24(0xa70)],_0x13eab9=_0x20e31f[_0x51eb24(0xa4d)],_0x498d2d=_0x20e31f[_0x51eb24(0x4bc)],_0x132ad0=_0x51eb24(0x734)[_0x51eb24(0xa30)](_0x13eab9,_0x498d2d);this['addCommand'](_0x132ad0,_0x51eb24(0xbf7));},Window_InBattleStatusStates[_0x4376f0(0x705)]['drawItem']=function(_0x347fbb){const _0x1fcd01=_0x4376f0,_0x51f9b3=this[_0x1fcd01(0x634)](_0x347fbb);this['changePaintOpacity'](0xff),this[_0x1fcd01(0x693)](this[_0x1fcd01(0x9cb)](_0x347fbb),_0x51f9b3['x'],_0x51f9b3['y']),this[_0x1fcd01(0xb6b)](_0x347fbb,_0x51f9b3);},Window_InBattleStatusStates[_0x4376f0(0x705)][_0x4376f0(0xb6b)]=function(_0x1bfdbe,_0x5492c8){const _0x1a8663=_0x4376f0;if(!Imported[_0x1a8663(0x601)])return;const _0xb2adb1=this[_0x1a8663(0x491)](_0x1bfdbe),_0x3584e6=_0x5492c8['x']+0x2;if(_0xb2adb1===_0x1a8663(0x247)){const _0x3b1cb4=$dataStates[this[_0x1a8663(0x903)][_0x1bfdbe][_0x1a8663(0x445)]||0x0];this[_0x1a8663(0x778)](this['_battler'],_0x3b1cb4,_0x3584e6,_0x5492c8['y']),this[_0x1a8663(0x8d6)](this[_0x1a8663(0x39a)],_0x3b1cb4,_0x3584e6,_0x5492c8['y']);}else{if(_0xb2adb1===_0x1a8663(0xa65)){const _0x278f74=this[_0x1a8663(0x903)][_0x1bfdbe]['ext'];this['drawActorBuffTurns'](this[_0x1a8663(0x39a)],_0x278f74,_0x3584e6,_0x5492c8['y']),this[_0x1a8663(0x9d5)](this[_0x1a8663(0x39a)],_0x278f74,_0x3584e6,_0x5492c8['y']);}}},Window_InBattleStatusStates[_0x4376f0(0x705)]['updateHelp']=function(){const _0x49bfd1=_0x4376f0,_0x4e9a2f=this[_0x49bfd1(0x68b)]();let _0x514b9b='';if(_0x4e9a2f===_0x49bfd1(0xc22))_0x514b9b=this[_0x49bfd1(0x39a)][_0x49bfd1(0x7d0)]()[_0x49bfd1(0x7bd)];else{if(_0x4e9a2f==='state')_0x514b9b=this[_0x49bfd1(0x96d)]();else{if(_0x4e9a2f===_0x49bfd1(0xa65))_0x514b9b=this['makeBuffHelpText']();else _0x4e9a2f===_0x49bfd1(0xbf7)&&(_0x514b9b=Window_InBattleStatusStates[_0x49bfd1(0xa70)]['normalHelp']);}}_0x514b9b?this[_0x49bfd1(0xaea)][_0x49bfd1(0x3fb)](_0x514b9b):this[_0x49bfd1(0xaea)][_0x49bfd1(0x976)]();},Window_InBattleStatusStates[_0x4376f0(0x705)][_0x4376f0(0x96d)]=function(){const _0x36b557=_0x4376f0,_0x4158c9=Window_InBattleStatusStates[_0x36b557(0xa70)],_0x2ac1f9=this[_0x36b557(0xae1)]();let _0x39522b='';const _0x3b950a=$dataStates[_0x2ac1f9]||null;if(_0x3b950a){const _0x379338=_0x4158c9[_0x36b557(0x713)];let _0x5c1444=_0x3b950a[_0x36b557(0x6d9)]||_0x3b950a[_0x36b557(0x7bd)]||'';Imported[_0x36b557(0x601)]&&(_0x5c1444=_0x5c1444[_0x36b557(0xa30)](this[_0x36b557(0x39a)]['getStateDisplay'](_0x2ac1f9)));let _0x3f7cc0=_0x36b557(0x392);if(this[_0x36b557(0x39a)][_0x36b557(0x3cb)](_0x2ac1f9)){if(_0x3b950a[_0x36b557(0xa6a)]===0x0)_0x3f7cc0=_0x36b557(0x34d);if(_0x3b950a[_0x36b557(0xa6a)]===0x1)_0x3f7cc0=_0x36b557(0x4d2);if(_0x3b950a[_0x36b557(0xa6a)]===0x2)_0x3f7cc0=_0x36b557(0xa5a);}const _0x5a1256=this[_0x36b557(0x39a)][_0x36b557(0x8c8)][_0x2ac1f9]||0x0;let _0x377990=_0x36b557(0xc4b);Imported['VisuMZ_1_SkillsStatesCore']&&Imported[_0x36b557(0x1f9)]&&(_0x377990=ColorManager[_0x36b557(0x7c1)](_0x3b950a),_0x377990['match'](/#(.*?)/gi)?_0x377990='\x5cHEXCOLOR<%1>'[_0x36b557(0xa30)](_0x377990):_0x377990=_0x36b557(0xb97)[_0x36b557(0xa30)](_0x377990)),_0x39522b=_0x379338[_0x36b557(0xa30)](_0x5c1444,this[_0x36b557(0xb1a)](_0x3f7cc0,_0x5a1256,_0x377990));}return _0x39522b;},Window_InBattleStatusStates[_0x4376f0(0x705)][_0x4376f0(0x98b)]=function(){const _0x52007a=_0x4376f0,_0x27f500=Window_InBattleStatusStates[_0x52007a(0xa70)],_0x4961cb=this[_0x52007a(0xae1)]();let _0x316295='';const _0x104280=this[_0x52007a(0x39a)][_0x52007a(0x428)](_0x4961cb),_0x2a3f8c=_0x104280?_0x52007a(0x773):_0x52007a(0x915),_0x543b48=_0x27f500[_0x2a3f8c];let _0x33346f=_0x52007a(0xc4b);Imported[_0x52007a(0x601)]&&Imported[_0x52007a(0x1f9)]&&(_0x33346f=_0x104280?ColorManager[_0x52007a(0x79a)]():ColorManager[_0x52007a(0x727)](),_0x33346f[_0x52007a(0x844)](/#(.*?)/gi)?_0x33346f=_0x52007a(0x423)[_0x52007a(0xa30)](_0x33346f):_0x33346f=_0x52007a(0xb97)[_0x52007a(0xa30)](_0x33346f));const _0x24a879=this[_0x52007a(0x39a)][_0x52007a(0x471)][_0x4961cb]||0x0;return _0x316295=_0x543b48[_0x52007a(0xa30)](TextManager[_0x52007a(0x8b6)](_0x4961cb),Math['floor'](this[_0x52007a(0x39a)][_0x52007a(0x15c)](_0x4961cb)*0x64)+'%',_0x33346f,this['makeTurnsText'](_0x52007a(0xa5a),_0x24a879,_0x33346f)),_0x316295;},Window_InBattleStatusStates[_0x4376f0(0x705)][_0x4376f0(0xb1a)]=function(_0x1dca1f,_0x100e70,_0x359c23){const _0x2af435=_0x4376f0,_0x5b7042=Window_InBattleStatusStates[_0x2af435(0xa70)];let _0x4f23f6=_0x5b7042['passiveText'];if(_0x1dca1f===_0x2af435(0x4d2))_0x4f23f6=_0x5b7042[_0x2af435(0x624)];if(_0x1dca1f===_0x2af435(0xa5a))_0x4f23f6=_0x5b7042[_0x2af435(0x1a5)];if(_0x1dca1f===_0x2af435(0x34d))return'';return _0x4f23f6[_0x2af435(0xa30)](_0x100e70,_0x359c23);};